------- FILE cart.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE cart.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.07, 19/January/2020
      3  0000 ????
      4  0000 ????	       00 6b	   VERSION_MACRO =	107
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE cart.asm
      5  0000 ????
      6  0000 ????						;;;; start constant declarations
      7  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      8  0000 ????	       00 09	   P0HEIGHT   equ	9
      9  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  0000 ????						;;;; end constant declarations
     11  0000 ????
     12  0000 ????						;;; $80 to $FF for variables, minus some at end if using stack
     13 U00b0 ????				      seg.u	variables
     14 U0080					      org	$80
     15 U0080							;;;;  start variable declarations
     16 U0080							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     17 U0080		       00	   P0x	      byte.b		; (80) P0 x
     18 U0081		       00	   P0y	      byte.b		; (81) P0 y
     19 U0082		       00	   P0spritePtr byte.b		; (82) y-adjusted sprite pointer
     20 U0083		       00	   P0spriteHi byte.b		; (83) MSB of sprite pointer
     21 U0084		       00	   P0time0    byte.b		; (84) P0 reaction budget
     22 U0085		       00	   P0time1    byte.b		; (85) P0 reaction budget
     23 U0086		       00	   P0score    byte.b		; (86) P0 score
     24 U0087		       00	   P0bitmap   byte.b		; (87) P0bitmap (without screen-draw offset)
     25 U0088		       00	   LeftScore4 byte.b		; (88) Score Digits
     26 U0089		       00	   LeftScore5 byte.b		; (89) Score Digits
     27 U008a		       00	   Active     byte.b		; (8a) bit 0 = count time, bit 1 = check input
     28 U008b		       00	   DelayTime  byte.b		; (8a) Time left in delay
     29 U008c		       00	   Rand8      byte.b		; (8b) 8-bit random
     30 U008d
     31 U008d							; Top Bar digit pointers
     32 U00a0					      org	$a0
     33 U00a0		       00 00	   LeftScorePtr0 word.w		; (a0/1)
     34 U00a2		       00 00	   LeftScorePtr1 word.w		; (a2/3)
     35 U00a4		       00 00	   LeftScorePtr2 word.w		; (a4/5)
     36 U00a6		       00 00	   LeftScorePtr3 word.w		; (a6/7)
     37 U00a8		       00 00	   LeftScorePtr4 word.w		; (a8/9)
     38 U00aa		       00 00	   LeftScorePtr5 word.w		; (aa/b)
     39 U00ac		       00 00	   RightScorePtr0 word.w		; (ac/d)
     40 U00ae		       00 00	   RightScorePtr1 word.w		; (ae/f)
     41 U00b0
     42 U00b0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     43 U00b0							;;;;  end variables
     44 U00b0
     45 U00b0							;;; Begin code segment in ROM at $F000
     46  10000 ????				       seg	code
     47  f000					      org	$F000
     48  f000
     49  f000				   Start
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     51  f00b
     52  f00b							;;;;  start variable initialization
     53  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     54  f00b							;;; initialize Random seed
     55  f00b		       ad 84 02 	      lda	INTIM	; unknown from timer
     56  f00e		       05 01		      ora	$1	; can't be zero
     57  f010		       85 8c		      sta	Rand8
     58  f012							;;; Set initial P0bitmap to Up
     59  f012		       a9 1f		      lda	#<Ubitmap
     60  f014		       85 87		      sta	P0bitmap
     61  f016							;;; player coordinates (match bitmap above)
     62  f016		       ad 4e f3 	      lda	PositionX+2
     63  f019		       85 80		      sta	P0x
     64  f01b		       ad 52 f3 	      lda	PositionY+2
     65  f01e		       85 81		      sta	P0y
     66  f020							;;; Set high byte of P0spritePtr (low byte updated per frame)
     67  f020		       a9 f3		      lda	#>BitmapTable
     68  f022		       85 83		      sta	P0spriteHi
     69  f024							;;; set timer to 999 (decimal)
     70  f024		       a9 99		      lda	#153	; hex 99
     71  f026		       85 84		      sta	P0time0
     72  f028		       a9 09		      lda	#9
     73  f02a		       85 85		      sta	P0time1
     74  f02c
     75  f02c							;;; check input but don't consume time
     76  f02c		       a9 02		      lda	#%0000010
     77  f02e		       85 8a		      sta	Active
     78  f030
     79  f030							;;; Set Score Digits
     80  f030		       a9 0a		      lda	#$0a	; blank
     81  f032		       85 88		      sta	LeftScore4
     82  f034		       85 89		      sta	LeftScore5
     83  f036
     84  f036							;;; set up Score pointer high bytes
     85  f036		       a9 f7		      lda	#>digitTableLeftRev
     86  f038		       85 a1		      sta	LeftScorePtr0+1
     87  f03a		       85 a9		      sta	LeftScorePtr4+1
     88  f03c		       85 ab		      sta	LeftScorePtr5+1
     89  f03e		       85 af		      sta	RightScorePtr1+1
     90  f040		       a9 f5		      lda	#>digitTableLeft
     91  f042		       85 a3		      sta	LeftScorePtr1+1
     92  f044		       a9 f4		      lda	#>digitTableRight
     93  f046		       85 a5		      sta	LeftScorePtr2+1
     94  f048		       a9 f6		      lda	#>digitTableRightRev
     95  f04a		       85 a7		      sta	LeftScorePtr3+1
     96  f04c		       85 ad		      sta	RightScorePtr0+1
     97  f04e
     98  f04e							;;; register setup
     99  f04e							; playfield color
    100  f04e		       a9 37		      lda	#55
    101  f050		       85 08		      sta	COLUPF
    102  f052							; player/missile size register
    103  f052		       a5 00		      lda	%00000000	; one player, single-sized
    104  f054							;lda %00000101    ; one player, double-sized
    105  f054							;lda %00000111    ; one player, quad-sized
    106  f054		       85 04		      sta	NUSIZ0
    107  f056							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    108  f056							;;;;  end variable initialization
    109  f056
    110  f056				   StartFrame
    111  f056		       a9 02		      lda	#2
    112  f058		       85 00		      sta	VSYNC
    113  f05a
    114  f05a							;;; 3 lines of VSYNC
    115  f05a		       85 02		      sta	WSYNC	; store halts until scanline complete
    116  f05c		       85 02		      sta	WSYNC	; 2nd
    117  f05e		       85 02		      sta	WSYNC	; 3rd
    118  f060
    119  f060							;;;; set timer for VBLANK
    120  f060		       a9 2c		      LDA	#44
    121  f062		       8d 96 02 	      STA	TIM64T
    122  f065
    123  f065		       a9 00		      lda	#0
    124  f067		       85 00		      sta	VSYNC	; turn off VSYNC
    125  f069
    126  f069							;;;;  start game vblank logic
    127  f069							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    128  f069
    129  f069							;;; Consume Time
    130  f069		       20 88 f1 	      jsr	ConsumeTime	; checks 0 bit of Active
    131  f06c							;;; check if open for input
    132  f06c		       a9 02		      lda	#%00000010	; 1 bit of Active governs input
    133  f06e		       24 8a		      bit	Active
    134  f070		       f0 03		      beq	NotActive
    135  f072		       4c b8 f0 	      jmp	CheckInput
    136  f075							;;; not active so check if time to activate
    137  f075				   NotActive
    138  f075		       a5 8b		      lda	DelayTime
    139  f077		       f0 3c		      beq	NoNewBitmap	; already zero
    140  f079		       38		      sec
    141  f07a		       e9 01		      sbc	#1
    142  f07c		       85 8b		      sta	DelayTime
    143  f07e		       d0 35		      bne	NoNewBitmap
    144  f080				   NewBitmap
    145  f080		       20 21 f2 	      jsr	Random	; get a random #
    146  f083		       29 03		      and	#%00000011	; truncate to 2 bits
    147  f085		       a8		      tay		; put in Y
    148  f086		       18		      clc
    149  f087		       b9 00 f3 	      lda	BitmapIndex,Y
    150  f08a		       85 87		      sta	P0bitmap
    151  f08c							; Update position
    152  f08c		       a9 05		      lda	#5	; starting at 999 so half is roughly 500
    153  f08e		       c5 85		      cmp	P0time1
    154  f090		       b0 0d		      bcs	RandomPosition	; if 5 > P0time1
    155  f092				   FixedPosition
    156  f092		       b9 4c f3 	      lda	PositionX,Y
    157  f095		       85 80		      sta	P0x
    158  f097		       b9 50 f3 	      lda	PositionY,Y
    159  f09a		       85 81		      sta	P0y
    160  f09c		       4c b1 f0 	      jmp	SetActive
    161  f09f				   RandomPosition
    162  f09f		       20 21 f2 	      jsr	Random
    163  f0a2		       29 7f		      and	#%01111111	; upper bound 127
    164  f0a4		       09 10		      ora	#%00010000	; lower bound 16
    165  f0a6		       85 80		      sta	P0x
    166  f0a8		       20 21 f2 	      jsr	Random
    167  f0ab		       29 7f		      and	#%01111111	; upper bound 127
    168  f0ad		       09 10		      ora	#%00010000	; lower bound 16
    169  f0af		       85 81		      sta	P0y
    170  f0b1				   SetActive
    171  f0b1							; set Active
    172  f0b1		       a9 03		      lda	#3
    173  f0b3		       85 8a		      sta	Active
    174  f0b5				   NoNewBitmap
    175  f0b5		       4c 07 f1 	      jmp	EndP0Input
    176  f0b8
    177  f0b8							;;; check input signals
    178  f0b8				   CheckInput
    179  f0b8		       a2 31		      ldx	#<NullBitmap
    180  f0ba				   CheckP0Up
    181  f0ba		       a9 10		      lda	#%00010000
    182  f0bc		       2c 80 02 	      bit	SWCHA
    183  f0bf		       d0 02		      bne	CheckP0Down
    184  f0c1		       a2 1f		      ldx	#<Ubitmap
    185  f0c3				   CheckP0Down
    186  f0c3		       a9 20		      lda	#%00100000
    187  f0c5		       2c 80 02 	      bit	SWCHA
    188  f0c8		       d0 02		      bne	CheckP0Right
    189  f0ca		       a2 16		      ldx	#<Dbitmap
    190  f0cc				   CheckP0Right
    191  f0cc		       a9 80		      lda	#%10000000
    192  f0ce		       2c 80 02 	      bit	SWCHA
    193  f0d1		       d0 02		      bne	CheckP0Left
    194  f0d3		       a2 0d		      ldx	#<Rbitmap
    195  f0d5				   CheckP0Left
    196  f0d5		       a9 40		      lda	#%01000000
    197  f0d7		       2c 80 02 	      bit	SWCHA
    198  f0da		       d0 02		      bne	EndP0InputCheck
    199  f0dc		       a2 04		      ldx	#<Lbitmap
    200  f0de				   EndP0InputCheck
    201  f0de
    202  f0de							;;; do input-related processing
    203  f0de				   CheckInputCorrect
    204  f0de		       e0 31		      cpx	#<NullBitmap	; if x hasn't changed
    205  f0e0		       f0 25		      beq	EndP0Input	; we didn't get input
    206  f0e2		       a9 00		      lda	#0	; if we did get input
    207  f0e4		       85 8a		      sta	Active	; stop time counter and input checking
    208  f0e6		       e4 87		      cpx	P0bitmap	; check if input matches icon
    209  f0e8		       d0 10		      bne	P0Incorrect
    210  f0ea				   P0Correct
    211  f0ea							; increment (decimal) score
    212  f0ea		       18		      clc
    213  f0eb		       a5 86		      lda	P0score
    214  f0ed		       f8		      sed
    215  f0ee		       69 01		      adc	#1
    216  f0f0		       85 86		      sta	P0score
    217  f0f2		       d8		      cld
    218  f0f3							; set bitmap to null
    219  f0f3		       a9 31		      lda	#<NullBitmap
    220  f0f5		       85 87		      sta	P0bitmap
    221  f0f7		       4c fe f0 	      jmp	SetDelay
    222  f0fa				   P0Incorrect
    223  f0fa		       a9 28		      lda	#<Xbitmap	; set bitmap to X
    224  f0fc		       85 87		      sta	P0bitmap
    225  f0fe				   SetDelay
    226  f0fe							; set a random delay
    227  f0fe		       20 21 f2 	      jsr	Random
    228  f101		       29 3f		      and	#%00111111	; max 127 (around 2.5 second)
    229  f103		       09 20		      ora	#%00100000	; min 31 (a little more than 1/2 second)
    230  f105		       85 8b		      sta	DelayTime
    231  f107							;;; end of input processing
    232  f107				   EndP0Input
    233  f107
    234  f107							;;; P0 horizontal position
    235  f107		       a2 00		      ldx	#0
    236  f109		       a5 80		      lda	P0x
    237  f10b		       20 00 f2 	      jsr	PosObject
    238  f10e							;;; P0 vertical position
    239  f10e		       a5 87		      lda	P0bitmap	; bitmap base
    240  f110		       18		      clc		; clear carry for add
    241  f111		       69 09		      adc	#P0HEIGHT	; bitmap high end
    242  f113		       38		      sec		; set carry for subtract
    243  f114		       e5 81		      sbc	P0y	; offset by P0y for draw logic
    244  f116		       85 82		      sta	P0spritePtr	; store in sprite pointer
    245  f118		       a9 f3		      lda	#>BitmapTable	; load 2nd byte of bitmap table
    246  f11a		       e9 00		      sbc	#0	; subtract 0 (decrements if carry is clear from previous)
    247  f11c		       85 83		      sta	P0spritePtr+1	; store in high byte of sprite pointer
    248  f11e
    249  f11e							;;; Setup score pointers for display
    250  f11e		       20 b8 f1 	      jsr	LoadScorePointers
    251  f121
    252  f121							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    253  f121							;;;;  end game vblank logic
    254  f121
    255  f121							;;;; Wait for rest of VBLANK
    256  f121				   .VblankWaitLoop
    257  f121		       ad 84 02 	      lda	INTIM	; load timer interrupt
    258  f124		       d0 fb		      bne	.VblankWaitLoop
    259  f126		       85 02		      sta	WSYNC	; wait for next wsync
    260  f128		       85 01		      sta	VBLANK	; turn off VBlank
    261  f12a
    262  f12a							;;;; kernel (192 visible scan lines)
    263  f12a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    264  f12a		       a0 0e		      ldy	#14
    265  f12c							;;; display 14 rows of "score"
    266  f12c				   .ScrollLoop
    267  f12c		       85 02		      sta	WSYNC	; 3| 0
    268  f12e		       b1 a0		      lda	(LeftScorePtr0),Y	; 5| 5 PF0 is single digit
    269  f130		       85 0d		      sta	PF0	; 3| 8
    270  f132		       b1 a2		      lda	(LeftScorePtr1),Y	; 4|12
    271  f134		       11 a4		      ora	(LeftScorePtr2),Y	; 5|17
    272  f136		       85 0e		      sta	PF1	; 3|20
    273  f138		       b1 a6		      lda	(LeftScorePtr3),Y	; 5|25
    274  f13a		       11 a8		      ora	(LeftScorePtr4),Y	; 5|30
    275  f13c		       85 0f		      sta	PF2	; 3|33
    276  f13e		       b1 aa		      lda	(LeftScorePtr5),Y	; 5|38
    277  f140		       85 0d		      sta	PF0	; 3|41
    278  f142							;; need to redo counts
    279  f142							;	lda (ScrollPtr6),Y	; 5|46
    280  f142							;	ora (ScrollPtr7),Y	; 5|51
    281  f142		       a9 00		      lda	#0
    282  f144		       85 0e		      sta	PF1	; 3|54
    283  f146		       b1 ac		      lda	(RightScorePtr0),Y	; 5|59
    284  f148		       11 ae		      ora	(RightScorePtr1),Y	; 5|64
    285  f14a		       85 0f		      sta	PF2	; 3|67
    286  f14c		       88		      dey		; 2|69
    287  f14d		       d0 dd		      bne	.ScrollLoop	; 3|75/76
    288  f14f
    289  f14f							;;; one more black line before moving to play area
    290  f14f		       85 02		      sta	WSYNC
    291  f151		       a0 b1		      ldy	#177	; counter
    292  f153		       a2 00		      ldx	#0	; first GRP0 should be 0
    293  f155				   .LoopVisible
    294  f155							;;; for rainbow background
    295  f155		       86 1b		      stx	GRP0	; 3 (calculated on previous line)
    296  f157		       84 09		      sty	COLUBK	; set bg color to loop var
    297  f159
    298  f159							;;; draw P0
    299  f159		       38		      sec		; 2 set carry
    300  f15a		       98		      tya		; 2
    301  f15b		       e5 81		      sbc	P0y	; 3
    302  f15d		       65 09		      adc	P0HEIGHT	; 2
    303  f15f		       b0 05		      bcs	.DrawP0
    304  f161
    305  f161		       ea		      nop		; 2
    306  f162		       ea		      nop		; 2
    307  f163		       38		      sec		; 2
    308  f164		       b0 03		      bcs	.NoDrawP0	; 3
    309  f166				   .DrawP0
    310  f166		       b1 82		      lda	(P0spritePtr),Y	; 5
    311  f168		       aa		      tax
    312  f169				   .NoDrawP0
    313  f169
    314  f169		       85 02		      sta	WSYNC	; wait for next scanline
    315  f16b		       88		      dey		; y--
    316  f16c		       d0 e7		      bne	.LoopVisible	; go back until x = 0
    317  f16e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    318  f16e							;;;; end kernel
    319  f16e
    320  f16e							;;;; set timer for OVERSCAN
    321  f16e		       a9 02		      lda	#2
    322  f170		       85 02		      sta	WSYNC
    323  f172		       85 01		      sta	VBLANK
    324  f174		       a9 24		      lda	#36
    325  f176		       8d 96 02 	      sta	TIM64T
    326  f179
    327  f179							;;;;  start game overscan logic
    328  f179							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    329  f179							;;; cycle the Random a tick
    330  f179		       20 21 f2 	      jsr	Random
    331  f17c
    332  f17c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    333  f17c							;;;;  end game overscan logic
    334  f17c
    335  f17c
    336  f17c							;;;; Wait for rest of OVERSCAN
    337  f17c				   .OverscanWaitLoop
    338  f17c		       ad 84 02 	      lda	INTIM
    339  f17f		       d0 fb		      bne	.OverscanWaitLoop
    340  f181		       a9 02		      lda	#2
    341  f183		       85 02		      sta	WSYNC
    342  f185
    343  f185							;;; new frame
    344  f185		       4c 56 f0 	      jmp	StartFrame
    345  f188
    346  f188							;;;;	start subroutines
    347  f188							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    348  f188							;;; Load Score Pointers based on corresponding values
    349  f188
    350  f188				   ConsumeTime SUBROUTINE
    351  f188		       a9 01		      lda	#%00000001	; 0 bit of Active governs time
    352  f18a		       24 8a		      bit	Active
    353  f18c		       d0 01		      bne	UseTime
    354  f18e		       60		      rts
    355  f18f				   UseTime
    356  f18f		       f8		      sed
    357  f190		       38		      sec
    358  f191		       a5 84		      lda	P0time0
    359  f193		       e9 01		      sbc	#1
    360  f195		       85 84		      sta	P0time0
    361  f197		       a5 85		      lda	P0time1
    362  f199		       e9 00		      sbc	#0
    363  f19b		       85 85		      sta	P0time1
    364  f19d		       d8		      cld
    365  f19e		       90 01		      bcc	TimesUp
    366  f1a0		       60		      rts
    367  f1a1				   TimesUp
    368  f1a1							; time's up, set back to 0 and deactivate countdown
    369  f1a1		       a9 00		      lda	#0
    370  f1a3		       85 84		      sta	P0time0
    371  f1a5		       85 85		      sta	P0time1
    372  f1a7		       85 8a		      sta	Active
    373  f1a9		       a9 3a		      lda	#<TimeBitmap
    374  f1ab		       85 87		      sta	P0bitmap
    375  f1ad		       ad 4e f3 	      lda	PositionX+2
    376  f1b0		       85 80		      sta	P0x
    377  f1b2		       ad 50 f3 	      lda	PositionY
    378  f1b5		       85 81		      sta	P0y
    379  f1b7		       60		      rts
    380  f1b8
    381  f1b8				   LoadScorePointers SUBROUTINE
    382  f1b8							; first byte (two digits) of timer
    383  f1b8		       a9 f0		      lda	#%11110000	; mask for first decimal digit
    384  f1ba		       25 85		      and	P0time1	;
    385  f1bc		       85 a0		      sta	LeftScorePtr0	; store as is (already x16)
    386  f1be
    387  f1be		       a9 0f		      lda	#%00001111	; mask for 2nd decimal digit
    388  f1c0		       25 85		      and	P0time1	;
    389  f1c2		       0a		      asl		;
    390  f1c3		       0a		      asl		;
    391  f1c4		       0a		      asl		;
    392  f1c5		       0a		      asl		; multiply by 16
    393  f1c6		       85 a2		      sta	LeftScorePtr1	; store in pointer
    394  f1c8
    395  f1c8							; second byte (two digits) of timer
    396  f1c8		       a9 f0		      lda	#%11110000	; mask for first decimal digit
    397  f1ca		       25 84		      and	P0time0	;
    398  f1cc		       85 a4		      sta	LeftScorePtr2	; store as is (already x16)
    399  f1ce
    400  f1ce		       a9 0f		      lda	#%00001111	; mask for 2nd decimal digit
    401  f1d0		       25 84		      and	P0time0	;
    402  f1d2		       0a		      asl		;
    403  f1d3		       0a		      asl		;
    404  f1d4		       0a		      asl		;
    405  f1d5		       0a		      asl		; multiply by 16
    406  f1d6		       85 a6		      sta	LeftScorePtr3	; store in pointer
    407  f1d8
    408  f1d8		       a9 0f		      lda	#%00001111	; mask for 2nd decimal digit
    409  f1da		       25 88		      and	LeftScore4	; load the digit
    410  f1dc		       0a		      asl		;
    411  f1dd		       0a		      asl		;
    412  f1de		       0a		      asl		;
    413  f1df		       0a		      asl		; multiply by 16
    414  f1e0		       85 a8		      sta	LeftScorePtr4	; Put in LSB of ScrollPtr
    415  f1e2
    416  f1e2							; delay time countdown (MSB only)
    417  f1e2		       a9 f0		      lda	#%11110000	; mask for first decimal digit
    418  f1e4		       25 8b		      and	DelayTime	; load the digit
    419  f1e6		       85 aa		      sta	LeftScorePtr5	; store as is (already x16)
    420  f1e8
    421  f1e8							; score digits
    422  f1e8		       a9 f0		      lda	#%11110000	; mask for first decimal digit
    423  f1ea		       25 86		      and	P0score	;
    424  f1ec		       85 ac		      sta	RightScorePtr0	; store as is (already x16)
    425  f1ee
    426  f1ee		       a9 0f		      lda	#%00001111	; mask for 2nd decimal digit
    427  f1f0		       25 86		      and	P0score	;
    428  f1f2		       0a		      asl		;
    429  f1f3		       0a		      asl		;
    430  f1f4		       0a		      asl		;
    431  f1f5		       0a		      asl		; multiply by 16
    432  f1f6		       85 ae		      sta	RightScorePtr1	; store in pointer
    433  f1f8
    434  f1f8		       60		      rts
    435  f1f9
    436  f200		       00 00 00 00*	      align	256	; PosObject is timing dependent and can't cross page boundaries
    437  f200							;;; PosObject from https://www.biglist.com/lists/stella/archives/200403/msg00260.html
    438  f200							; Positions an object horizontally
    439  f200							; Inputs: A = Desired position.
    440  f200							; X = Desired object to be positioned (0-5). *jh* (P0, P1, M0, M1, Ball)
    441  f200							; scanlines: If control comes on or before cycle 73 then 1 scanline is consumed.
    442  f200							; If control comes after cycle 73 then 2 scanlines are consumed.
    443  f200							; Outputs: X = unchanged
    444  f200							; A = Fine Adjustment value.
    445  f200							; Y = the "remainder" of the division by 15 minus an additional 15.
    446  f200							; control is returned on cycle 6 of the next scanline.
    447  f200				   PosObject  SUBROUTINE
    448  f200
    449  f200		       85 02		      STA	WSYNC	; 00 Sync to start of scanline.
    450  f202		       38		      SEC		; 02 Set the carry flag so no borrow will be applied during the division.
    451  f203				   .divideby15
    452  f203		       e9 0f		      SBC	#15	; 04 ; Waste the necessary amount of time dividing X-pos by 15!
    453  f205		       b0 fc		      BCS	.divideby15	; 06/07 - 11/16/21/26/31/36/41/46/51/56/61/66
    454  f207
    455  f207		       a8		      TAY		; 08 ; At this point the value in A is -1 to -15. In this code I use a table
    456  f208							; to quickly convert that value to the fine adjust value needed.
    457  f208		       b9 21 f1 	      LDA	fineAdjustTable,Y	; 13 -> Consume 5 cycles by guaranteeing we cross a page boundary
    458  f20b							; In your own code you may wish to consume only 4.
    459  f20b		       95 20		      STA	HMP0,X	; 17 Store the fine adjustment value.
    460  f20d		       95 10		      STA	RESP0,X	; 21/ 26/31/36/41/46/51/56/61/66/71 - Set the rough position.
    461  f20f
    462  f20f		       85 02		      STA	WSYNC
    463  f211		       60		      RTS
    464  f212
    465  f212							;;; end PosObject from https://www.biglist.com/lists/stella/archives/200403/msg00260.html
    466  f212							;;; (see link for alternate way without lookup table)
    467  f212
    468  f212							;;; fine adjustment for PosObject
    469  f212							;;; some explanation on "negative index" is here:
    470  f212							;;; - https://www.randomterrain.com/atari-2600-memories-tutorial-andrew-davie-24.html
    471  f212
    472  f212				   fineAdjustBegin
    473  f212		       70		      DC.B	%01110000	; Left 7
    474  f213		       60		      DC.B	%01100000	; Left 6
    475  f214		       50		      DC.B	%01010000	; Left 5
    476  f215		       40		      DC.B	%01000000	; Left 4
    477  f216		       30		      DC.B	%00110000	; Left 3
    478  f217		       20		      DC.B	%00100000	; Left 2
    479  f218		       10		      DC.B	%00010000	; Left 1
    480  f219		       00		      DC.B	%00000000	; No movement.
    481  f21a		       f0		      DC.B	%11110000	; Right 1
    482  f21b		       e0		      DC.B	%11100000	; Right 2
    483  f21c		       d0		      DC.B	%11010000	; Right 3
    484  f21d		       c0		      DC.B	%11000000	; Right 4
    485  f21e		       b0		      DC.B	%10110000	; Right 5
    486  f21f		       a0		      DC.B	%10100000	; Right 6
    487  f220		       90		      DC.B	%10010000	; Right 7
    488  f220		       f1 21	   fineAdjustTable EQU	fineAdjustBegin - %11110001	; NOTE: %11110001 = -15
    489  f221
    490  f221							;;; Random from https://forums.atariage.com/blogs/entry/11145-step-10-random-numbers/
    491  f221				   Random
    492  f221		       a5 8c		      lda	Rand8
    493  f223		       4a		      lsr
    494  f224		       90 02		      bcc	noeor
    495  f226		       49 b4		      eor	#$B4
    496  f228				   noeor
    497  f228		       85 8c		      sta	Rand8
    498  f22a		       60		      rts
    499  f22b
    500  f22b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    501  f22b							;;;;	end subroutines
    502  f22b
    503  f22b							;;;;  start ROM lookup tables
    504  f22b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    505  f300		       00 00 00 00*	      align	256
    506  f300				   BitmapIndex
    507  f300		       04		      byte.b	#<Lbitmap
    508  f301		       0d		      byte.b	#<Rbitmap
    509  f302		       1f		      byte.b	#<Ubitmap
    510  f303		       16		      byte.b	#<Dbitmap
    511  f304
    512  f304				   BitmapTable
    513  f304				   Lbitmap
    514  f304		       00		      byte.b	#%00000000
    515  f305		       10		      byte.b	#%00010000
    516  f306		       30		      byte.b	#%00110000
    517  f307		       7f		      byte.b	#%01111111
    518  f308		       ff		      byte.b	#%11111111
    519  f309		       7f		      byte.b	#%01111111
    520  f30a		       30		      byte.b	#%00110000
    521  f30b		       10		      byte.b	#%00010000
    522  f30c		       00		      byte.b	#%00000000
    523  f30d
    524  f30d				   Rbitmap
    525  f30d		       00		      byte.b	#%00000000
    526  f30e		       08		      byte.b	#%00001000
    527  f30f		       0c		      byte.b	#%00001100
    528  f310		       fe		      byte.b	#%11111110
    529  f311		       ff		      byte.b	#%11111111
    530  f312		       fe		      byte.b	#%11111110
    531  f313		       0c		      byte.b	#%00001100
    532  f314		       08		      byte.b	#%00001000
    533  f315		       00		      byte.b	#%00000000
    534  f316
    535  f316				   Dbitmap
    536  f316		       00		      byte.b	#%00000000
    537  f317		       10		      byte.b	#%00010000
    538  f318		       38		      byte.b	#%00111000
    539  f319		       7c		      byte.b	#%01111100
    540  f31a		       fe		      byte.b	#%11111110
    541  f31b		       38		      byte.b	#%00111000
    542  f31c		       38		      byte.b	#%00111000
    543  f31d		       38		      byte.b	#%00111000
    544  f31e		       00		      byte.b	#%00000000
    545  f31f
    546  f31f				   Ubitmap
    547  f31f		       00		      byte.b	#%00000000
    548  f320		       38		      byte.b	#%00111000
    549  f321		       38		      byte.b	#%00111000
    550  f322		       38		      byte.b	#%00111000
    551  f323		       fe		      byte.b	#%11111110
    552  f324		       7c		      byte.b	#%01111100
    553  f325		       38		      byte.b	#%00111000
    554  f326		       10		      byte.b	#%00010000
    555  f327		       00		      byte.b	#%00000000
    556  f328
    557  f328				   Xbitmap
    558  f328		       00		      byte.b	#%00000000
    559  f329		       82		      byte.b	#%10000010
    560  f32a		       44		      byte.b	#%01000100
    561  f32b		       28		      byte.b	#%00101000
    562  f32c		       10		      byte.b	#%00010000
    563  f32d		       28		      byte.b	#%00101000
    564  f32e		       44		      byte.b	#%01000100
    565  f32f		       82		      byte.b	#%10000010
    566  f330		       00		      byte.b	#%00000000
    567  f331
    568  f331				   NullBitmap
    569  f331		       00		      byte.b	#%00000000
    570  f332		       00		      byte.b	#%00000000
    571  f333		       00		      byte.b	#%00000000
    572  f334		       00		      byte.b	#%00000000
    573  f335		       00		      byte.b	#%00000000
    574  f336		       00		      byte.b	#%00000000
    575  f337		       00		      byte.b	#%00000000
    576  f338		       00		      byte.b	#%00000000
    577  f339		       00		      byte.b	#%00000000
    578  f33a
    579  f33a				   TimeBitmap
    580  f33a		       00		      byte.b	#%00000000
    581  f33b		       ff		      byte.b	#%11111111
    582  f33c		       5a		      byte.b	#%01011010
    583  f33d		       24		      byte.b	#%00100100
    584  f33e		       18		      byte.b	#%00011000
    585  f33f		       24		      byte.b	#%00100100
    586  f340		       42		      byte.b	#%01000010
    587  f341		       ff		      byte.b	#%11111111
    588  f342		       00		      byte.b	#%00000000
    589  f343
    590  f343				   P0color
    591  f343		       00		      byte.b	#$00
    592  f344		       00		      byte.b	#$00
    593  f345		       00		      byte.b	#$00
    594  f346		       00		      byte.b	#$00
    595  f347		       00		      byte.b	#$00
    596  f348		       00		      byte.b	#$00
    597  f349		       00		      byte.b	#$00
    598  f34a		       00		      byte.b	#$00
    599  f34b		       00		      byte.b	#$00
    600  f34c
    601  f34c							;;; X and Y location per directional icon
    602  f34c				   PositionX
    603  f34c		       35		      byte.b	#53	; left
    604  f34d		       6b		      byte.b	#107	; right
    605  f34e		       50		      byte.b	#80	; up
    606  f34f		       50		      byte.b	#80	; down
    607  f350
    608  f350				   PositionY
    609  f350		       5d		      byte.b	#93	; left (177/2 - 9/2)
    610  f351		       5d		      byte.b	#93	; right
    611  f352		       80		      byte.b	#128	; up
    612  f353		       3b		      byte.b	#59	; down
    613  f354
    614  f354							;;; digits.h should set digitTable at the beginning followed by
    615  f354							;;;	      an array of 16 bytes for each digit 0-9
------- FILE digitTableRight.h LEVEL 2 PASS 2
      0  f354					      include	"digitTableRight.h"
      1  f400		       00 00 00 00*	      align	256
      2  f400				   digitTableRight
      3  f400							; 0
      4  f400		       00		      .byte.b	%00000000	;|
      5  f401		       00		      .byte.b	%00000000	;|
      6  f402		       04		      .byte.b	%00000100	;| X
      7  f403		       04		      .byte.b	%00000100	;| X
      8  f404		       0e		      .byte.b	%00001110	;|XXX
      9  f405		       0a		      .byte.b	%00001010	;|X X
     10  f406		       0a		      .byte.b	%00001010	;|X X
     11  f407		       0a		      .byte.b	%00001010	;|X X
     12  f408		       0a		      .byte.b	%00001010	;|X X
     13  f409		       0a		      .byte.b	%00001010	;|X X
     14  f40a		       0a		      .byte.b	%00001010	;|X X
     15  f40b		       0e		      .byte.b	%00001110	;|XXX
     16  f40c		       04		      .byte.b	%00000100	;| X
     17  f40d		       04		      .byte.b	%00000100	;| X
     18  f40e		       00		      .byte.b	%00000000	;|
     19  f40f		       00		      .byte.b	%00000000	;|
     20  f410							; 1
     21  f410		       00		      .byte.b	%00000000	;|
     22  f411		       00		      .byte.b	%00000000	;|
     23  f412		       0e		      .byte.b	%00001110	;|XXX
     24  f413		       0e		      .byte.b	%00001110	;|XXX
     25  f414		       0e		      .byte.b	%00001110	;|XXX
     26  f415		       04		      .byte.b	%00000100	;| X
     27  f416		       04		      .byte.b	%00000100	;| X
     28  f417		       04		      .byte.b	%00000100	;| X
     29  f418		       04		      .byte.b	%00000100	;| X
     30  f419		       04		      .byte.b	%00000100	;| X
     31  f41a		       04		      .byte.b	%00000100	;| X
     32  f41b		       0c		      .byte.b	%00001100	;|XX
     33  f41c		       0c		      .byte.b	%00001100	;|XX
     34  f41d		       04		      .byte.b	%00000100	;| X
     35  f41e		       00		      .byte.b	%00000000	;|
     36  f41f		       00		      .byte.b	%00000000	;|
     37  f420							; 2
     38  f420		       00		      .byte.b	%00000000	;|
     39  f421		       00		      .byte.b	%00000000	;|
     40  f422		       0e		      .byte.b	%00001110	;|XXX
     41  f423		       0e		      .byte.b	%00001110	;|XXX
     42  f424		       08		      .byte.b	%00001000	;|X
     43  f425		       08		      .byte.b	%00001000	;|X
     44  f426		       0c		      .byte.b	%00001100	;|XX
     45  f427		       06		      .byte.b	%00000110	;| XX
     46  f428		       06		      .byte.b	%00000110	;| XX
     47  f429		       02		      .byte.b	%00000010	;|  X
     48  f42a		       0a		      .byte.b	%00001010	;|X X
     49  f42b		       0e		      .byte.b	%00001110	;|XXX
     50  f42c		       0e		      .byte.b	%00001110	;|XXX
     51  f42d		       04		      .byte.b	%00000100	;| X
     52  f42e		       00		      .byte.b	%00000000	;|
     53  f42f		       00		      .byte.b	%00000000	;|
     54  f430							; 3
     55  f430		       00		      .byte.b	%00000000	;|
     56  f431		       00		      .byte.b	%00000000	;|
     57  f432		       04		      .byte.b	%00000100	;| X
     58  f433		       04		      .byte.b	%00000100	;| X
     59  f434		       0e		      .byte.b	%00001110	;|XXX
     60  f435		       0a		      .byte.b	%00001010	;|X X
     61  f436		       02		      .byte.b	%00000010	;|  X
     62  f437		       04		      .byte.b	%00000100	;| X
     63  f438		       06		      .byte.b	%00000110	;| XX
     64  f439		       02		      .byte.b	%00000010	;|  X
     65  f43a		       0a		      .byte.b	%00001010	;|X X
     66  f43b		       0e		      .byte.b	%00001110	;|XXX
     67  f43c		       04		      .byte.b	%00000100	;| X
     68  f43d		       04		      .byte.b	%00000100	;| X
     69  f43e		       00		      .byte.b	%00000000	;|
     70  f43f		       00		      .byte.b	%00000000	;|
     71  f440							; 4
     72  f440		       00		      .byte.b	%00000000	;|
     73  f441		       00		      .byte.b	%00000000	;|
     74  f442		       02		      .byte.b	%00000010	;|  X
     75  f443		       02		      .byte.b	%00000010	;|  X
     76  f444		       02		      .byte.b	%00000010	;|  X
     77  f445		       02		      .byte.b	%00000010	;|  X
     78  f446		       0e		      .byte.b	%00001110	;|XXX
     79  f447		       0e		      .byte.b	%00001110	;|XXX
     80  f448		       0e		      .byte.b	%00001110	;|XXX
     81  f449		       0a		      .byte.b	%00001010	;|X X
     82  f44a		       0a		      .byte.b	%00001010	;|X X
     83  f44b		       0a		      .byte.b	%00001010	;|X X
     84  f44c		       0a		      .byte.b	%00001010	;|X X
     85  f44d		       0a		      .byte.b	%00001010	;|X X
     86  f44e		       00		      .byte.b	%00000000	;|
     87  f44f		       00		      .byte.b	%00000000	;|
     88  f450							; 5
     89  f450		       00		      .byte.b	%00000000	;|
     90  f451		       00		      .byte.b	%00000000	;|
     91  f452		       04		      .byte.b	%00000100	;| X
     92  f453		       0e		      .byte.b	%00001110	;|XXX
     93  f454		       0a		      .byte.b	%00001010	;|X X
     94  f455		       02		      .byte.b	%00000010	;|  X
     95  f456		       02		      .byte.b	%00000010	;|  X
     96  f457		       06		      .byte.b	%00000110	;| XX
     97  f458		       0c		      .byte.b	%00001100	;|XX
     98  f459		       0c		      .byte.b	%00001100	;|XX
     99  f45a		       08		      .byte.b	%00001000	;|X
    100  f45b		       08		      .byte.b	%00001000	;|X
    101  f45c		       0e		      .byte.b	%00001110	;|XXX
    102  f45d		       0e		      .byte.b	%00001110	;|XXX
    103  f45e		       00		      .byte.b	%00000000	;|
    104  f45f		       00		      .byte.b	%00000000	;|
    105  f460							; 6
    106  f460		       00		      .byte.b	%00000000	;|
    107  f461		       00		      .byte.b	%00000000	;|
    108  f462		       04		      .byte.b	%00000100	;| X
    109  f463		       04		      .byte.b	%00000100	;| X
    110  f464		       0e		      .byte.b	%00001110	;|XXX
    111  f465		       0a		      .byte.b	%00001010	;|X X
    112  f466		       0a		      .byte.b	%00001010	;|X X
    113  f467		       0e		      .byte.b	%00001110	;|XXX
    114  f468		       0c		      .byte.b	%00001100	;|XX
    115  f469		       08		      .byte.b	%00001000	;|X
    116  f46a		       08		      .byte.b	%00001000	;|X
    117  f46b		       08		      .byte.b	%00001000	;|X
    118  f46c		       0e		      .byte.b	%00001110	;|XXX
    119  f46d		       06		      .byte.b	%00000110	;| XX
    120  f46e		       00		      .byte.b	%00000000	;|
    121  f46f		       00		      .byte.b	%00000000	;|
    122  f470							; 7
    123  f470		       00		      .byte.b	%00000000	;|
    124  f471		       00		      .byte.b	%00000000	;|
    125  f472		       08		      .byte.b	%00001000	;|X
    126  f473		       08		      .byte.b	%00001000	;|X
    127  f474		       08		      .byte.b	%00001000	;|X
    128  f475		       04		      .byte.b	%00000100	;| X
    129  f476		       04		      .byte.b	%00000100	;| X
    130  f477		       04		      .byte.b	%00000100	;| X
    131  f478		       06		      .byte.b	%00000110	;| XX
    132  f479		       02		      .byte.b	%00000010	;|  X
    133  f47a		       02		      .byte.b	%00000010	;|  X
    134  f47b		       0a		      .byte.b	%00001010	;|X X
    135  f47c		       0e		      .byte.b	%00001110	;|XXX
    136  f47d		       0e		      .byte.b	%00001110	;|XXX
    137  f47e		       00		      .byte.b	%00000000	;|
    138  f47f		       00		      .byte.b	%00000000	;|
    139  f480							; 8
    140  f480		       00		      .byte.b	%00000000	;|
    141  f481		       00		      .byte.b	%00000000	;|
    142  f482		       04		      .byte.b	%00000100	;| X
    143  f483		       0e		      .byte.b	%00001110	;|XXX
    144  f484		       0a		      .byte.b	%00001010	;|X X
    145  f485		       0a		      .byte.b	%00001010	;|X X
    146  f486		       0a		      .byte.b	%00001010	;|X X
    147  f487		       04		      .byte.b	%00000100	;| X
    148  f488		       04		      .byte.b	%00000100	;| X
    149  f489		       0a		      .byte.b	%00001010	;|X X
    150  f48a		       0a		      .byte.b	%00001010	;|X X
    151  f48b		       0a		      .byte.b	%00001010	;|X X
    152  f48c		       0e		      .byte.b	%00001110	;|XXX
    153  f48d		       04		      .byte.b	%00000100	;| X
    154  f48e		       00		      .byte.b	%00000000	;|
    155  f48f		       00		      .byte.b	%00000000	;|
    156  f490							; 9
    157  f490		       00		      .byte.b	%00000000	;|
    158  f491		       00		      .byte.b	%00000000	;|
    159  f492		       0c		      .byte.b	%00001100	;|XX
    160  f493		       0e		      .byte.b	%00001110	;|XXX
    161  f494		       02		      .byte.b	%00000010	;|  X
    162  f495		       02		      .byte.b	%00000010	;|  X
    163  f496		       06		      .byte.b	%00000110	;| XX
    164  f497		       0e		      .byte.b	%00001110	;|XXX
    165  f498		       0a		      .byte.b	%00001010	;|X X
    166  f499		       0a		      .byte.b	%00001010	;|X X
    167  f49a		       0a		      .byte.b	%00001010	;|X X
    168  f49b		       0e		      .byte.b	%00001110	;|XXX
    169  f49c		       0c		      .byte.b	%00001100	;|XX
    170  f49d		       04		      .byte.b	%00000100	;| X
    171  f49e		       00		      .byte.b	%00000000	;|
    172  f49f		       00		      .byte.b	%00000000	;|
    173  f4a0							; blank
    174  f4a0		       00		      .byte.b	%00000000	;|
    175  f4a1		       00		      .byte.b	%00000000	;|
    176  f4a2		       00		      .byte.b	%00000000	;|
    177  f4a3		       00		      .byte.b	%00000000	;|
    178  f4a4		       00		      .byte.b	%00000000	;|
    179  f4a5		       00		      .byte.b	%00000000	;|
    180  f4a6		       00		      .byte.b	%00000000	;|
    181  f4a7		       00		      .byte.b	%00000000	;|
    182  f4a8		       00		      .byte.b	%00000000	;|
    183  f4a9		       00		      .byte.b	%00000000	;|
    184  f4aa		       00		      .byte.b	%00000000	;|
    185  f4ab		       00		      .byte.b	%00000000	;|
    186  f4ac		       00		      .byte.b	%00000000	;|
    187  f4ad		       00		      .byte.b	%00000000	;|
    188  f4ae		       00		      .byte.b	%00000000	;|
    189  f4af		       00		      .byte.b	%00000000	;|
    190  f4b0							; decimal
    191  f4b0		       00		      .byte.b	%00000000	;|
    192  f4b1		       00		      .byte.b	%00000000	;|
    193  f4b2		       04		      .byte.b	%00000100	;| X
    194  f4b3		       04		      .byte.b	%00000100	;| X
    195  f4b4		       04		      .byte.b	%00000100	;| X
    196  f4b5		       00		      .byte.b	%00000000	;|
    197  f4b6		       00		      .byte.b	%00000000	;|
    198  f4b7		       00		      .byte.b	%00000000	;|
    199  f4b8		       00		      .byte.b	%00000000	;|
    200  f4b9		       00		      .byte.b	%00000000	;|
    201  f4ba		       00		      .byte.b	%00000000	;|
    202  f4bb		       00		      .byte.b	%00000000	;|
    203  f4bc		       00		      .byte.b	%00000000	;|
    204  f4bd		       00		      .byte.b	%00000000	;|
    205  f4be		       00		      .byte.b	%00000000	;|
    206  f4bf		       00		      .byte.b	%00000000	;|
    207  f4c0							; star
    208  f4c0		       00		      .byte.b	%00000000	;|
    209  f4c1		       00		      .byte.b	%00000000	;|
    210  f4c2		       0a		      .byte.b	%00001010	;|x x
    211  f4c3		       0a		      .byte.b	%00001010	;|x x
    212  f4c4		       0a		      .byte.b	%00001010	;|x x
    213  f4c5		       04		      .byte.b	%00000100	;| x
    214  f4c6		       04		      .byte.b	%00000100	;| x
    215  f4c7		       0e		      .byte.b	%00001110	;|xxx
    216  f4c8		       0e		      .byte.b	%00001110	;|xxx
    217  f4c9		       04		      .byte.b	%00000100	;| x
    218  f4ca		       0a		      .byte.b	%00001010	;| x
    219  f4cb		       0a		      .byte.b	%00001010	;|x x
    220  f4cc		       0a		      .byte.b	%00001010	;|x x
    221  f4cd		       00		      .byte.b	%00000000	;|x x
    222  f4ce		       00		      .byte.b	%00000000	;|
    223  f4cf		       00		      .byte.b	%00000000	;|
------- FILE cart.asm
------- FILE digitTableLeft.h LEVEL 2 PASS 2
      0  f4d0					      include	"digitTableLeft.h"
      1  f500		       00 00 00 00*	      align	256
      2  f500				   digitTableLeft
      3  f500							; 0
      4  f500		       00		      .byte.b	%00000000	;|
      5  f501		       00		      .byte.b	%00000000	;|
      6  f502		       40		      .byte.b	%01000000	;| X
      7  f503		       40		      .byte.b	%01000000	;| X
      8  f504		       e0		      .byte.b	%11100000	;|XXX
      9  f505		       a0		      .byte.b	%10100000	;|X X
     10  f506		       a0		      .byte.b	%10100000	;|X X
     11  f507		       a0		      .byte.b	%10100000	;|X X
     12  f508		       a0		      .byte.b	%10100000	;|X X
     13  f509		       a0		      .byte.b	%10100000	;|X X
     14  f50a		       a0		      .byte.b	%10100000	;|X X
     15  f50b		       e0		      .byte.b	%11100000	;|XXX
     16  f50c		       40		      .byte.b	%01000000	;| X
     17  f50d		       40		      .byte.b	%01000000	;| X
     18  f50e		       00		      .byte.b	%00000000	;|
     19  f50f		       00		      .byte.b	%00000000	;|
     20  f510							; 1
     21  f510		       00		      .byte.b	%00000000	;|
     22  f511		       00		      .byte.b	%00000000	;|
     23  f512		       e0		      .byte.b	%11100000	;|XXX
     24  f513		       e0		      .byte.b	%11100000	;|XXX
     25  f514		       e0		      .byte.b	%11100000	;|XXX
     26  f515		       40		      .byte.b	%01000000	;| X
     27  f516		       40		      .byte.b	%01000000	;| X
     28  f517		       40		      .byte.b	%01000000	;| X
     29  f518		       40		      .byte.b	%01000000	;| X
     30  f519		       40		      .byte.b	%01000000	;| X
     31  f51a		       40		      .byte.b	%01000000	;| X
     32  f51b		       c0		      .byte.b	%11000000	;|XX
     33  f51c		       c0		      .byte.b	%11000000	;|XX
     34  f51d		       40		      .byte.b	%01000000	;| X
     35  f51e		       00		      .byte.b	%00000000	;|
     36  f51f		       00		      .byte.b	%00000000	;|
     37  f520							; 2
     38  f520		       00		      .byte.b	%00000000	;|
     39  f521		       00		      .byte.b	%00000000	;|
     40  f522		       e0		      .byte.b	%11100000	;|XXX
     41  f523		       e0		      .byte.b	%11100000	;|XXX
     42  f524		       80		      .byte.b	%10000000	;|X
     43  f525		       80		      .byte.b	%10000000	;|X
     44  f526		       c0		      .byte.b	%11000000	;|XX
     45  f527		       60		      .byte.b	%01100000	;| XX
     46  f528		       60		      .byte.b	%01100000	;| XX
     47  f529		       20		      .byte.b	%00100000	;|  X
     48  f52a		       a0		      .byte.b	%10100000	;|X X
     49  f52b		       e0		      .byte.b	%11100000	;|XXX
     50  f52c		       e0		      .byte.b	%11100000	;|XXX
     51  f52d		       40		      .byte.b	%01000000	;| X
     52  f52e		       00		      .byte.b	%00000000	;|
     53  f52f		       00		      .byte.b	%00000000	;|
     54  f530							; 3
     55  f530		       00		      .byte.b	%00000000	;|
     56  f531		       00		      .byte.b	%00000000	;|
     57  f532		       40		      .byte.b	%01000000	;| X
     58  f533		       40		      .byte.b	%01000000	;| X
     59  f534		       e0		      .byte.b	%11100000	;|XXX
     60  f535		       a0		      .byte.b	%10100000	;|X X
     61  f536		       20		      .byte.b	%00100000	;|  X
     62  f537		       40		      .byte.b	%01000000	;| X
     63  f538		       60		      .byte.b	%01100000	;| XX
     64  f539		       20		      .byte.b	%00100000	;|  X
     65  f53a		       a0		      .byte.b	%10100000	;|X X
     66  f53b		       e0		      .byte.b	%11100000	;|XXX
     67  f53c		       40		      .byte.b	%01000000	;| X
     68  f53d		       40		      .byte.b	%01000000	;| X
     69  f53e		       00		      .byte.b	%00000000	;|
     70  f53f		       00		      .byte.b	%00000000	;|
     71  f540							; 4
     72  f540		       00		      .byte.b	%00000000	;|
     73  f541		       00		      .byte.b	%00000000	;|
     74  f542		       20		      .byte.b	%00100000	;|  X
     75  f543		       20		      .byte.b	%00100000	;|  X
     76  f544		       20		      .byte.b	%00100000	;|  X
     77  f545		       20		      .byte.b	%00100000	;|  X
     78  f546		       e0		      .byte.b	%11100000	;|XXX
     79  f547		       e0		      .byte.b	%11100000	;|XXX
     80  f548		       e0		      .byte.b	%11100000	;|XXX
     81  f549		       a0		      .byte.b	%10100000	;|X X
     82  f54a		       a0		      .byte.b	%10100000	;|X X
     83  f54b		       a0		      .byte.b	%10100000	;|X X
     84  f54c		       a0		      .byte.b	%10100000	;|X X
     85  f54d		       a0		      .byte.b	%10100000	;|X X
     86  f54e		       00		      .byte.b	%00000000	;|
     87  f54f		       00		      .byte.b	%00000000	;|
     88  f550							; 5
     89  f550		       00		      .byte.b	%00000000	;|
     90  f551		       00		      .byte.b	%00000000	;|
     91  f552		       40		      .byte.b	%01000000	;| X
     92  f553		       e0		      .byte.b	%11100000	;|XXX
     93  f554		       a0		      .byte.b	%10100000	;|X X
     94  f555		       20		      .byte.b	%00100000	;|  X
     95  f556		       20		      .byte.b	%00100000	;|  X
     96  f557		       60		      .byte.b	%01100000	;| XX
     97  f558		       c0		      .byte.b	%11000000	;|XX
     98  f559		       c0		      .byte.b	%11000000	;|XX
     99  f55a		       80		      .byte.b	%10000000	;|X
    100  f55b		       80		      .byte.b	%10000000	;|X
    101  f55c		       e0		      .byte.b	%11100000	;|XXX
    102  f55d		       e0		      .byte.b	%11100000	;|XXX
    103  f55e		       00		      .byte.b	%00000000	;|
    104  f55f		       00		      .byte.b	%00000000	;|
    105  f560							; 6
    106  f560		       00		      .byte.b	%00000000	;|
    107  f561		       00		      .byte.b	%00000000	;|
    108  f562		       40		      .byte.b	%01000000	;| X
    109  f563		       40		      .byte.b	%01000000	;| X
    110  f564		       e0		      .byte.b	%11100000	;|XXX
    111  f565		       a0		      .byte.b	%10100000	;|X X
    112  f566		       a0		      .byte.b	%10100000	;|X X
    113  f567		       e0		      .byte.b	%11100000	;|XXX
    114  f568		       c0		      .byte.b	%11000000	;|XX
    115  f569		       80		      .byte.b	%10000000	;|X
    116  f56a		       80		      .byte.b	%10000000	;|X
    117  f56b		       80		      .byte.b	%10000000	;|X
    118  f56c		       e0		      .byte.b	%11100000	;|XXX
    119  f56d		       60		      .byte.b	%01100000	;| XX
    120  f56e		       00		      .byte.b	%00000000	;|
    121  f56f		       00		      .byte.b	%00000000	;|
    122  f570							; 7
    123  f570		       00		      .byte.b	%00000000	;|
    124  f571		       00		      .byte.b	%00000000	;|
    125  f572		       80		      .byte.b	%10000000	;|X
    126  f573		       80		      .byte.b	%10000000	;|X
    127  f574		       80		      .byte.b	%10000000	;|X
    128  f575		       40		      .byte.b	%01000000	;| X
    129  f576		       40		      .byte.b	%01000000	;| X
    130  f577		       40		      .byte.b	%01000000	;| X
    131  f578		       60		      .byte.b	%01100000	;| XX
    132  f579		       20		      .byte.b	%00100000	;|  X
    133  f57a		       20		      .byte.b	%00100000	;|  X
    134  f57b		       a0		      .byte.b	%10100000	;|X X
    135  f57c		       e0		      .byte.b	%11100000	;|XXX
    136  f57d		       e0		      .byte.b	%11100000	;|XXX
    137  f57e		       00		      .byte.b	%00000000	;|
    138  f57f		       00		      .byte.b	%00000000	;|
    139  f580							; 8
    140  f580		       00		      .byte.b	%00000000	;|
    141  f581		       00		      .byte.b	%00000000	;|
    142  f582		       40		      .byte.b	%01000000	;| X
    143  f583		       e0		      .byte.b	%11100000	;|XXX
    144  f584		       a0		      .byte.b	%10100000	;|X X
    145  f585		       a0		      .byte.b	%10100000	;|X X
    146  f586		       a0		      .byte.b	%10100000	;|X X
    147  f587		       40		      .byte.b	%01000000	;| X
    148  f588		       40		      .byte.b	%01000000	;| X
    149  f589		       a0		      .byte.b	%10100000	;|X X
    150  f58a		       a0		      .byte.b	%10100000	;|X X
    151  f58b		       a0		      .byte.b	%10100000	;|X X
    152  f58c		       e0		      .byte.b	%11100000	;|XXX
    153  f58d		       40		      .byte.b	%01000000	;| X
    154  f58e		       00		      .byte.b	%00000000	;|
    155  f58f		       00		      .byte.b	%00000000	;|
    156  f590							; 9
    157  f590		       00		      .byte.b	%00000000	;|
    158  f591		       00		      .byte.b	%00000000	;|
    159  f592		       c0		      .byte.b	%11000000	;|XX
    160  f593		       e0		      .byte.b	%11100000	;|XXX
    161  f594		       20		      .byte.b	%00100000	;|  X
    162  f595		       20		      .byte.b	%00100000	;|  X
    163  f596		       60		      .byte.b	%01100000	;| XX
    164  f597		       e0		      .byte.b	%11100000	;|XXX
    165  f598		       a0		      .byte.b	%10100000	;|X X
    166  f599		       a0		      .byte.b	%10100000	;|X X
    167  f59a		       a0		      .byte.b	%10100000	;|X X
    168  f59b		       e0		      .byte.b	%11100000	;|XXX
    169  f59c		       c0		      .byte.b	%11000000	;|XX
    170  f59d		       40		      .byte.b	%01000000	;| X
    171  f59e		       00		      .byte.b	%00000000	;|
    172  f59f		       00		      .byte.b	%00000000	;|
    173  f5a0							; blank
    174  f5a0		       00		      .byte.b	%00000000	;|
    175  f5a1		       00		      .byte.b	%00000000	;|
    176  f5a2		       00		      .byte.b	%00000000	;|
    177  f5a3		       00		      .byte.b	%00000000	;|
    178  f5a4		       00		      .byte.b	%00000000	;|
    179  f5a5		       00		      .byte.b	%00000000	;|
    180  f5a6		       00		      .byte.b	%00000000	;|
    181  f5a7		       00		      .byte.b	%00000000	;|
    182  f5a8		       00		      .byte.b	%00000000	;|
    183  f5a9		       00		      .byte.b	%00000000	;|
    184  f5aa		       00		      .byte.b	%00000000	;|
    185  f5ab		       00		      .byte.b	%00000000	;|
    186  f5ac		       00		      .byte.b	%00000000	;|
    187  f5ad		       00		      .byte.b	%00000000	;|
    188  f5ae		       00		      .byte.b	%00000000	;|
    189  f5af		       00		      .byte.b	%00000000	;|
    190  f5b0							; decimal
    191  f5b0		       00		      .byte.b	%00000000	;|
    192  f5b1		       00		      .byte.b	%00000000	;|
    193  f5b2		       40		      .byte.b	%01000000	;| X
    194  f5b3		       40		      .byte.b	%01000000	;| X
    195  f5b4		       40		      .byte.b	%01000000	;| X
    196  f5b5		       00		      .byte.b	%00000000	;|
    197  f5b6		       00		      .byte.b	%00000000	;|
    198  f5b7		       00		      .byte.b	%00000000	;|
    199  f5b8		       00		      .byte.b	%00000000	;|
    200  f5b9		       00		      .byte.b	%00000000	;|
    201  f5ba		       00		      .byte.b	%00000000	;|
    202  f5bb		       00		      .byte.b	%00000000	;|
    203  f5bc		       00		      .byte.b	%00000000	;|
    204  f5bd		       00		      .byte.b	%00000000	;|
    205  f5be		       00		      .byte.b	%00000000	;|
    206  f5bf		       00		      .byte.b	%00000000	;|
    207  f5c0							; star
    208  f5c0		       00		      .byte.b	%00000000	;|
    209  f5c1		       00		      .byte.b	%00000000	;|
    210  f5c2		       a0		      .byte.b	%10100000	;|x x
    211  f5c3		       a0		      .byte.b	%10100000	;|x x
    212  f5c4		       a0		      .byte.b	%10100000	;|x x
    213  f5c5		       40		      .byte.b	%01000000	;| x
    214  f5c6		       40		      .byte.b	%01000000	;| x
    215  f5c7		       e0		      .byte.b	%11100000	;|xxx
    216  f5c8		       e0		      .byte.b	%11100000	;|xxx
    217  f5c9		       40		      .byte.b	%01000000	;| x
    218  f5ca		       40		      .byte.b	%01000000	;| x
    219  f5cb		       a0		      .byte.b	%10100000	;|x x
    220  f5cc		       a0		      .byte.b	%10100000	;|x x
    221  f5cd		       a0		      .byte.b	%10100000	;|x x
    222  f5ce		       00		      .byte.b	%00000000	;|
    223  f5cf		       00		      .byte.b	%00000000	;|
------- FILE cart.asm
------- FILE digitTableRightRev.h LEVEL 2 PASS 2
      0  f5d0					      include	"digitTableRightRev.h"
      1  f600		       00 00 00 00*	      align	256
      2  f600				   digitTableRightRev
      3  f600							; 0
      4  f600		       00		      .byte.b	%00000000	;|
      5  f601		       00		      .byte.b	%00000000	;|
      6  f602		       02		      .byte.b	%00000010	;| X
      7  f603		       02		      .byte.b	%00000010	;| X
      8  f604		       07		      .byte.b	%00000111	;|XXX
      9  f605		       05		      .byte.b	%00000101	;|X X
     10  f606		       05		      .byte.b	%00000101	;|X X
     11  f607		       05		      .byte.b	%00000101	;|X X
     12  f608		       05		      .byte.b	%00000101	;|X X
     13  f609		       05		      .byte.b	%00000101	;|X X
     14  f60a		       05		      .byte.b	%00000101	;|X X
     15  f60b		       07		      .byte.b	%00000111	;|XXX
     16  f60c		       02		      .byte.b	%00000010	;| X
     17  f60d		       02		      .byte.b	%00000010	;| X
     18  f60e		       00		      .byte.b	%00000000	;|
     19  f60f		       00		      .byte.b	%00000000	;|
     20  f610							; 1
     21  f610		       00		      .byte.b	%00000000	;|
     22  f611		       00		      .byte.b	%00000000	;|
     23  f612		       07		      .byte.b	%00000111	;|XXX
     24  f613		       07		      .byte.b	%00000111	;|XXX
     25  f614		       07		      .byte.b	%00000111	;|XXX
     26  f615		       02		      .byte.b	%00000010	;| X
     27  f616		       02		      .byte.b	%00000010	;| X
     28  f617		       02		      .byte.b	%00000010	;| X
     29  f618		       02		      .byte.b	%00000010	;| X
     30  f619		       02		      .byte.b	%00000010	;| X
     31  f61a		       02		      .byte.b	%00000010	;| X
     32  f61b		       03		      .byte.b	%00000011	;|XX
     33  f61c		       03		      .byte.b	%00000011	;|XX
     34  f61d		       02		      .byte.b	%00000010	;| X
     35  f61e		       00		      .byte.b	%00000000	;|
     36  f61f		       00		      .byte.b	%00000000	;|
     37  f620							; 2
     38  f620		       00		      .byte.b	%00000000	;|
     39  f621		       00		      .byte.b	%00000000	;|
     40  f622		       07		      .byte.b	%00000111	;|XXX
     41  f623		       07		      .byte.b	%00000111	;|XXX
     42  f624		       01		      .byte.b	%00000001	;|X
     43  f625		       01		      .byte.b	%00000001	;|X
     44  f626		       03		      .byte.b	%00000011	;|XX
     45  f627		       06		      .byte.b	%00000110	;| XX
     46  f628		       06		      .byte.b	%00000110	;| XX
     47  f629		       04		      .byte.b	%00000100	;|  X
     48  f62a		       05		      .byte.b	%00000101	;|X X
     49  f62b		       07		      .byte.b	%00000111	;|XXX
     50  f62c		       07		      .byte.b	%00000111	;|XXX
     51  f62d		       02		      .byte.b	%00000010	;| X
     52  f62e		       00		      .byte.b	%00000000	;|
     53  f62f		       00		      .byte.b	%00000000	;|
     54  f630							; 3
     55  f630		       00		      .byte.b	%00000000	;|
     56  f631		       00		      .byte.b	%00000000	;|
     57  f632		       02		      .byte.b	%00000010	;| X
     58  f633		       02		      .byte.b	%00000010	;| X
     59  f634		       07		      .byte.b	%00000111	;|XXX
     60  f635		       05		      .byte.b	%00000101	;|X X
     61  f636		       04		      .byte.b	%00000100	;|  X
     62  f637		       02		      .byte.b	%00000010	;| X
     63  f638		       06		      .byte.b	%00000110	;| XX
     64  f639		       04		      .byte.b	%00000100	;|  X
     65  f63a		       05		      .byte.b	%00000101	;|X X
     66  f63b		       07		      .byte.b	%00000111	;|XXX
     67  f63c		       02		      .byte.b	%00000010	;| X
     68  f63d		       02		      .byte.b	%00000010	;| X
     69  f63e		       00		      .byte.b	%00000000	;|
     70  f63f		       00		      .byte.b	%00000000	;|
     71  f640							; 4
     72  f640		       00		      .byte.b	%00000000	;|
     73  f641		       00		      .byte.b	%00000000	;|
     74  f642		       04		      .byte.b	%00000100	;|  X
     75  f643		       04		      .byte.b	%00000100	;|  X
     76  f644		       04		      .byte.b	%00000100	;|  X
     77  f645		       04		      .byte.b	%00000100	;|  X
     78  f646		       07		      .byte.b	%00000111	;|XXX
     79  f647		       07		      .byte.b	%00000111	;|XXX
     80  f648		       07		      .byte.b	%00000111	;|XXX
     81  f649		       05		      .byte.b	%00000101	;|X X
     82  f64a		       05		      .byte.b	%00000101	;|X X
     83  f64b		       05		      .byte.b	%00000101	;|X X
     84  f64c		       05		      .byte.b	%00000101	;|X X
     85  f64d		       05		      .byte.b	%00000101	;|X X
     86  f64e		       00		      .byte.b	%00000000	;|
     87  f64f		       00		      .byte.b	%00000000	;|
     88  f650							; 5
     89  f650		       00		      .byte.b	%00000000	;|
     90  f651		       00		      .byte.b	%00000000	;|
     91  f652		       02		      .byte.b	%00000010	;| X
     92  f653		       07		      .byte.b	%00000111	;|XXX
     93  f654		       05		      .byte.b	%00000101	;|X X
     94  f655		       04		      .byte.b	%00000100	;|  X
     95  f656		       04		      .byte.b	%00000100	;|  X
     96  f657		       06		      .byte.b	%00000110	;| XX
     97  f658		       03		      .byte.b	%00000011	;|XX
     98  f659		       03		      .byte.b	%00000011	;|XX
     99  f65a		       01		      .byte.b	%00000001	;|X
    100  f65b		       01		      .byte.b	%00000001	;|X
    101  f65c		       07		      .byte.b	%00000111	;|XXX
    102  f65d		       07		      .byte.b	%00000111	;|XXX
    103  f65e		       00		      .byte.b	%00000000	;|
    104  f65f		       00		      .byte.b	%00000000	;|
    105  f660							; 6
    106  f660		       00		      .byte.b	%00000000	;|
    107  f661		       00		      .byte.b	%00000000	;|
    108  f662		       02		      .byte.b	%00000010	;| X
    109  f663		       02		      .byte.b	%00000010	;| X
    110  f664		       07		      .byte.b	%00000111	;|XXX
    111  f665		       05		      .byte.b	%00000101	;|X X
    112  f666		       05		      .byte.b	%00000101	;|X X
    113  f667		       07		      .byte.b	%00000111	;|XXX
    114  f668		       03		      .byte.b	%00000011	;|XX
    115  f669		       01		      .byte.b	%00000001	;|X
    116  f66a		       01		      .byte.b	%00000001	;|X
    117  f66b		       01		      .byte.b	%00000001	;|X
    118  f66c		       07		      .byte.b	%00000111	;|XXX
    119  f66d		       06		      .byte.b	%00000110	;| XX
    120  f66e		       00		      .byte.b	%00000000	;|
    121  f66f		       00		      .byte.b	%00000000	;|
    122  f670							; 7
    123  f670		       00		      .byte.b	%00000000	;|
    124  f671		       00		      .byte.b	%00000000	;|
    125  f672		       01		      .byte.b	%00000001	;|X
    126  f673		       01		      .byte.b	%00000001	;|X
    127  f674		       01		      .byte.b	%00000001	;|X
    128  f675		       02		      .byte.b	%00000010	;| X
    129  f676		       02		      .byte.b	%00000010	;| X
    130  f677		       02		      .byte.b	%00000010	;| X
    131  f678		       06		      .byte.b	%00000110	;| XX
    132  f679		       04		      .byte.b	%00000100	;|  X
    133  f67a		       04		      .byte.b	%00000100	;|  X
    134  f67b		       05		      .byte.b	%00000101	;|X X
    135  f67c		       07		      .byte.b	%00000111	;|XXX
    136  f67d		       07		      .byte.b	%00000111	;|XXX
    137  f67e		       00		      .byte.b	%00000000	;|
    138  f67f		       00		      .byte.b	%00000000	;|
    139  f680							; 8
    140  f680		       00		      .byte.b	%00000000	;|
    141  f681		       00		      .byte.b	%00000000	;|
    142  f682		       02		      .byte.b	%00000010	;| X
    143  f683		       07		      .byte.b	%00000111	;|XXX
    144  f684		       05		      .byte.b	%00000101	;|X X
    145  f685		       05		      .byte.b	%00000101	;|X X
    146  f686		       05		      .byte.b	%00000101	;|X X
    147  f687		       02		      .byte.b	%00000010	;| X
    148  f688		       02		      .byte.b	%00000010	;| X
    149  f689		       05		      .byte.b	%00000101	;|X X
    150  f68a		       05		      .byte.b	%00000101	;|X X
    151  f68b		       05		      .byte.b	%00000101	;|X X
    152  f68c		       07		      .byte.b	%00000111	;|XXX
    153  f68d		       02		      .byte.b	%00000010	;| X
    154  f68e		       00		      .byte.b	%00000000	;|
    155  f68f		       00		      .byte.b	%00000000	;|
    156  f690							; 9
    157  f690		       00		      .byte.b	%00000000	;|
    158  f691		       00		      .byte.b	%00000000	;|
    159  f692		       03		      .byte.b	%00000011	;|XX
    160  f693		       07		      .byte.b	%00000111	;|XXX
    161  f694		       04		      .byte.b	%00000100	;|  X
    162  f695		       04		      .byte.b	%00000100	;|  X
    163  f696		       06		      .byte.b	%00000110	;| XX
    164  f697		       07		      .byte.b	%00000111	;|XXX
    165  f698		       05		      .byte.b	%00000101	;|X X
    166  f699		       05		      .byte.b	%00000101	;|X X
    167  f69a		       05		      .byte.b	%00000101	;|X X
    168  f69b		       07		      .byte.b	%00000111	;|XXX
    169  f69c		       03		      .byte.b	%00000011	;|XX
    170  f69d		       02		      .byte.b	%00000010	;| X
    171  f69e		       00		      .byte.b	%00000000	;|
    172  f69f		       00		      .byte.b	%00000000	;|
    173  f6a0							; blank
    174  f6a0		       00		      .byte.b	%00000000	;|
    175  f6a1		       00		      .byte.b	%00000000	;|
    176  f6a2		       00		      .byte.b	%00000000	;|
    177  f6a3		       00		      .byte.b	%00000000	;|
    178  f6a4		       00		      .byte.b	%00000000	;|
    179  f6a5		       00		      .byte.b	%00000000	;|
    180  f6a6		       00		      .byte.b	%00000000	;|
    181  f6a7		       00		      .byte.b	%00000000	;|
    182  f6a8		       00		      .byte.b	%00000000	;|
    183  f6a9		       00		      .byte.b	%00000000	;|
    184  f6aa		       00		      .byte.b	%00000000	;|
    185  f6ab		       00		      .byte.b	%00000000	;|
    186  f6ac		       00		      .byte.b	%00000000	;|
    187  f6ad		       00		      .byte.b	%00000000	;|
    188  f6ae		       00		      .byte.b	%00000000	;|
    189  f6af		       00		      .byte.b	%00000000	;|
    190  f6b0							; decimal
    191  f6b0		       00		      .byte.b	%00000000	;|
    192  f6b1		       00		      .byte.b	%00000000	;|
    193  f6b2		       02		      .byte.b	%00000010	;| X
    194  f6b3		       02		      .byte.b	%00000010	;| X
    195  f6b4		       02		      .byte.b	%00000010	;| X
    196  f6b5		       00		      .byte.b	%00000000	;|
    197  f6b6		       00		      .byte.b	%00000000	;|
    198  f6b7		       00		      .byte.b	%00000000	;|
    199  f6b8		       00		      .byte.b	%00000000	;|
    200  f6b9		       00		      .byte.b	%00000000	;|
    201  f6ba		       00		      .byte.b	%00000000	;|
    202  f6bb		       00		      .byte.b	%00000000	;|
    203  f6bc		       00		      .byte.b	%00000000	;|
    204  f6bd		       00		      .byte.b	%00000000	;|
    205  f6be		       00		      .byte.b	%00000000	;|
    206  f6bf		       00		      .byte.b	%00000000	;|
    207  f6c0							; star
    208  f6c0		       00		      .byte.b	%00000000	;|
    209  f6c1		       00		      .byte.b	%00000000	;|
    210  f6c2		       05		      .byte.b	%00000101	;|x x
    211  f6c3		       05		      .byte.b	%00000101	;|x x
    212  f6c4		       05		      .byte.b	%00000101	;|x x
    213  f6c5		       02		      .byte.b	%00000010	;| x
    214  f6c6		       02		      .byte.b	%00000010	;| x
    215  f6c7		       07		      .byte.b	%00000111	;|xxx
    216  f6c8		       07		      .byte.b	%00000111	;|xxx
    217  f6c9		       02		      .byte.b	%00000010	;| x
    218  f6ca		       05		      .byte.b	%00000101	;| x
    219  f6cb		       05		      .byte.b	%00000101	;|x x
    220  f6cc		       05		      .byte.b	%00000101	;|x x
    221  f6cd		       00		      .byte.b	%00000000	;|x x
    222  f6ce		       00		      .byte.b	%00000000	;|
    223  f6cf		       00		      .byte.b	%00000000	;|
------- FILE cart.asm
------- FILE digitTableLeftRev.h LEVEL 2 PASS 2
      0  f6d0					      include	"digitTableLeftRev.h"
      1  f700		       00 00 00 00*	      align	256
      2  f700				   digitTableLeftRev
      3  f700							; 0
      4  f700		       00		      .byte.b	%00000000	;|
      5  f701		       00		      .byte.b	%00000000	;|
      6  f702		       20		      .byte.b	%00100000	;| X
      7  f703		       20		      .byte.b	%00100000	;| X
      8  f704		       70		      .byte.b	%01110000	;|XXX
      9  f705		       50		      .byte.b	%01010000	;|X X
     10  f706		       50		      .byte.b	%01010000	;|X X
     11  f707		       50		      .byte.b	%01010000	;|X X
     12  f708		       50		      .byte.b	%01010000	;|X X
     13  f709		       50		      .byte.b	%01010000	;|X X
     14  f70a		       50		      .byte.b	%01010000	;|X X
     15  f70b		       70		      .byte.b	%01110000	;|XXX
     16  f70c		       20		      .byte.b	%00100000	;| X
     17  f70d		       20		      .byte.b	%00100000	;| X
     18  f70e		       00		      .byte.b	%00000000	;|
     19  f70f		       00		      .byte.b	%00000000	;|
     20  f710							; 1
     21  f710		       00		      .byte.b	%00000000	;|
     22  f711		       00		      .byte.b	%00000000	;|
     23  f712		       70		      .byte.b	%01110000	;|XXX
     24  f713		       70		      .byte.b	%01110000	;|XXX
     25  f714		       70		      .byte.b	%01110000	;|XXX
     26  f715		       20		      .byte.b	%00100000	;| X
     27  f716		       20		      .byte.b	%00100000	;| X
     28  f717		       20		      .byte.b	%00100000	;| X
     29  f718		       20		      .byte.b	%00100000	;| X
     30  f719		       20		      .byte.b	%00100000	;| X
     31  f71a		       20		      .byte.b	%00100000	;| X
     32  f71b		       30		      .byte.b	%00110000	;|XX
     33  f71c		       30		      .byte.b	%00110000	;|XX
     34  f71d		       20		      .byte.b	%00100000	;| X
     35  f71e		       00		      .byte.b	%00000000	;|
     36  f71f		       00		      .byte.b	%00000000	;|
     37  f720							; 2
     38  f720		       00		      .byte.b	%00000000	;|
     39  f721		       00		      .byte.b	%00000000	;|
     40  f722		       70		      .byte.b	%01110000	;|XXX
     41  f723		       70		      .byte.b	%01110000	;|XXX
     42  f724		       10		      .byte.b	%00010000	;|X
     43  f725		       10		      .byte.b	%00010000	;|X
     44  f726		       30		      .byte.b	%00110000	;|XX
     45  f727		       60		      .byte.b	%01100000	;| XX
     46  f728		       60		      .byte.b	%01100000	;| XX
     47  f729		       40		      .byte.b	%01000000	;|  X
     48  f72a		       50		      .byte.b	%01010000	;|X X
     49  f72b		       70		      .byte.b	%01110000	;|XXX
     50  f72c		       70		      .byte.b	%01110000	;|XXX
     51  f72d		       20		      .byte.b	%00100000	;| X
     52  f72e		       00		      .byte.b	%00000000	;|
     53  f72f		       00		      .byte.b	%00000000	;|
     54  f730							; 3
     55  f730		       00		      .byte.b	%00000000	;|
     56  f731		       00		      .byte.b	%00000000	;|
     57  f732		       20		      .byte.b	%00100000	;| X
     58  f733		       20		      .byte.b	%00100000	;| X
     59  f734		       70		      .byte.b	%01110000	;|XXX
     60  f735		       50		      .byte.b	%01010000	;|X X
     61  f736		       40		      .byte.b	%01000000	;|  X
     62  f737		       20		      .byte.b	%00100000	;| X
     63  f738		       60		      .byte.b	%01100000	;| XX
     64  f739		       40		      .byte.b	%01000000	;|  X
     65  f73a		       50		      .byte.b	%01010000	;|X X
     66  f73b		       70		      .byte.b	%01110000	;|XXX
     67  f73c		       20		      .byte.b	%00100000	;| X
     68  f73d		       20		      .byte.b	%00100000	;| X
     69  f73e		       00		      .byte.b	%00000000	;|
     70  f73f		       00		      .byte.b	%00000000	;|
     71  f740							; 4
     72  f740		       00		      .byte.b	%00000000	;|
     73  f741		       00		      .byte.b	%00000000	;|
     74  f742		       40		      .byte.b	%01000000	;|  X
     75  f743		       40		      .byte.b	%01000000	;|  X
     76  f744		       40		      .byte.b	%01000000	;|  X
     77  f745		       40		      .byte.b	%01000000	;|  X
     78  f746		       70		      .byte.b	%01110000	;|XXX
     79  f747		       70		      .byte.b	%01110000	;|XXX
     80  f748		       70		      .byte.b	%01110000	;|XXX
     81  f749		       50		      .byte.b	%01010000	;|X X
     82  f74a		       50		      .byte.b	%01010000	;|X X
     83  f74b		       50		      .byte.b	%01010000	;|X X
     84  f74c		       50		      .byte.b	%01010000	;|X X
     85  f74d		       50		      .byte.b	%01010000	;|X X
     86  f74e		       00		      .byte.b	%00000000	;|
     87  f74f		       00		      .byte.b	%00000000	;|
     88  f750							; 5
     89  f750		       00		      .byte.b	%00000000	;|
     90  f751		       00		      .byte.b	%00000000	;|
     91  f752		       20		      .byte.b	%00100000	;| X
     92  f753		       70		      .byte.b	%01110000	;|XXX
     93  f754		       50		      .byte.b	%01010000	;|X X
     94  f755		       40		      .byte.b	%01000000	;|  X
     95  f756		       40		      .byte.b	%01000000	;|  X
     96  f757		       60		      .byte.b	%01100000	;| XX
     97  f758		       30		      .byte.b	%00110000	;|XX
     98  f759		       30		      .byte.b	%00110000	;|XX
     99  f75a		       10		      .byte.b	%00010000	;|X
    100  f75b		       10		      .byte.b	%00010000	;|X
    101  f75c		       70		      .byte.b	%01110000	;|XXX
    102  f75d		       70		      .byte.b	%01110000	;|XXX
    103  f75e		       00		      .byte.b	%00000000	;|
    104  f75f		       00		      .byte.b	%00000000	;|
    105  f760							; 6
    106  f760		       00		      .byte.b	%00000000	;|
    107  f761		       00		      .byte.b	%00000000	;|
    108  f762		       20		      .byte.b	%00100000	;| X
    109  f763		       20		      .byte.b	%00100000	;| X
    110  f764		       70		      .byte.b	%01110000	;|XXX
    111  f765		       50		      .byte.b	%01010000	;|X X
    112  f766		       50		      .byte.b	%01010000	;|X X
    113  f767		       70		      .byte.b	%01110000	;|XXX
    114  f768		       30		      .byte.b	%00110000	;|XX
    115  f769		       10		      .byte.b	%00010000	;|X
    116  f76a		       10		      .byte.b	%00010000	;|X
    117  f76b		       10		      .byte.b	%00010000	;|X
    118  f76c		       70		      .byte.b	%01110000	;|XXX
    119  f76d		       60		      .byte.b	%01100000	;| XX
    120  f76e		       00		      .byte.b	%00000000	;|
    121  f76f		       00		      .byte.b	%00000000	;|
    122  f770							; 7
    123  f770		       00		      .byte.b	%00000000	;|
    124  f771		       00		      .byte.b	%00000000	;|
    125  f772		       10		      .byte.b	%00010000	;|X
    126  f773		       10		      .byte.b	%00010000	;|X
    127  f774		       10		      .byte.b	%00010000	;|X
    128  f775		       20		      .byte.b	%00100000	;| X
    129  f776		       20		      .byte.b	%00100000	;| X
    130  f777		       20		      .byte.b	%00100000	;| X
    131  f778		       60		      .byte.b	%01100000	;| XX
    132  f779		       40		      .byte.b	%01000000	;|  X
    133  f77a		       40		      .byte.b	%01000000	;|  X
    134  f77b		       50		      .byte.b	%01010000	;|X X
    135  f77c		       70		      .byte.b	%01110000	;|XXX
    136  f77d		       70		      .byte.b	%01110000	;|XXX
    137  f77e		       00		      .byte.b	%00000000	;|
    138  f77f		       00		      .byte.b	%00000000	;|
    139  f780							; 8
    140  f780		       00		      .byte.b	%00000000	;|
    141  f781		       00		      .byte.b	%00000000	;|
    142  f782		       20		      .byte.b	%00100000	;| X
    143  f783		       70		      .byte.b	%01110000	;|XXX
    144  f784		       50		      .byte.b	%01010000	;|X X
    145  f785		       50		      .byte.b	%01010000	;|X X
    146  f786		       50		      .byte.b	%01010000	;|X X
    147  f787		       20		      .byte.b	%00100000	;| X
    148  f788		       20		      .byte.b	%00100000	;| X
    149  f789		       50		      .byte.b	%01010000	;|X X
    150  f78a		       50		      .byte.b	%01010000	;|X X
    151  f78b		       50		      .byte.b	%01010000	;|X X
    152  f78c		       70		      .byte.b	%01110000	;|XXX
    153  f78d		       20		      .byte.b	%00100000	;| X
    154  f78e		       00		      .byte.b	%00000000	;|
    155  f78f		       00		      .byte.b	%00000000	;|
    156  f790							; 9
    157  f790		       00		      .byte.b	%00000000	;|
    158  f791		       00		      .byte.b	%00000000	;|
    159  f792		       30		      .byte.b	%00110000	;|XX
    160  f793		       70		      .byte.b	%01110000	;|XXX
    161  f794		       40		      .byte.b	%01000000	;|  X
    162  f795		       40		      .byte.b	%01000000	;|  X
    163  f796		       60		      .byte.b	%01100000	;| XX
    164  f797		       70		      .byte.b	%01110000	;|XXX
    165  f798		       50		      .byte.b	%01010000	;|X X
    166  f799		       50		      .byte.b	%01010000	;|X X
    167  f79a		       50		      .byte.b	%01010000	;|X X
    168  f79b		       70		      .byte.b	%01110000	;|XXX
    169  f79c		       30		      .byte.b	%00110000	;|XX
    170  f79d		       20		      .byte.b	%00100000	;| X
    171  f79e		       00		      .byte.b	%00000000	;|
    172  f79f		       00		      .byte.b	%00000000	;|
    173  f7a0							; blank
    174  f7a0		       00		      .byte.b	%00000000	;|
    175  f7a1		       00		      .byte.b	%00000000	;|
    176  f7a2		       00		      .byte.b	%00000000	;|
    177  f7a3		       00		      .byte.b	%00000000	;|
    178  f7a4		       00		      .byte.b	%00000000	;|
    179  f7a5		       00		      .byte.b	%00000000	;|
    180  f7a6		       00		      .byte.b	%00000000	;|
    181  f7a7		       00		      .byte.b	%00000000	;|
    182  f7a8		       00		      .byte.b	%00000000	;|
    183  f7a9		       00		      .byte.b	%00000000	;|
    184  f7aa		       00		      .byte.b	%00000000	;|
    185  f7ab		       00		      .byte.b	%00000000	;|
    186  f7ac		       00		      .byte.b	%00000000	;|
    187  f7ad		       00		      .byte.b	%00000000	;|
    188  f7ae		       00		      .byte.b	%00000000	;|
    189  f7af		       00		      .byte.b	%00000000	;|
    190  f7b0							; decimal
    191  f7b0		       00		      .byte.b	%00000000	;|
    192  f7b1		       00		      .byte.b	%00000000	;|
    193  f7b2		       20		      .byte.b	%00100000	;| X
    194  f7b3		       20		      .byte.b	%00100000	;| X
    195  f7b4		       20		      .byte.b	%00100000	;| X
    196  f7b5		       00		      .byte.b	%00000000	;|
    197  f7b6		       00		      .byte.b	%00000000	;|
    198  f7b7		       00		      .byte.b	%00000000	;|
    199  f7b8		       00		      .byte.b	%00000000	;|
    200  f7b9		       00		      .byte.b	%00000000	;|
    201  f7ba		       00		      .byte.b	%00000000	;|
    202  f7bb		       00		      .byte.b	%00000000	;|
    203  f7bc		       00		      .byte.b	%00000000	;|
    204  f7bd		       00		      .byte.b	%00000000	;|
    205  f7be		       00		      .byte.b	%00000000	;|
    206  f7bf		       00		      .byte.b	%00000000	;|
    207  f7c0							; star
    208  f7c0		       00		      .byte.b	%00000000	;|
    209  f7c1		       00		      .byte.b	%00000000	;|
    210  f7c2		       50		      .byte.b	%01010000	;|x x
    211  f7c3		       50		      .byte.b	%01010000	;|x x
    212  f7c4		       50		      .byte.b	%01010000	;|x x
    213  f7c5		       20		      .byte.b	%00100000	;| x
    214  f7c6		       20		      .byte.b	%00100000	;| x
    215  f7c7		       70		      .byte.b	%01110000	;|xxx
    216  f7c8		       70		      .byte.b	%01110000	;|xxx
    217  f7c9		       20		      .byte.b	%00100000	;| x
    218  f7ca		       20		      .byte.b	%00100000	;| x
    219  f7cb		       50		      .byte.b	%01010000	;|x x
    220  f7cc		       50		      .byte.b	%01010000	;|x x
    221  f7cd		       50		      .byte.b	%01010000	;|x x
    222  f7ce		       00		      .byte.b	%00000000	;|
    223  f7cf		       00		      .byte.b	%00000000	;|
------- FILE cart.asm
    620  f7d0
    621  f7d0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    622  f7d0							;;;;  end ROM lookup tables
    623  f7d0
    624  f7d0							;;; Complete to 4kB
    625  fffc					      org	$FFFC
    626  fffc		       00 f0		      .word.w	Start
    627  fffe		       00 f0		      .word.w	Start
