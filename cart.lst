------- FILE cart.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE cart.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.07, 19/January/2020
      3  0000 ????
      4  0000 ????	       00 6b	   VERSION_MACRO =	107
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE cart.asm
      5  0000 ????
      6  0000 ????						;;;; start constant declarations
      7  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      8  0000 ????	       00 09	   P0HEIGHT   equ	9
      9  0000 ????						; contants for use with game state
     10  0000 ????	       00 01	   ST_TIMECOUNT equ	%00000001	; counting time?
     11  0000 ????	       00 02	   ST_GAMEINPUT equ	%00000010	; checking player input?
     12  0000 ????	       00 04	   ST_CHECKRST equ	%00000100	; checking reset switch?
     13  0000 ????	       00 08	   ST_CHECKSLCT equ	%00001000	; checking select switch?
     14  0000 ????						; contants for reading console switches
     15  0000 ????	       00 01	   SW_RESET   equ	%00000001	; reset switch
     16  0000 ????	       00 02	   SW_SELECT  equ	%00000010	; select switch
     17  0000 ????	       00 08	   SW_COLOR   equ	%00001000	; b/w (0) / color (1)
     18  0000 ????	       00 40	   SW_P0DIFF  equ	%01000000	; P0 difficulty | 0 = Beginner
     19  0000 ????	       00 80	   SW_P1DIFF  equ	%10000000	; P1 difficulty | 1 = Advanced
     20  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     21  0000 ????						;;;; end constant declarations
     22  0000 ????
     23  0000 ????						;;; $80 to $FF for variables, minus some at end if using stack
     24 U00b0 ????				      seg.u	variables
     25 U0080					      org	$80
     26 U0080							;;;;  start variable declarations
     27 U0080							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     28 U0080		       00	   P0x	      byte.b		; (80) P0 x
     29 U0081		       00	   P0y	      byte.b		; (81) P0 y
     30 U0082		       00	   P0spritePtr byte.b		; (82) y-adjusted sprite pointer
     31 U0083		       00	   P0spriteHi byte.b		; (83) MSB of sprite pointer
     32 U0084		       00	   P0time0    byte.b		; (84) P0 reaction budget
     33 U0085		       00	   P0time1    byte.b		; (85) P0 reaction budget
     34 U0086		       00	   P0score    byte.b		; (86) P0 score
     35 U0087		       00	   P0bitmap   byte.b		; (87) P0bitmap (without screen-draw offset)
     36 U0088		       00	   LeftScore4 byte.b		; (88) Score Digits
     37 U0089		       00	   LeftScore5 byte.b		; (89) Score Digits
     38 U008a							; GameState - bitwise game state, see ST_* contsants
     39 U008a		       00	   GameState  byte.b		; (8a)
     40 U008b		       00	   DelayTime  byte.b		; (8a) Time left in delay
     41 U008c		       00	   Rand8      byte.b		; (8b) 8-bit random
     42 U008d		       00	   InputTime  byte.b		; (8c) Input re-check delay
     43 U008e
     44 U008e							; Top Bar digit pointers
     45 U00a0					      org	$a0
     46 U00a0		       00 00	   LeftScorePtr0 word.w		; (a0/1)
     47 U00a2		       00 00	   LeftScorePtr1 word.w		; (a2/3)
     48 U00a4		       00 00	   LeftScorePtr2 word.w		; (a4/5)
     49 U00a6		       00 00	   LeftScorePtr3 word.w		; (a6/7)
     50 U00a8		       00 00	   LeftScorePtr4 word.w		; (a8/9)
     51 U00aa		       00 00	   LeftScorePtr5 word.w		; (aa/b)
     52 U00ac		       00 00	   RightScorePtr0 word.w		; (ac/d)
     53 U00ae		       00 00	   RightScorePtr1 word.w		; (ae/f)
     54 U00b0
     55 U00b0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     56 U00b0							;;;;  end variables
     57 U00b0
     58 U00b0							;;; Begin code segment in ROM at $F000
     59  10000 ????				       seg	code
     60  f000					      org	$F000
     61  f000
     62  f000				   Start
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     64  f00b
     65  f00b							;;;;  start variable initialization
     66  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     67  f00b							;;; initialize Random seed
     68  f00b		       ad 84 02 	      lda	INTIM	; unknown from timer
     69  f00e		       05 01		      ora	$1	; can't be zero
     70  f010		       85 8c		      sta	Rand8
     71  f012							;;; Set initial P0bitmap to Up
     72  f012		       a9 1f		      lda	#<Ubitmap
     73  f014		       85 87		      sta	P0bitmap
     74  f016							;;; player coordinates (match bitmap above)
     75  f016		       ad 4e f4 	      lda	PositionX+2
     76  f019		       85 80		      sta	P0x
     77  f01b		       ad 52 f4 	      lda	PositionY+2
     78  f01e		       85 81		      sta	P0y
     79  f020							;;; Set high byte of P0spritePtr (low byte updated per frame)
     80  f020		       a9 f4		      lda	#>BitmapTable
     81  f022		       85 83		      sta	P0spriteHi
     82  f024							;;; set timer to 1000 (decimal)
     83  f024		       a9 00		      lda	#0
     84  f026		       85 84		      sta	P0time0
     85  f028		       a9 10		      lda	#$10
     86  f02a		       85 85		      sta	P0time1
     87  f02c
     88  f02c							;;; check input but don't consume time
     89  f02c		       a5 0a		      lda	ST_GAMEINPUT | ST_CHECKSLCT
     90  f02e		       85 8a		      sta	GameState
     91  f030
     92  f030							;;; Set Score Digits
     93  f030		       a9 0a		      lda	#$0a	; blank
     94  f032		       85 88		      sta	LeftScore4
     95  f034		       85 89		      sta	LeftScore5
     96  f036
     97  f036							;;; set up Score pointer high bytes
     98  f036		       a9 f8		      lda	#>digitTableLeftRev
     99  f038		       85 a1		      sta	LeftScorePtr0+1
    100  f03a		       85 a9		      sta	LeftScorePtr4+1
    101  f03c		       85 ab		      sta	LeftScorePtr5+1
    102  f03e		       85 af		      sta	RightScorePtr1+1
    103  f040		       a9 f6		      lda	#>digitTableLeft
    104  f042		       85 a3		      sta	LeftScorePtr1+1
    105  f044		       a9 f5		      lda	#>digitTableRight
    106  f046		       85 a5		      sta	LeftScorePtr2+1
    107  f048		       a9 f7		      lda	#>digitTableRightRev
    108  f04a		       85 a7		      sta	LeftScorePtr3+1
    109  f04c		       85 ad		      sta	RightScorePtr0+1
    110  f04e
    111  f04e							;;; register setup
    112  f04e							; playfield color
    113  f04e		       a9 37		      lda	#55
    114  f050		       85 08		      sta	COLUPF
    115  f052							; player/missile size register
    116  f052		       a5 00		      lda	%00000000	; one player, single-sized
    117  f054							;lda %00000101    ; one player, double-sized
    118  f054							;lda %00000111    ; one player, quad-sized
    119  f054		       85 04		      sta	NUSIZ0
    120  f056							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    121  f056							;;;;  end variable initialization
    122  f056
    123  f056				   StartFrame
    124  f056		       a9 02		      lda	#2
    125  f058		       85 00		      sta	VSYNC
    126  f05a
    127  f05a							;;; 3 lines of VSYNC
    128  f05a		       85 02		      sta	WSYNC	; store halts until scanline complete
    129  f05c		       85 02		      sta	WSYNC	; 2nd
    130  f05e		       85 02		      sta	WSYNC	; 3rd
    131  f060
    132  f060							;;;; set timer for VBLANK
    133  f060		       a9 2c		      LDA	#44
    134  f062		       8d 96 02 	      STA	TIM64T
    135  f065
    136  f065		       a9 00		      lda	#0
    137  f067		       85 00		      sta	VSYNC	; turn off VSYNC
    138  f069
    139  f069							;;;;  start game vblank logic
    140  f069							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    141  f069
    142  f069							;;; Consume Time
    143  f069		       20 cf f1 	      jsr	ConsumeTime
    144  f06c							;;; check if open for input
    145  f06c		       a5 02		      lda	ST_GAMEINPUT
    146  f06e		       24 8a		      bit	GameState
    147  f070		       f0 03		      beq	NotActive
    148  f072		       4c 96 f0 	      jmp	CheckInput
    149  f075							;;; not active so check if time to activate
    150  f075				   NotActive
    151  f075		       a5 8b		      lda	DelayTime
    152  f077		       f0 1a		      beq	NoNewBitmap	; already zero
    153  f079		       38		      sec
    154  f07a		       e9 01		      sbc	#1
    155  f07c		       85 8b		      sta	DelayTime
    156  f07e		       d0 13		      bne	NoNewBitmap
    157  f080				   NewBitmap
    158  f080		       20 12 f3 	      jsr	Random	; get a random #
    159  f083		       29 03		      and	#%00000011	; truncate to 2 bits
    160  f085		       a8		      tay		; put in Y
    161  f086		       18		      clc
    162  f087		       b9 00 f4 	      lda	BitmapIndex,Y
    163  f08a		       85 87		      sta	P0bitmap
    164  f08c		       20 ab f1 	      jsr	SetPosition
    165  f08f				   SetActive
    166  f08f							; set Active
    167  f08f		       a5 03		      lda	ST_GAMEINPUT | ST_TIMECOUNT
    168  f091		       85 8a		      sta	GameState
    169  f093				   NoNewBitmap
    170  f093		       4c e9 f0 	      jmp	EndP0Input
    171  f096
    172  f096							;;; check input signals
    173  f096				   CheckInput
    174  f096		       a2 31		      ldx	#<NullBitmap
    175  f098				   CheckP0Up
    176  f098		       a9 10		      lda	#%00010000
    177  f09a		       2c 80 02 	      bit	SWCHA
    178  f09d		       d0 02		      bne	CheckP0Down
    179  f09f		       a2 1f		      ldx	#<Ubitmap
    180  f0a1				   CheckP0Down
    181  f0a1		       a9 20		      lda	#%00100000
    182  f0a3		       2c 80 02 	      bit	SWCHA
    183  f0a6		       d0 02		      bne	CheckP0Right
    184  f0a8		       a2 16		      ldx	#<Dbitmap
    185  f0aa				   CheckP0Right
    186  f0aa		       a9 80		      lda	#%10000000
    187  f0ac		       2c 80 02 	      bit	SWCHA
    188  f0af		       d0 02		      bne	CheckP0Left
    189  f0b1		       a2 0d		      ldx	#<Rbitmap
    190  f0b3				   CheckP0Left
    191  f0b3		       a9 40		      lda	#%01000000
    192  f0b5		       2c 80 02 	      bit	SWCHA
    193  f0b8		       d0 02		      bne	EndP0InputCheck
    194  f0ba		       a2 04		      ldx	#<Lbitmap
    195  f0bc				   EndP0InputCheck
    196  f0bc
    197  f0bc							;;; do input-related processing
    198  f0bc				   CheckInputCorrect
    199  f0bc		       e0 31		      cpx	#<NullBitmap	; if x hasn't changed
    200  f0be		       f0 29		      beq	EndP0Input	; we didn't get input
    201  f0c0		       a9 00		      lda	#0	; if we did get input
    202  f0c2		       85 8a		      sta	GameState	; stop time counter and input checking
    203  f0c4		       e4 87		      cpx	P0bitmap	; check if input matches icon
    204  f0c6		       d0 10		      bne	P0Incorrect
    205  f0c8				   P0Correct
    206  f0c8							; increment (decimal) score
    207  f0c8		       18		      clc
    208  f0c9		       a5 86		      lda	P0score
    209  f0cb		       f8		      sed
    210  f0cc		       69 01		      adc	#1
    211  f0ce		       85 86		      sta	P0score
    212  f0d0		       d8		      cld
    213  f0d1							; set bitmap to null
    214  f0d1		       a9 31		      lda	#<NullBitmap
    215  f0d3		       85 87		      sta	P0bitmap
    216  f0d5		       4c e0 f0 	      jmp	SetDelay
    217  f0d8				   P0Incorrect
    218  f0d8		       a9 28		      lda	#<Xbitmap	; set bitmap to X
    219  f0da		       85 87		      sta	P0bitmap
    220  f0dc		       a5 01		      lda	ST_TIMECOUNT	; time active, input not
    221  f0de		       85 8a		      sta	GameState
    222  f0e0				   SetDelay
    223  f0e0							; set a random delay
    224  f0e0		       20 12 f3 	      jsr	Random
    225  f0e3		       29 3f		      and	#%00111111	; max 127 (around 2.5 second)
    226  f0e5		       09 08		      ora	#%00001000	; min 16 (a little more than 1/4 second)
    227  f0e7		       85 8b		      sta	DelayTime
    228  f0e9				   EndP0Input
    229  f0e9							; check for game switches
    230  f0e9							; (subroutines know if input being accepted in current state)
    231  f0e9		       20 70 f1 	      jsr	ResetCheck
    232  f0ec		       20 81 f1 	      jsr	SelectCheck
    233  f0ef							;;; end of input processing
    234  f0ef
    235  f0ef
    236  f0ef							;;; P0 horizontal position
    237  f0ef		       a2 00		      ldx	#0
    238  f0f1		       a5 80		      lda	P0x
    239  f0f3		       20 00 f3 	      jsr	PosObject
    240  f0f6							;;; P0 vertical position
    241  f0f6		       a5 87		      lda	P0bitmap	; bitmap base
    242  f0f8		       18		      clc		; clear carry for add
    243  f0f9		       69 09		      adc	#P0HEIGHT	; bitmap high end
    244  f0fb		       38		      sec		; set carry for subtract
    245  f0fc		       e5 81		      sbc	P0y	; offset by P0y for draw logic
    246  f0fe		       85 82		      sta	P0spritePtr	; store in sprite pointer
    247  f100		       a9 f4		      lda	#>BitmapTable	; load 2nd byte of bitmap table
    248  f102		       e9 00		      sbc	#0	; subtract 0 (decrements if carry is clear from previous)
    249  f104		       85 83		      sta	P0spritePtr+1	; store in high byte of sprite pointer
    250  f106
    251  f106							;;; Setup score pointers for display
    252  f106		       20 01 f2 	      jsr	LoadScorePointers
    253  f109
    254  f109							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    255  f109							;;;;  end game vblank logic
    256  f109
    257  f109							;;;; Wait for rest of VBLANK
    258  f109				   .VblankWaitLoop
    259  f109		       ad 84 02 	      lda	INTIM	; load timer interrupt
    260  f10c		       d0 fb		      bne	.VblankWaitLoop
    261  f10e		       85 02		      sta	WSYNC	; wait for next wsync
    262  f110		       85 01		      sta	VBLANK	; turn off VBlank
    263  f112
    264  f112							;;;; kernel (192 visible scan lines)
    265  f112							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    266  f112		       a0 0e		      ldy	#14
    267  f114							;;; display 14 rows of "score"
    268  f114				   .ScrollLoop
    269  f114		       85 02		      sta	WSYNC	; 3| 0
    270  f116		       b1 a0		      lda	(LeftScorePtr0),Y	; 5| 5 PF0 is single digit
    271  f118		       85 0d		      sta	PF0	; 3| 8
    272  f11a		       b1 a2		      lda	(LeftScorePtr1),Y	; 4|12
    273  f11c		       11 a4		      ora	(LeftScorePtr2),Y	; 5|17
    274  f11e		       85 0e		      sta	PF1	; 3|20
    275  f120		       b1 a6		      lda	(LeftScorePtr3),Y	; 5|25
    276  f122		       11 a8		      ora	(LeftScorePtr4),Y	; 5|30
    277  f124		       85 0f		      sta	PF2	; 3|33
    278  f126		       b1 aa		      lda	(LeftScorePtr5),Y	; 5|38
    279  f128		       85 0d		      sta	PF0	; 3|41
    280  f12a							;; need to redo counts
    281  f12a							;	lda (ScrollPtr6),Y	; 5|46
    282  f12a							;	ora (ScrollPtr7),Y	; 5|51
    283  f12a		       a9 00		      lda	#0
    284  f12c		       85 0e		      sta	PF1	; 3|54
    285  f12e		       b1 ac		      lda	(RightScorePtr0),Y	; 5|59
    286  f130		       11 ae		      ora	(RightScorePtr1),Y	; 5|64
    287  f132		       85 0f		      sta	PF2	; 3|67
    288  f134		       88		      dey		; 2|69
    289  f135		       d0 dd		      bne	.ScrollLoop	; 3|75/76
    290  f137
    291  f137							;;; one more black line before moving to play area
    292  f137		       85 02		      sta	WSYNC
    293  f139		       a0 b1		      ldy	#177	; counter
    294  f13b		       a2 00		      ldx	#0	; first GRP0 should be 0
    295  f13d				   .LoopVisible
    296  f13d							;;; for rainbow background
    297  f13d		       86 1b		      stx	GRP0	; 3 (calculated on previous line)
    298  f13f		       84 09		      sty	COLUBK	; set bg color to loop var
    299  f141
    300  f141							;;; draw P0
    301  f141		       38		      sec		; 2 set carry
    302  f142		       98		      tya		; 2
    303  f143		       e5 81		      sbc	P0y	; 3
    304  f145		       65 09		      adc	P0HEIGHT	; 2
    305  f147		       b0 05		      bcs	.DrawP0
    306  f149
    307  f149		       ea		      nop		; 2
    308  f14a		       ea		      nop		; 2
    309  f14b		       38		      sec		; 2
    310  f14c		       b0 03		      bcs	.NoDrawP0	; 3
    311  f14e				   .DrawP0
    312  f14e		       b1 82		      lda	(P0spritePtr),Y	; 5
    313  f150		       aa		      tax
    314  f151				   .NoDrawP0
    315  f151
    316  f151		       85 02		      sta	WSYNC	; wait for next scanline
    317  f153		       88		      dey		; y--
    318  f154		       d0 e7		      bne	.LoopVisible	; go back until x = 0
    319  f156							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    320  f156							;;;; end kernel
    321  f156
    322  f156							;;;; set timer for OVERSCAN
    323  f156		       a9 02		      lda	#2
    324  f158		       85 02		      sta	WSYNC
    325  f15a		       85 01		      sta	VBLANK
    326  f15c		       a9 24		      lda	#36
    327  f15e		       8d 96 02 	      sta	TIM64T
    328  f161
    329  f161							;;;;  start game overscan logic
    330  f161							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    331  f161							;;; cycle the Random a tick
    332  f161		       20 12 f3 	      jsr	Random
    333  f164
    334  f164							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    335  f164							;;;;  end game overscan logic
    336  f164
    337  f164
    338  f164							;;;; Wait for rest of OVERSCAN
    339  f164				   .OverscanWaitLoop
    340  f164		       ad 84 02 	      lda	INTIM
    341  f167		       d0 fb		      bne	.OverscanWaitLoop
    342  f169		       a9 02		      lda	#2
    343  f16b		       85 02		      sta	WSYNC
    344  f16d
    345  f16d							;;; new frame
    346  f16d		       4c 56 f0 	      jmp	StartFrame
    347  f170
    348  f170							;;;;	start subroutines
    349  f170							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    350  f170							;;; Load Score Pointers based on corresponding values
    351  f170
    352  f170				   ResetCheck SUBROUTINE
    353  f170		       a5 04		      lda	ST_CHECKRST
    354  f172		       24 8a		      bit	GameState
    355  f174		       f0 0a		      beq	.end
    356  f176		       a5 01		      lda	SW_RESET
    357  f178		       2c 82 02 	      bit	SWCHB
    358  f17b		       d0 03		      bne	.end
    359  f17d							; actual RESET behavior
    360  f17d		       4c 00 f0 	      jmp	Start
    361  f180				   .end
    362  f180		       60		      rts
    363  f181
    364  f181				   SelectCheck SUBROUTINE
    365  f181		       a5 08		      lda	ST_CHECKSLCT
    366  f183		       24 8a		      bit	GameState
    367  f185		       f0 23		      beq	.end
    368  f187		       a5 8d		      lda	InputTime
    369  f189		       f0 05		      beq	.checkselect
    370  f18b		       c6 8d		      dec	InputTime
    371  f18d		       4c aa f1 	      jmp	.end
    372  f190				   .checkselect
    373  f190		       a5 02		      lda	SW_SELECT
    374  f192		       2c 82 02 	      bit	SWCHB
    375  f195		       d0 13		      bne	.end
    376  f197							; actual SELECT behavior
    377  f197		       a5 85		      lda	P0time1
    378  f199		       f8		      sed
    379  f19a		       18		      clc
    380  f19b		       69 05		      adc	#5
    381  f19d		       d8		      cld
    382  f19e		       c9 30		      cmp	#$30
    383  f1a0		       d0 02		      bne	.store
    384  f1a2		       a9 05		      lda	#5
    385  f1a4				   .store
    386  f1a4		       85 85		      sta	P0time1
    387  f1a6		       a9 0f		      lda	#15
    388  f1a8		       85 8d		      sta	InputTime
    389  f1aa				   .end
    390  f1aa		       60		      rts
    391  f1ab
    392  f1ab				   SetPosition SUBROUTINE
    393  f1ab							; Update position
    394  f1ab		       a9 05		      lda	#5	; starting at 999 so half is roughly 500
    395  f1ad		       c5 85		      cmp	P0time1
    396  f1af		       b0 0b		      bcs	.random	; if 5 > P0time1
    397  f1b1				   .fixed
    398  f1b1		       b9 4c f4 	      lda	PositionX,Y
    399  f1b4		       85 80		      sta	P0x
    400  f1b6		       b9 50 f4 	      lda	PositionY,Y
    401  f1b9		       85 81		      sta	P0y
    402  f1bb		       60		      rts
    403  f1bc				   .random
    404  f1bc		       20 12 f3 	      jsr	Random
    405  f1bf		       29 7f		      and	#%01111111	; upper bound 127
    406  f1c1		       09 10		      ora	#%00010000	; lower bound 16
    407  f1c3		       85 80		      sta	P0x
    408  f1c5		       20 12 f3 	      jsr	Random
    409  f1c8		       29 7f		      and	#%01111111	; upper bound 127
    410  f1ca		       09 10		      ora	#%00010000	; lower bound 16
    411  f1cc		       85 81		      sta	P0y
    412  f1ce		       60		      rts
    413  f1cf
    414  f1cf				   ConsumeTime SUBROUTINE
    415  f1cf		       a5 01		      lda	ST_TIMECOUNT	; check if TIMECOUNT bit
    416  f1d1		       24 8a		      bit	GameState	; is set in GameState
    417  f1d3		       d0 01		      bne	.usetime
    418  f1d5		       60		      rts
    419  f1d6				   .usetime
    420  f1d6		       f8		      sed
    421  f1d7		       38		      sec
    422  f1d8		       a5 84		      lda	P0time0
    423  f1da		       e9 01		      sbc	#1
    424  f1dc		       85 84		      sta	P0time0
    425  f1de		       a5 85		      lda	P0time1
    426  f1e0		       e9 00		      sbc	#0
    427  f1e2		       85 85		      sta	P0time1
    428  f1e4		       d8		      cld
    429  f1e5		       90 01		      bcc	.timesup
    430  f1e7		       60		      rts
    431  f1e8				   .timesup
    432  f1e8							; time's up, set back to 0 and deactivate countdown
    433  f1e8		       a9 00		      lda	#0
    434  f1ea		       85 84		      sta	P0time0
    435  f1ec		       85 85		      sta	P0time1
    436  f1ee		       a5 0c		      lda	ST_CHECKRST | ST_CHECKSLCT
    437  f1f0		       85 8a		      sta	GameState
    438  f1f2		       a9 3a		      lda	#<TimeBitmap
    439  f1f4		       85 87		      sta	P0bitmap
    440  f1f6		       ad 4e f4 	      lda	PositionX+2
    441  f1f9		       85 80		      sta	P0x
    442  f1fb		       ad 50 f4 	      lda	PositionY
    443  f1fe		       85 81		      sta	P0y
    444  f200		       60		      rts
    445  f201
    446  f201				   LoadScorePointers SUBROUTINE
    447  f201							; first byte (two digits) of timer
    448  f201		       a9 f0		      lda	#%11110000	; mask for first decimal digit
    449  f203		       25 85		      and	P0time1	;
    450  f205		       85 a0		      sta	LeftScorePtr0	; store as is (already x16)
    451  f207
    452  f207		       a9 0f		      lda	#%00001111	; mask for 2nd decimal digit
    453  f209		       25 85		      and	P0time1	;
    454  f20b		       0a		      asl		;
    455  f20c		       0a		      asl		;
    456  f20d		       0a		      asl		;
    457  f20e		       0a		      asl		; multiply by 16
    458  f20f		       85 a2		      sta	LeftScorePtr1	; store in pointer
    459  f211
    460  f211							; second byte (two digits) of timer
    461  f211		       a9 f0		      lda	#%11110000	; mask for first decimal digit
    462  f213		       25 84		      and	P0time0	;
    463  f215		       85 a4		      sta	LeftScorePtr2	; store as is (already x16)
    464  f217
    465  f217		       a9 0f		      lda	#%00001111	; mask for 2nd decimal digit
    466  f219		       25 84		      and	P0time0	;
    467  f21b		       0a		      asl		;
    468  f21c		       0a		      asl		;
    469  f21d		       0a		      asl		;
    470  f21e		       0a		      asl		; multiply by 16
    471  f21f		       85 a6		      sta	LeftScorePtr3	; store in pointer
    472  f221
    473  f221		       a9 0f		      lda	#%00001111	; mask for 2nd decimal digit
    474  f223		       25 88		      and	LeftScore4	; load the digit
    475  f225		       0a		      asl		;
    476  f226		       0a		      asl		;
    477  f227		       0a		      asl		;
    478  f228		       0a		      asl		; multiply by 16
    479  f229		       85 a8		      sta	LeftScorePtr4	; Put in LSB of ScrollPtr
    480  f22b
    481  f22b							; delay time countdown (MSB only)
    482  f22b		       a9 f0		      lda	#%11110000	; mask for first decimal digit
    483  f22d		       25 8b		      and	DelayTime	; load the digit
    484  f22f		       85 aa		      sta	LeftScorePtr5	; store as is (already x16)
    485  f231
    486  f231							; score digits
    487  f231		       a9 f0		      lda	#%11110000	; mask for first decimal digit
    488  f233		       25 86		      and	P0score	;
    489  f235		       85 ac		      sta	RightScorePtr0	; store as is (already x16)
    490  f237
    491  f237		       a9 0f		      lda	#%00001111	; mask for 2nd decimal digit
    492  f239		       25 86		      and	P0score	;
    493  f23b		       0a		      asl		;
    494  f23c		       0a		      asl		;
    495  f23d		       0a		      asl		;
    496  f23e		       0a		      asl		; multiply by 16
    497  f23f		       85 ae		      sta	RightScorePtr1	; store in pointer
    498  f241
    499  f241		       60		      rts
    500  f242
    501  f300		       00 00 00 00*	      align	256	; PosObject is timing dependent and can't cross page boundaries
    502  f300							;;; PosObject from https://www.biglist.com/lists/stella/archives/200403/msg00260.html
    503  f300							; Positions an object horizontally
    504  f300							; Inputs: A = Desired position.
    505  f300							; X = Desired object to be positioned (0-5). *jh* (P0, P1, M0, M1, Ball)
    506  f300							; scanlines: If control comes on or before cycle 73 then 1 scanline is consumed.
    507  f300							; If control comes after cycle 73 then 2 scanlines are consumed.
    508  f300							; Outputs: X = unchanged
    509  f300							; A = Fine Adjustment value.
    510  f300							; Y = the "remainder" of the division by 15 minus an additional 15.
    511  f300							; control is returned on cycle 6 of the next scanline.
    512  f300				   PosObject  SUBROUTINE
    513  f300
    514  f300		       85 02		      STA	WSYNC	; 00 Sync to start of scanline.
    515  f302		       38		      SEC		; 02 Set the carry flag so no borrow will be applied during the division.
    516  f303				   .divideby15
    517  f303		       e9 0f		      SBC	#15	; 04 ; Waste the necessary amount of time dividing X-pos by 15!
    518  f305		       b0 fc		      BCS	.divideby15	; 06/07 - 11/16/21/26/31/36/41/46/51/56/61/66
    519  f307
    520  f307		       a8		      TAY		; 08 ; At this point the value in A is -1 to -15. In this code I use a table
    521  f308							; to quickly convert that value to the fine adjust value needed.
    522  f308		       b9 0f f8 	      LDA	fineAdjustTable,Y	; 13 -> Consume 5 cycles by guaranteeing we cross a page boundary
    523  f30b							; In your own code you may wish to consume only 4.
    524  f30b		       95 20		      STA	HMP0,X	; 17 Store the fine adjustment value.
    525  f30d		       95 10		      STA	RESP0,X	; 21/ 26/31/36/41/46/51/56/61/66/71 - Set the rough position.
    526  f30f
    527  f30f		       85 02		      STA	WSYNC
    528  f311		       60		      RTS
    529  f312
    530  f312							;;; end PosObject from https://www.biglist.com/lists/stella/archives/200403/msg00260.html
    531  f312							;;; (see link for alternate way without lookup table)
    532  f312
    533  f312							;;; Random from https://forums.atariage.com/blogs/entry/11145-step-10-random-numbers/
    534  f312				   Random     SUBROUTINE
    535  f312		       a5 8c		      lda	Rand8
    536  f314		       4a		      lsr
    537  f315		       90 02		      bcc	.noeor
    538  f317		       49 b4		      eor	#$B4
    539  f319				   .noeor
    540  f319		       85 8c		      sta	Rand8
    541  f31b		       60		      rts
    542  f31c
    543  f31c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    544  f31c							;;;;	end subroutines
    545  f31c
    546  f31c							;;;;  start ROM lookup tables
    547  f31c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    548  f400		       00 00 00 00*	      align	256
    549  f400				   BitmapIndex
    550  f400		       04		      byte.b	#<Lbitmap
    551  f401		       0d		      byte.b	#<Rbitmap
    552  f402		       1f		      byte.b	#<Ubitmap
    553  f403		       16		      byte.b	#<Dbitmap
    554  f404
    555  f404				   BitmapTable
    556  f404				   Lbitmap
    557  f404		       00		      byte.b	#%00000000
    558  f405		       10		      byte.b	#%00010000
    559  f406		       30		      byte.b	#%00110000
    560  f407		       7f		      byte.b	#%01111111
    561  f408		       ff		      byte.b	#%11111111
    562  f409		       7f		      byte.b	#%01111111
    563  f40a		       30		      byte.b	#%00110000
    564  f40b		       10		      byte.b	#%00010000
    565  f40c		       00		      byte.b	#%00000000
    566  f40d
    567  f40d				   Rbitmap
    568  f40d		       00		      byte.b	#%00000000
    569  f40e		       08		      byte.b	#%00001000
    570  f40f		       0c		      byte.b	#%00001100
    571  f410		       fe		      byte.b	#%11111110
    572  f411		       ff		      byte.b	#%11111111
    573  f412		       fe		      byte.b	#%11111110
    574  f413		       0c		      byte.b	#%00001100
    575  f414		       08		      byte.b	#%00001000
    576  f415		       00		      byte.b	#%00000000
    577  f416
    578  f416				   Dbitmap
    579  f416		       00		      byte.b	#%00000000
    580  f417		       10		      byte.b	#%00010000
    581  f418		       38		      byte.b	#%00111000
    582  f419		       7c		      byte.b	#%01111100
    583  f41a		       fe		      byte.b	#%11111110
    584  f41b		       38		      byte.b	#%00111000
    585  f41c		       38		      byte.b	#%00111000
    586  f41d		       38		      byte.b	#%00111000
    587  f41e		       00		      byte.b	#%00000000
    588  f41f
    589  f41f				   Ubitmap
    590  f41f		       00		      byte.b	#%00000000
    591  f420		       38		      byte.b	#%00111000
    592  f421		       38		      byte.b	#%00111000
    593  f422		       38		      byte.b	#%00111000
    594  f423		       fe		      byte.b	#%11111110
    595  f424		       7c		      byte.b	#%01111100
    596  f425		       38		      byte.b	#%00111000
    597  f426		       10		      byte.b	#%00010000
    598  f427		       00		      byte.b	#%00000000
    599  f428
    600  f428				   Xbitmap
    601  f428		       00		      byte.b	#%00000000
    602  f429		       82		      byte.b	#%10000010
    603  f42a		       44		      byte.b	#%01000100
    604  f42b		       28		      byte.b	#%00101000
    605  f42c		       10		      byte.b	#%00010000
    606  f42d		       28		      byte.b	#%00101000
    607  f42e		       44		      byte.b	#%01000100
    608  f42f		       82		      byte.b	#%10000010
    609  f430		       00		      byte.b	#%00000000
    610  f431
    611  f431				   NullBitmap
    612  f431		       00		      byte.b	#%00000000
    613  f432		       00		      byte.b	#%00000000
    614  f433		       00		      byte.b	#%00000000
    615  f434		       00		      byte.b	#%00000000
    616  f435		       00		      byte.b	#%00000000
    617  f436		       00		      byte.b	#%00000000
    618  f437		       00		      byte.b	#%00000000
    619  f438		       00		      byte.b	#%00000000
    620  f439		       00		      byte.b	#%00000000
    621  f43a
    622  f43a				   TimeBitmap
    623  f43a		       00		      byte.b	#%00000000
    624  f43b		       ff		      byte.b	#%11111111
    625  f43c		       5a		      byte.b	#%01011010
    626  f43d		       24		      byte.b	#%00100100
    627  f43e		       18		      byte.b	#%00011000
    628  f43f		       24		      byte.b	#%00100100
    629  f440		       42		      byte.b	#%01000010
    630  f441		       ff		      byte.b	#%11111111
    631  f442		       00		      byte.b	#%00000000
    632  f443
    633  f443				   P0color
    634  f443		       00		      byte.b	#$00
    635  f444		       00		      byte.b	#$00
    636  f445		       00		      byte.b	#$00
    637  f446		       00		      byte.b	#$00
    638  f447		       00		      byte.b	#$00
    639  f448		       00		      byte.b	#$00
    640  f449		       00		      byte.b	#$00
    641  f44a		       00		      byte.b	#$00
    642  f44b		       00		      byte.b	#$00
    643  f44c
    644  f44c							;;; X and Y location per directional icon
    645  f44c				   PositionX
    646  f44c		       35		      byte.b	#53	; left
    647  f44d		       6b		      byte.b	#107	; right
    648  f44e		       50		      byte.b	#80	; up
    649  f44f		       50		      byte.b	#80	; down
    650  f450
    651  f450				   PositionY
    652  f450		       5d		      byte.b	#93	; left (177/2 - 9/2)
    653  f451		       5d		      byte.b	#93	; right
    654  f452		       80		      byte.b	#128	; up
    655  f453		       3b		      byte.b	#59	; down
    656  f454
    657  f454							;;; digits.h should set digitTable at the beginning followed by
    658  f454							;;;	      an array of 16 bytes for each digit 0-9
------- FILE digitTableRight.h LEVEL 2 PASS 2
      0  f454					      include	"digitTableRight.h"
      1  f500		       00 00 00 00*	      align	256
      2  f500				   digitTableRight
      3  f500							; 0
      4  f500		       00		      .byte.b	%00000000	;|
      5  f501		       00		      .byte.b	%00000000	;|
      6  f502		       04		      .byte.b	%00000100	;| X
      7  f503		       04		      .byte.b	%00000100	;| X
      8  f504		       0e		      .byte.b	%00001110	;|XXX
      9  f505		       0a		      .byte.b	%00001010	;|X X
     10  f506		       0a		      .byte.b	%00001010	;|X X
     11  f507		       0a		      .byte.b	%00001010	;|X X
     12  f508		       0a		      .byte.b	%00001010	;|X X
     13  f509		       0a		      .byte.b	%00001010	;|X X
     14  f50a		       0a		      .byte.b	%00001010	;|X X
     15  f50b		       0e		      .byte.b	%00001110	;|XXX
     16  f50c		       04		      .byte.b	%00000100	;| X
     17  f50d		       04		      .byte.b	%00000100	;| X
     18  f50e		       00		      .byte.b	%00000000	;|
     19  f50f		       00		      .byte.b	%00000000	;|
     20  f510							; 1
     21  f510		       00		      .byte.b	%00000000	;|
     22  f511		       00		      .byte.b	%00000000	;|
     23  f512		       0e		      .byte.b	%00001110	;|XXX
     24  f513		       0e		      .byte.b	%00001110	;|XXX
     25  f514		       0e		      .byte.b	%00001110	;|XXX
     26  f515		       04		      .byte.b	%00000100	;| X
     27  f516		       04		      .byte.b	%00000100	;| X
     28  f517		       04		      .byte.b	%00000100	;| X
     29  f518		       04		      .byte.b	%00000100	;| X
     30  f519		       04		      .byte.b	%00000100	;| X
     31  f51a		       04		      .byte.b	%00000100	;| X
     32  f51b		       0c		      .byte.b	%00001100	;|XX
     33  f51c		       0c		      .byte.b	%00001100	;|XX
     34  f51d		       04		      .byte.b	%00000100	;| X
     35  f51e		       00		      .byte.b	%00000000	;|
     36  f51f		       00		      .byte.b	%00000000	;|
     37  f520							; 2
     38  f520		       00		      .byte.b	%00000000	;|
     39  f521		       00		      .byte.b	%00000000	;|
     40  f522		       0e		      .byte.b	%00001110	;|XXX
     41  f523		       0e		      .byte.b	%00001110	;|XXX
     42  f524		       08		      .byte.b	%00001000	;|X
     43  f525		       08		      .byte.b	%00001000	;|X
     44  f526		       0c		      .byte.b	%00001100	;|XX
     45  f527		       06		      .byte.b	%00000110	;| XX
     46  f528		       06		      .byte.b	%00000110	;| XX
     47  f529		       02		      .byte.b	%00000010	;|  X
     48  f52a		       0a		      .byte.b	%00001010	;|X X
     49  f52b		       0e		      .byte.b	%00001110	;|XXX
     50  f52c		       0e		      .byte.b	%00001110	;|XXX
     51  f52d		       04		      .byte.b	%00000100	;| X
     52  f52e		       00		      .byte.b	%00000000	;|
     53  f52f		       00		      .byte.b	%00000000	;|
     54  f530							; 3
     55  f530		       00		      .byte.b	%00000000	;|
     56  f531		       00		      .byte.b	%00000000	;|
     57  f532		       04		      .byte.b	%00000100	;| X
     58  f533		       04		      .byte.b	%00000100	;| X
     59  f534		       0e		      .byte.b	%00001110	;|XXX
     60  f535		       0a		      .byte.b	%00001010	;|X X
     61  f536		       02		      .byte.b	%00000010	;|  X
     62  f537		       04		      .byte.b	%00000100	;| X
     63  f538		       06		      .byte.b	%00000110	;| XX
     64  f539		       02		      .byte.b	%00000010	;|  X
     65  f53a		       0a		      .byte.b	%00001010	;|X X
     66  f53b		       0e		      .byte.b	%00001110	;|XXX
     67  f53c		       04		      .byte.b	%00000100	;| X
     68  f53d		       04		      .byte.b	%00000100	;| X
     69  f53e		       00		      .byte.b	%00000000	;|
     70  f53f		       00		      .byte.b	%00000000	;|
     71  f540							; 4
     72  f540		       00		      .byte.b	%00000000	;|
     73  f541		       00		      .byte.b	%00000000	;|
     74  f542		       02		      .byte.b	%00000010	;|  X
     75  f543		       02		      .byte.b	%00000010	;|  X
     76  f544		       02		      .byte.b	%00000010	;|  X
     77  f545		       02		      .byte.b	%00000010	;|  X
     78  f546		       0e		      .byte.b	%00001110	;|XXX
     79  f547		       0e		      .byte.b	%00001110	;|XXX
     80  f548		       0e		      .byte.b	%00001110	;|XXX
     81  f549		       0a		      .byte.b	%00001010	;|X X
     82  f54a		       0a		      .byte.b	%00001010	;|X X
     83  f54b		       0a		      .byte.b	%00001010	;|X X
     84  f54c		       0a		      .byte.b	%00001010	;|X X
     85  f54d		       0a		      .byte.b	%00001010	;|X X
     86  f54e		       00		      .byte.b	%00000000	;|
     87  f54f		       00		      .byte.b	%00000000	;|
     88  f550							; 5
     89  f550		       00		      .byte.b	%00000000	;|
     90  f551		       00		      .byte.b	%00000000	;|
     91  f552		       04		      .byte.b	%00000100	;| X
     92  f553		       0e		      .byte.b	%00001110	;|XXX
     93  f554		       0a		      .byte.b	%00001010	;|X X
     94  f555		       02		      .byte.b	%00000010	;|  X
     95  f556		       02		      .byte.b	%00000010	;|  X
     96  f557		       06		      .byte.b	%00000110	;| XX
     97  f558		       0c		      .byte.b	%00001100	;|XX
     98  f559		       0c		      .byte.b	%00001100	;|XX
     99  f55a		       08		      .byte.b	%00001000	;|X
    100  f55b		       08		      .byte.b	%00001000	;|X
    101  f55c		       0e		      .byte.b	%00001110	;|XXX
    102  f55d		       0e		      .byte.b	%00001110	;|XXX
    103  f55e		       00		      .byte.b	%00000000	;|
    104  f55f		       00		      .byte.b	%00000000	;|
    105  f560							; 6
    106  f560		       00		      .byte.b	%00000000	;|
    107  f561		       00		      .byte.b	%00000000	;|
    108  f562		       04		      .byte.b	%00000100	;| X
    109  f563		       04		      .byte.b	%00000100	;| X
    110  f564		       0e		      .byte.b	%00001110	;|XXX
    111  f565		       0a		      .byte.b	%00001010	;|X X
    112  f566		       0a		      .byte.b	%00001010	;|X X
    113  f567		       0e		      .byte.b	%00001110	;|XXX
    114  f568		       0c		      .byte.b	%00001100	;|XX
    115  f569		       08		      .byte.b	%00001000	;|X
    116  f56a		       08		      .byte.b	%00001000	;|X
    117  f56b		       08		      .byte.b	%00001000	;|X
    118  f56c		       0e		      .byte.b	%00001110	;|XXX
    119  f56d		       06		      .byte.b	%00000110	;| XX
    120  f56e		       00		      .byte.b	%00000000	;|
    121  f56f		       00		      .byte.b	%00000000	;|
    122  f570							; 7
    123  f570		       00		      .byte.b	%00000000	;|
    124  f571		       00		      .byte.b	%00000000	;|
    125  f572		       08		      .byte.b	%00001000	;|X
    126  f573		       08		      .byte.b	%00001000	;|X
    127  f574		       08		      .byte.b	%00001000	;|X
    128  f575		       04		      .byte.b	%00000100	;| X
    129  f576		       04		      .byte.b	%00000100	;| X
    130  f577		       04		      .byte.b	%00000100	;| X
    131  f578		       06		      .byte.b	%00000110	;| XX
    132  f579		       02		      .byte.b	%00000010	;|  X
    133  f57a		       02		      .byte.b	%00000010	;|  X
    134  f57b		       0a		      .byte.b	%00001010	;|X X
    135  f57c		       0e		      .byte.b	%00001110	;|XXX
    136  f57d		       0e		      .byte.b	%00001110	;|XXX
    137  f57e		       00		      .byte.b	%00000000	;|
    138  f57f		       00		      .byte.b	%00000000	;|
    139  f580							; 8
    140  f580		       00		      .byte.b	%00000000	;|
    141  f581		       00		      .byte.b	%00000000	;|
    142  f582		       04		      .byte.b	%00000100	;| X
    143  f583		       0e		      .byte.b	%00001110	;|XXX
    144  f584		       0a		      .byte.b	%00001010	;|X X
    145  f585		       0a		      .byte.b	%00001010	;|X X
    146  f586		       0a		      .byte.b	%00001010	;|X X
    147  f587		       04		      .byte.b	%00000100	;| X
    148  f588		       04		      .byte.b	%00000100	;| X
    149  f589		       0a		      .byte.b	%00001010	;|X X
    150  f58a		       0a		      .byte.b	%00001010	;|X X
    151  f58b		       0a		      .byte.b	%00001010	;|X X
    152  f58c		       0e		      .byte.b	%00001110	;|XXX
    153  f58d		       04		      .byte.b	%00000100	;| X
    154  f58e		       00		      .byte.b	%00000000	;|
    155  f58f		       00		      .byte.b	%00000000	;|
    156  f590							; 9
    157  f590		       00		      .byte.b	%00000000	;|
    158  f591		       00		      .byte.b	%00000000	;|
    159  f592		       0c		      .byte.b	%00001100	;|XX
    160  f593		       0e		      .byte.b	%00001110	;|XXX
    161  f594		       02		      .byte.b	%00000010	;|  X
    162  f595		       02		      .byte.b	%00000010	;|  X
    163  f596		       06		      .byte.b	%00000110	;| XX
    164  f597		       0e		      .byte.b	%00001110	;|XXX
    165  f598		       0a		      .byte.b	%00001010	;|X X
    166  f599		       0a		      .byte.b	%00001010	;|X X
    167  f59a		       0a		      .byte.b	%00001010	;|X X
    168  f59b		       0e		      .byte.b	%00001110	;|XXX
    169  f59c		       0c		      .byte.b	%00001100	;|XX
    170  f59d		       04		      .byte.b	%00000100	;| X
    171  f59e		       00		      .byte.b	%00000000	;|
    172  f59f		       00		      .byte.b	%00000000	;|
    173  f5a0							; blank
    174  f5a0		       00		      .byte.b	%00000000	;|
    175  f5a1		       00		      .byte.b	%00000000	;|
    176  f5a2		       00		      .byte.b	%00000000	;|
    177  f5a3		       00		      .byte.b	%00000000	;|
    178  f5a4		       00		      .byte.b	%00000000	;|
    179  f5a5		       00		      .byte.b	%00000000	;|
    180  f5a6		       00		      .byte.b	%00000000	;|
    181  f5a7		       00		      .byte.b	%00000000	;|
    182  f5a8		       00		      .byte.b	%00000000	;|
    183  f5a9		       00		      .byte.b	%00000000	;|
    184  f5aa		       00		      .byte.b	%00000000	;|
    185  f5ab		       00		      .byte.b	%00000000	;|
    186  f5ac		       00		      .byte.b	%00000000	;|
    187  f5ad		       00		      .byte.b	%00000000	;|
    188  f5ae		       00		      .byte.b	%00000000	;|
    189  f5af		       00		      .byte.b	%00000000	;|
    190  f5b0							; decimal
    191  f5b0		       00		      .byte.b	%00000000	;|
    192  f5b1		       00		      .byte.b	%00000000	;|
    193  f5b2		       04		      .byte.b	%00000100	;| X
    194  f5b3		       04		      .byte.b	%00000100	;| X
    195  f5b4		       04		      .byte.b	%00000100	;| X
    196  f5b5		       00		      .byte.b	%00000000	;|
    197  f5b6		       00		      .byte.b	%00000000	;|
    198  f5b7		       00		      .byte.b	%00000000	;|
    199  f5b8		       00		      .byte.b	%00000000	;|
    200  f5b9		       00		      .byte.b	%00000000	;|
    201  f5ba		       00		      .byte.b	%00000000	;|
    202  f5bb		       00		      .byte.b	%00000000	;|
    203  f5bc		       00		      .byte.b	%00000000	;|
    204  f5bd		       00		      .byte.b	%00000000	;|
    205  f5be		       00		      .byte.b	%00000000	;|
    206  f5bf		       00		      .byte.b	%00000000	;|
    207  f5c0							; star
    208  f5c0		       00		      .byte.b	%00000000	;|
    209  f5c1		       00		      .byte.b	%00000000	;|
    210  f5c2		       0a		      .byte.b	%00001010	;|x x
    211  f5c3		       0a		      .byte.b	%00001010	;|x x
    212  f5c4		       0a		      .byte.b	%00001010	;|x x
    213  f5c5		       04		      .byte.b	%00000100	;| x
    214  f5c6		       04		      .byte.b	%00000100	;| x
    215  f5c7		       0e		      .byte.b	%00001110	;|xxx
    216  f5c8		       0e		      .byte.b	%00001110	;|xxx
    217  f5c9		       04		      .byte.b	%00000100	;| x
    218  f5ca		       0a		      .byte.b	%00001010	;| x
    219  f5cb		       0a		      .byte.b	%00001010	;|x x
    220  f5cc		       0a		      .byte.b	%00001010	;|x x
    221  f5cd		       00		      .byte.b	%00000000	;|x x
    222  f5ce		       00		      .byte.b	%00000000	;|
    223  f5cf		       00		      .byte.b	%00000000	;|
------- FILE cart.asm
------- FILE digitTableLeft.h LEVEL 2 PASS 2
      0  f5d0					      include	"digitTableLeft.h"
      1  f600		       00 00 00 00*	      align	256
      2  f600				   digitTableLeft
      3  f600							; 0
      4  f600		       00		      .byte.b	%00000000	;|
      5  f601		       00		      .byte.b	%00000000	;|
      6  f602		       40		      .byte.b	%01000000	;| X
      7  f603		       40		      .byte.b	%01000000	;| X
      8  f604		       e0		      .byte.b	%11100000	;|XXX
      9  f605		       a0		      .byte.b	%10100000	;|X X
     10  f606		       a0		      .byte.b	%10100000	;|X X
     11  f607		       a0		      .byte.b	%10100000	;|X X
     12  f608		       a0		      .byte.b	%10100000	;|X X
     13  f609		       a0		      .byte.b	%10100000	;|X X
     14  f60a		       a0		      .byte.b	%10100000	;|X X
     15  f60b		       e0		      .byte.b	%11100000	;|XXX
     16  f60c		       40		      .byte.b	%01000000	;| X
     17  f60d		       40		      .byte.b	%01000000	;| X
     18  f60e		       00		      .byte.b	%00000000	;|
     19  f60f		       00		      .byte.b	%00000000	;|
     20  f610							; 1
     21  f610		       00		      .byte.b	%00000000	;|
     22  f611		       00		      .byte.b	%00000000	;|
     23  f612		       e0		      .byte.b	%11100000	;|XXX
     24  f613		       e0		      .byte.b	%11100000	;|XXX
     25  f614		       e0		      .byte.b	%11100000	;|XXX
     26  f615		       40		      .byte.b	%01000000	;| X
     27  f616		       40		      .byte.b	%01000000	;| X
     28  f617		       40		      .byte.b	%01000000	;| X
     29  f618		       40		      .byte.b	%01000000	;| X
     30  f619		       40		      .byte.b	%01000000	;| X
     31  f61a		       40		      .byte.b	%01000000	;| X
     32  f61b		       c0		      .byte.b	%11000000	;|XX
     33  f61c		       c0		      .byte.b	%11000000	;|XX
     34  f61d		       40		      .byte.b	%01000000	;| X
     35  f61e		       00		      .byte.b	%00000000	;|
     36  f61f		       00		      .byte.b	%00000000	;|
     37  f620							; 2
     38  f620		       00		      .byte.b	%00000000	;|
     39  f621		       00		      .byte.b	%00000000	;|
     40  f622		       e0		      .byte.b	%11100000	;|XXX
     41  f623		       e0		      .byte.b	%11100000	;|XXX
     42  f624		       80		      .byte.b	%10000000	;|X
     43  f625		       80		      .byte.b	%10000000	;|X
     44  f626		       c0		      .byte.b	%11000000	;|XX
     45  f627		       60		      .byte.b	%01100000	;| XX
     46  f628		       60		      .byte.b	%01100000	;| XX
     47  f629		       20		      .byte.b	%00100000	;|  X
     48  f62a		       a0		      .byte.b	%10100000	;|X X
     49  f62b		       e0		      .byte.b	%11100000	;|XXX
     50  f62c		       e0		      .byte.b	%11100000	;|XXX
     51  f62d		       40		      .byte.b	%01000000	;| X
     52  f62e		       00		      .byte.b	%00000000	;|
     53  f62f		       00		      .byte.b	%00000000	;|
     54  f630							; 3
     55  f630		       00		      .byte.b	%00000000	;|
     56  f631		       00		      .byte.b	%00000000	;|
     57  f632		       40		      .byte.b	%01000000	;| X
     58  f633		       40		      .byte.b	%01000000	;| X
     59  f634		       e0		      .byte.b	%11100000	;|XXX
     60  f635		       a0		      .byte.b	%10100000	;|X X
     61  f636		       20		      .byte.b	%00100000	;|  X
     62  f637		       40		      .byte.b	%01000000	;| X
     63  f638		       60		      .byte.b	%01100000	;| XX
     64  f639		       20		      .byte.b	%00100000	;|  X
     65  f63a		       a0		      .byte.b	%10100000	;|X X
     66  f63b		       e0		      .byte.b	%11100000	;|XXX
     67  f63c		       40		      .byte.b	%01000000	;| X
     68  f63d		       40		      .byte.b	%01000000	;| X
     69  f63e		       00		      .byte.b	%00000000	;|
     70  f63f		       00		      .byte.b	%00000000	;|
     71  f640							; 4
     72  f640		       00		      .byte.b	%00000000	;|
     73  f641		       00		      .byte.b	%00000000	;|
     74  f642		       20		      .byte.b	%00100000	;|  X
     75  f643		       20		      .byte.b	%00100000	;|  X
     76  f644		       20		      .byte.b	%00100000	;|  X
     77  f645		       20		      .byte.b	%00100000	;|  X
     78  f646		       e0		      .byte.b	%11100000	;|XXX
     79  f647		       e0		      .byte.b	%11100000	;|XXX
     80  f648		       e0		      .byte.b	%11100000	;|XXX
     81  f649		       a0		      .byte.b	%10100000	;|X X
     82  f64a		       a0		      .byte.b	%10100000	;|X X
     83  f64b		       a0		      .byte.b	%10100000	;|X X
     84  f64c		       a0		      .byte.b	%10100000	;|X X
     85  f64d		       a0		      .byte.b	%10100000	;|X X
     86  f64e		       00		      .byte.b	%00000000	;|
     87  f64f		       00		      .byte.b	%00000000	;|
     88  f650							; 5
     89  f650		       00		      .byte.b	%00000000	;|
     90  f651		       00		      .byte.b	%00000000	;|
     91  f652		       40		      .byte.b	%01000000	;| X
     92  f653		       e0		      .byte.b	%11100000	;|XXX
     93  f654		       a0		      .byte.b	%10100000	;|X X
     94  f655		       20		      .byte.b	%00100000	;|  X
     95  f656		       20		      .byte.b	%00100000	;|  X
     96  f657		       60		      .byte.b	%01100000	;| XX
     97  f658		       c0		      .byte.b	%11000000	;|XX
     98  f659		       c0		      .byte.b	%11000000	;|XX
     99  f65a		       80		      .byte.b	%10000000	;|X
    100  f65b		       80		      .byte.b	%10000000	;|X
    101  f65c		       e0		      .byte.b	%11100000	;|XXX
    102  f65d		       e0		      .byte.b	%11100000	;|XXX
    103  f65e		       00		      .byte.b	%00000000	;|
    104  f65f		       00		      .byte.b	%00000000	;|
    105  f660							; 6
    106  f660		       00		      .byte.b	%00000000	;|
    107  f661		       00		      .byte.b	%00000000	;|
    108  f662		       40		      .byte.b	%01000000	;| X
    109  f663		       40		      .byte.b	%01000000	;| X
    110  f664		       e0		      .byte.b	%11100000	;|XXX
    111  f665		       a0		      .byte.b	%10100000	;|X X
    112  f666		       a0		      .byte.b	%10100000	;|X X
    113  f667		       e0		      .byte.b	%11100000	;|XXX
    114  f668		       c0		      .byte.b	%11000000	;|XX
    115  f669		       80		      .byte.b	%10000000	;|X
    116  f66a		       80		      .byte.b	%10000000	;|X
    117  f66b		       80		      .byte.b	%10000000	;|X
    118  f66c		       e0		      .byte.b	%11100000	;|XXX
    119  f66d		       60		      .byte.b	%01100000	;| XX
    120  f66e		       00		      .byte.b	%00000000	;|
    121  f66f		       00		      .byte.b	%00000000	;|
    122  f670							; 7
    123  f670		       00		      .byte.b	%00000000	;|
    124  f671		       00		      .byte.b	%00000000	;|
    125  f672		       80		      .byte.b	%10000000	;|X
    126  f673		       80		      .byte.b	%10000000	;|X
    127  f674		       80		      .byte.b	%10000000	;|X
    128  f675		       40		      .byte.b	%01000000	;| X
    129  f676		       40		      .byte.b	%01000000	;| X
    130  f677		       40		      .byte.b	%01000000	;| X
    131  f678		       60		      .byte.b	%01100000	;| XX
    132  f679		       20		      .byte.b	%00100000	;|  X
    133  f67a		       20		      .byte.b	%00100000	;|  X
    134  f67b		       a0		      .byte.b	%10100000	;|X X
    135  f67c		       e0		      .byte.b	%11100000	;|XXX
    136  f67d		       e0		      .byte.b	%11100000	;|XXX
    137  f67e		       00		      .byte.b	%00000000	;|
    138  f67f		       00		      .byte.b	%00000000	;|
    139  f680							; 8
    140  f680		       00		      .byte.b	%00000000	;|
    141  f681		       00		      .byte.b	%00000000	;|
    142  f682		       40		      .byte.b	%01000000	;| X
    143  f683		       e0		      .byte.b	%11100000	;|XXX
    144  f684		       a0		      .byte.b	%10100000	;|X X
    145  f685		       a0		      .byte.b	%10100000	;|X X
    146  f686		       a0		      .byte.b	%10100000	;|X X
    147  f687		       40		      .byte.b	%01000000	;| X
    148  f688		       40		      .byte.b	%01000000	;| X
    149  f689		       a0		      .byte.b	%10100000	;|X X
    150  f68a		       a0		      .byte.b	%10100000	;|X X
    151  f68b		       a0		      .byte.b	%10100000	;|X X
    152  f68c		       e0		      .byte.b	%11100000	;|XXX
    153  f68d		       40		      .byte.b	%01000000	;| X
    154  f68e		       00		      .byte.b	%00000000	;|
    155  f68f		       00		      .byte.b	%00000000	;|
    156  f690							; 9
    157  f690		       00		      .byte.b	%00000000	;|
    158  f691		       00		      .byte.b	%00000000	;|
    159  f692		       c0		      .byte.b	%11000000	;|XX
    160  f693		       e0		      .byte.b	%11100000	;|XXX
    161  f694		       20		      .byte.b	%00100000	;|  X
    162  f695		       20		      .byte.b	%00100000	;|  X
    163  f696		       60		      .byte.b	%01100000	;| XX
    164  f697		       e0		      .byte.b	%11100000	;|XXX
    165  f698		       a0		      .byte.b	%10100000	;|X X
    166  f699		       a0		      .byte.b	%10100000	;|X X
    167  f69a		       a0		      .byte.b	%10100000	;|X X
    168  f69b		       e0		      .byte.b	%11100000	;|XXX
    169  f69c		       c0		      .byte.b	%11000000	;|XX
    170  f69d		       40		      .byte.b	%01000000	;| X
    171  f69e		       00		      .byte.b	%00000000	;|
    172  f69f		       00		      .byte.b	%00000000	;|
    173  f6a0							; blank
    174  f6a0		       00		      .byte.b	%00000000	;|
    175  f6a1		       00		      .byte.b	%00000000	;|
    176  f6a2		       00		      .byte.b	%00000000	;|
    177  f6a3		       00		      .byte.b	%00000000	;|
    178  f6a4		       00		      .byte.b	%00000000	;|
    179  f6a5		       00		      .byte.b	%00000000	;|
    180  f6a6		       00		      .byte.b	%00000000	;|
    181  f6a7		       00		      .byte.b	%00000000	;|
    182  f6a8		       00		      .byte.b	%00000000	;|
    183  f6a9		       00		      .byte.b	%00000000	;|
    184  f6aa		       00		      .byte.b	%00000000	;|
    185  f6ab		       00		      .byte.b	%00000000	;|
    186  f6ac		       00		      .byte.b	%00000000	;|
    187  f6ad		       00		      .byte.b	%00000000	;|
    188  f6ae		       00		      .byte.b	%00000000	;|
    189  f6af		       00		      .byte.b	%00000000	;|
    190  f6b0							; decimal
    191  f6b0		       00		      .byte.b	%00000000	;|
    192  f6b1		       00		      .byte.b	%00000000	;|
    193  f6b2		       40		      .byte.b	%01000000	;| X
    194  f6b3		       40		      .byte.b	%01000000	;| X
    195  f6b4		       40		      .byte.b	%01000000	;| X
    196  f6b5		       00		      .byte.b	%00000000	;|
    197  f6b6		       00		      .byte.b	%00000000	;|
    198  f6b7		       00		      .byte.b	%00000000	;|
    199  f6b8		       00		      .byte.b	%00000000	;|
    200  f6b9		       00		      .byte.b	%00000000	;|
    201  f6ba		       00		      .byte.b	%00000000	;|
    202  f6bb		       00		      .byte.b	%00000000	;|
    203  f6bc		       00		      .byte.b	%00000000	;|
    204  f6bd		       00		      .byte.b	%00000000	;|
    205  f6be		       00		      .byte.b	%00000000	;|
    206  f6bf		       00		      .byte.b	%00000000	;|
    207  f6c0							; star
    208  f6c0		       00		      .byte.b	%00000000	;|
    209  f6c1		       00		      .byte.b	%00000000	;|
    210  f6c2		       a0		      .byte.b	%10100000	;|x x
    211  f6c3		       a0		      .byte.b	%10100000	;|x x
    212  f6c4		       a0		      .byte.b	%10100000	;|x x
    213  f6c5		       40		      .byte.b	%01000000	;| x
    214  f6c6		       40		      .byte.b	%01000000	;| x
    215  f6c7		       e0		      .byte.b	%11100000	;|xxx
    216  f6c8		       e0		      .byte.b	%11100000	;|xxx
    217  f6c9		       40		      .byte.b	%01000000	;| x
    218  f6ca		       40		      .byte.b	%01000000	;| x
    219  f6cb		       a0		      .byte.b	%10100000	;|x x
    220  f6cc		       a0		      .byte.b	%10100000	;|x x
    221  f6cd		       a0		      .byte.b	%10100000	;|x x
    222  f6ce		       00		      .byte.b	%00000000	;|
    223  f6cf		       00		      .byte.b	%00000000	;|
------- FILE cart.asm
------- FILE digitTableRightRev.h LEVEL 2 PASS 2
      0  f6d0					      include	"digitTableRightRev.h"
      1  f700		       00 00 00 00*	      align	256
      2  f700				   digitTableRightRev
      3  f700							; 0
      4  f700		       00		      .byte.b	%00000000	;|
      5  f701		       00		      .byte.b	%00000000	;|
      6  f702		       02		      .byte.b	%00000010	;| X
      7  f703		       02		      .byte.b	%00000010	;| X
      8  f704		       07		      .byte.b	%00000111	;|XXX
      9  f705		       05		      .byte.b	%00000101	;|X X
     10  f706		       05		      .byte.b	%00000101	;|X X
     11  f707		       05		      .byte.b	%00000101	;|X X
     12  f708		       05		      .byte.b	%00000101	;|X X
     13  f709		       05		      .byte.b	%00000101	;|X X
     14  f70a		       05		      .byte.b	%00000101	;|X X
     15  f70b		       07		      .byte.b	%00000111	;|XXX
     16  f70c		       02		      .byte.b	%00000010	;| X
     17  f70d		       02		      .byte.b	%00000010	;| X
     18  f70e		       00		      .byte.b	%00000000	;|
     19  f70f		       00		      .byte.b	%00000000	;|
     20  f710							; 1
     21  f710		       00		      .byte.b	%00000000	;|
     22  f711		       00		      .byte.b	%00000000	;|
     23  f712		       07		      .byte.b	%00000111	;|XXX
     24  f713		       07		      .byte.b	%00000111	;|XXX
     25  f714		       07		      .byte.b	%00000111	;|XXX
     26  f715		       02		      .byte.b	%00000010	;| X
     27  f716		       02		      .byte.b	%00000010	;| X
     28  f717		       02		      .byte.b	%00000010	;| X
     29  f718		       02		      .byte.b	%00000010	;| X
     30  f719		       02		      .byte.b	%00000010	;| X
     31  f71a		       02		      .byte.b	%00000010	;| X
     32  f71b		       03		      .byte.b	%00000011	;|XX
     33  f71c		       03		      .byte.b	%00000011	;|XX
     34  f71d		       02		      .byte.b	%00000010	;| X
     35  f71e		       00		      .byte.b	%00000000	;|
     36  f71f		       00		      .byte.b	%00000000	;|
     37  f720							; 2
     38  f720		       00		      .byte.b	%00000000	;|
     39  f721		       00		      .byte.b	%00000000	;|
     40  f722		       07		      .byte.b	%00000111	;|XXX
     41  f723		       07		      .byte.b	%00000111	;|XXX
     42  f724		       01		      .byte.b	%00000001	;|X
     43  f725		       01		      .byte.b	%00000001	;|X
     44  f726		       03		      .byte.b	%00000011	;|XX
     45  f727		       06		      .byte.b	%00000110	;| XX
     46  f728		       06		      .byte.b	%00000110	;| XX
     47  f729		       04		      .byte.b	%00000100	;|  X
     48  f72a		       05		      .byte.b	%00000101	;|X X
     49  f72b		       07		      .byte.b	%00000111	;|XXX
     50  f72c		       07		      .byte.b	%00000111	;|XXX
     51  f72d		       02		      .byte.b	%00000010	;| X
     52  f72e		       00		      .byte.b	%00000000	;|
     53  f72f		       00		      .byte.b	%00000000	;|
     54  f730							; 3
     55  f730		       00		      .byte.b	%00000000	;|
     56  f731		       00		      .byte.b	%00000000	;|
     57  f732		       02		      .byte.b	%00000010	;| X
     58  f733		       02		      .byte.b	%00000010	;| X
     59  f734		       07		      .byte.b	%00000111	;|XXX
     60  f735		       05		      .byte.b	%00000101	;|X X
     61  f736		       04		      .byte.b	%00000100	;|  X
     62  f737		       02		      .byte.b	%00000010	;| X
     63  f738		       06		      .byte.b	%00000110	;| XX
     64  f739		       04		      .byte.b	%00000100	;|  X
     65  f73a		       05		      .byte.b	%00000101	;|X X
     66  f73b		       07		      .byte.b	%00000111	;|XXX
     67  f73c		       02		      .byte.b	%00000010	;| X
     68  f73d		       02		      .byte.b	%00000010	;| X
     69  f73e		       00		      .byte.b	%00000000	;|
     70  f73f		       00		      .byte.b	%00000000	;|
     71  f740							; 4
     72  f740		       00		      .byte.b	%00000000	;|
     73  f741		       00		      .byte.b	%00000000	;|
     74  f742		       04		      .byte.b	%00000100	;|  X
     75  f743		       04		      .byte.b	%00000100	;|  X
     76  f744		       04		      .byte.b	%00000100	;|  X
     77  f745		       04		      .byte.b	%00000100	;|  X
     78  f746		       07		      .byte.b	%00000111	;|XXX
     79  f747		       07		      .byte.b	%00000111	;|XXX
     80  f748		       07		      .byte.b	%00000111	;|XXX
     81  f749		       05		      .byte.b	%00000101	;|X X
     82  f74a		       05		      .byte.b	%00000101	;|X X
     83  f74b		       05		      .byte.b	%00000101	;|X X
     84  f74c		       05		      .byte.b	%00000101	;|X X
     85  f74d		       05		      .byte.b	%00000101	;|X X
     86  f74e		       00		      .byte.b	%00000000	;|
     87  f74f		       00		      .byte.b	%00000000	;|
     88  f750							; 5
     89  f750		       00		      .byte.b	%00000000	;|
     90  f751		       00		      .byte.b	%00000000	;|
     91  f752		       02		      .byte.b	%00000010	;| X
     92  f753		       07		      .byte.b	%00000111	;|XXX
     93  f754		       05		      .byte.b	%00000101	;|X X
     94  f755		       04		      .byte.b	%00000100	;|  X
     95  f756		       04		      .byte.b	%00000100	;|  X
     96  f757		       06		      .byte.b	%00000110	;| XX
     97  f758		       03		      .byte.b	%00000011	;|XX
     98  f759		       03		      .byte.b	%00000011	;|XX
     99  f75a		       01		      .byte.b	%00000001	;|X
    100  f75b		       01		      .byte.b	%00000001	;|X
    101  f75c		       07		      .byte.b	%00000111	;|XXX
    102  f75d		       07		      .byte.b	%00000111	;|XXX
    103  f75e		       00		      .byte.b	%00000000	;|
    104  f75f		       00		      .byte.b	%00000000	;|
    105  f760							; 6
    106  f760		       00		      .byte.b	%00000000	;|
    107  f761		       00		      .byte.b	%00000000	;|
    108  f762		       02		      .byte.b	%00000010	;| X
    109  f763		       02		      .byte.b	%00000010	;| X
    110  f764		       07		      .byte.b	%00000111	;|XXX
    111  f765		       05		      .byte.b	%00000101	;|X X
    112  f766		       05		      .byte.b	%00000101	;|X X
    113  f767		       07		      .byte.b	%00000111	;|XXX
    114  f768		       03		      .byte.b	%00000011	;|XX
    115  f769		       01		      .byte.b	%00000001	;|X
    116  f76a		       01		      .byte.b	%00000001	;|X
    117  f76b		       01		      .byte.b	%00000001	;|X
    118  f76c		       07		      .byte.b	%00000111	;|XXX
    119  f76d		       06		      .byte.b	%00000110	;| XX
    120  f76e		       00		      .byte.b	%00000000	;|
    121  f76f		       00		      .byte.b	%00000000	;|
    122  f770							; 7
    123  f770		       00		      .byte.b	%00000000	;|
    124  f771		       00		      .byte.b	%00000000	;|
    125  f772		       01		      .byte.b	%00000001	;|X
    126  f773		       01		      .byte.b	%00000001	;|X
    127  f774		       01		      .byte.b	%00000001	;|X
    128  f775		       02		      .byte.b	%00000010	;| X
    129  f776		       02		      .byte.b	%00000010	;| X
    130  f777		       02		      .byte.b	%00000010	;| X
    131  f778		       06		      .byte.b	%00000110	;| XX
    132  f779		       04		      .byte.b	%00000100	;|  X
    133  f77a		       04		      .byte.b	%00000100	;|  X
    134  f77b		       05		      .byte.b	%00000101	;|X X
    135  f77c		       07		      .byte.b	%00000111	;|XXX
    136  f77d		       07		      .byte.b	%00000111	;|XXX
    137  f77e		       00		      .byte.b	%00000000	;|
    138  f77f		       00		      .byte.b	%00000000	;|
    139  f780							; 8
    140  f780		       00		      .byte.b	%00000000	;|
    141  f781		       00		      .byte.b	%00000000	;|
    142  f782		       02		      .byte.b	%00000010	;| X
    143  f783		       07		      .byte.b	%00000111	;|XXX
    144  f784		       05		      .byte.b	%00000101	;|X X
    145  f785		       05		      .byte.b	%00000101	;|X X
    146  f786		       05		      .byte.b	%00000101	;|X X
    147  f787		       02		      .byte.b	%00000010	;| X
    148  f788		       02		      .byte.b	%00000010	;| X
    149  f789		       05		      .byte.b	%00000101	;|X X
    150  f78a		       05		      .byte.b	%00000101	;|X X
    151  f78b		       05		      .byte.b	%00000101	;|X X
    152  f78c		       07		      .byte.b	%00000111	;|XXX
    153  f78d		       02		      .byte.b	%00000010	;| X
    154  f78e		       00		      .byte.b	%00000000	;|
    155  f78f		       00		      .byte.b	%00000000	;|
    156  f790							; 9
    157  f790		       00		      .byte.b	%00000000	;|
    158  f791		       00		      .byte.b	%00000000	;|
    159  f792		       03		      .byte.b	%00000011	;|XX
    160  f793		       07		      .byte.b	%00000111	;|XXX
    161  f794		       04		      .byte.b	%00000100	;|  X
    162  f795		       04		      .byte.b	%00000100	;|  X
    163  f796		       06		      .byte.b	%00000110	;| XX
    164  f797		       07		      .byte.b	%00000111	;|XXX
    165  f798		       05		      .byte.b	%00000101	;|X X
    166  f799		       05		      .byte.b	%00000101	;|X X
    167  f79a		       05		      .byte.b	%00000101	;|X X
    168  f79b		       07		      .byte.b	%00000111	;|XXX
    169  f79c		       03		      .byte.b	%00000011	;|XX
    170  f79d		       02		      .byte.b	%00000010	;| X
    171  f79e		       00		      .byte.b	%00000000	;|
    172  f79f		       00		      .byte.b	%00000000	;|
    173  f7a0							; blank
    174  f7a0		       00		      .byte.b	%00000000	;|
    175  f7a1		       00		      .byte.b	%00000000	;|
    176  f7a2		       00		      .byte.b	%00000000	;|
    177  f7a3		       00		      .byte.b	%00000000	;|
    178  f7a4		       00		      .byte.b	%00000000	;|
    179  f7a5		       00		      .byte.b	%00000000	;|
    180  f7a6		       00		      .byte.b	%00000000	;|
    181  f7a7		       00		      .byte.b	%00000000	;|
    182  f7a8		       00		      .byte.b	%00000000	;|
    183  f7a9		       00		      .byte.b	%00000000	;|
    184  f7aa		       00		      .byte.b	%00000000	;|
    185  f7ab		       00		      .byte.b	%00000000	;|
    186  f7ac		       00		      .byte.b	%00000000	;|
    187  f7ad		       00		      .byte.b	%00000000	;|
    188  f7ae		       00		      .byte.b	%00000000	;|
    189  f7af		       00		      .byte.b	%00000000	;|
    190  f7b0							; decimal
    191  f7b0		       00		      .byte.b	%00000000	;|
    192  f7b1		       00		      .byte.b	%00000000	;|
    193  f7b2		       02		      .byte.b	%00000010	;| X
    194  f7b3		       02		      .byte.b	%00000010	;| X
    195  f7b4		       02		      .byte.b	%00000010	;| X
    196  f7b5		       00		      .byte.b	%00000000	;|
    197  f7b6		       00		      .byte.b	%00000000	;|
    198  f7b7		       00		      .byte.b	%00000000	;|
    199  f7b8		       00		      .byte.b	%00000000	;|
    200  f7b9		       00		      .byte.b	%00000000	;|
    201  f7ba		       00		      .byte.b	%00000000	;|
    202  f7bb		       00		      .byte.b	%00000000	;|
    203  f7bc		       00		      .byte.b	%00000000	;|
    204  f7bd		       00		      .byte.b	%00000000	;|
    205  f7be		       00		      .byte.b	%00000000	;|
    206  f7bf		       00		      .byte.b	%00000000	;|
    207  f7c0							; star
    208  f7c0		       00		      .byte.b	%00000000	;|
    209  f7c1		       00		      .byte.b	%00000000	;|
    210  f7c2		       05		      .byte.b	%00000101	;|x x
    211  f7c3		       05		      .byte.b	%00000101	;|x x
    212  f7c4		       05		      .byte.b	%00000101	;|x x
    213  f7c5		       02		      .byte.b	%00000010	;| x
    214  f7c6		       02		      .byte.b	%00000010	;| x
    215  f7c7		       07		      .byte.b	%00000111	;|xxx
    216  f7c8		       07		      .byte.b	%00000111	;|xxx
    217  f7c9		       02		      .byte.b	%00000010	;| x
    218  f7ca		       05		      .byte.b	%00000101	;| x
    219  f7cb		       05		      .byte.b	%00000101	;|x x
    220  f7cc		       05		      .byte.b	%00000101	;|x x
    221  f7cd		       00		      .byte.b	%00000000	;|x x
    222  f7ce		       00		      .byte.b	%00000000	;|
    223  f7cf		       00		      .byte.b	%00000000	;|
------- FILE cart.asm
------- FILE digitTableLeftRev.h LEVEL 2 PASS 2
      0  f7d0					      include	"digitTableLeftRev.h"
      1  f800		       00 00 00 00*	      align	256
      2  f800				   digitTableLeftRev
      3  f800							; 0
      4  f800		       00		      .byte.b	%00000000	;|
      5  f801		       00		      .byte.b	%00000000	;|
      6  f802		       20		      .byte.b	%00100000	;| X
      7  f803		       20		      .byte.b	%00100000	;| X
      8  f804		       70		      .byte.b	%01110000	;|XXX
      9  f805		       50		      .byte.b	%01010000	;|X X
     10  f806		       50		      .byte.b	%01010000	;|X X
     11  f807		       50		      .byte.b	%01010000	;|X X
     12  f808		       50		      .byte.b	%01010000	;|X X
     13  f809		       50		      .byte.b	%01010000	;|X X
     14  f80a		       50		      .byte.b	%01010000	;|X X
     15  f80b		       70		      .byte.b	%01110000	;|XXX
     16  f80c		       20		      .byte.b	%00100000	;| X
     17  f80d		       20		      .byte.b	%00100000	;| X
     18  f80e		       00		      .byte.b	%00000000	;|
     19  f80f		       00		      .byte.b	%00000000	;|
     20  f810							; 1
     21  f810		       00		      .byte.b	%00000000	;|
     22  f811		       00		      .byte.b	%00000000	;|
     23  f812		       70		      .byte.b	%01110000	;|XXX
     24  f813		       70		      .byte.b	%01110000	;|XXX
     25  f814		       70		      .byte.b	%01110000	;|XXX
     26  f815		       20		      .byte.b	%00100000	;| X
     27  f816		       20		      .byte.b	%00100000	;| X
     28  f817		       20		      .byte.b	%00100000	;| X
     29  f818		       20		      .byte.b	%00100000	;| X
     30  f819		       20		      .byte.b	%00100000	;| X
     31  f81a		       20		      .byte.b	%00100000	;| X
     32  f81b		       30		      .byte.b	%00110000	;|XX
     33  f81c		       30		      .byte.b	%00110000	;|XX
     34  f81d		       20		      .byte.b	%00100000	;| X
     35  f81e		       00		      .byte.b	%00000000	;|
     36  f81f		       00		      .byte.b	%00000000	;|
     37  f820							; 2
     38  f820		       00		      .byte.b	%00000000	;|
     39  f821		       00		      .byte.b	%00000000	;|
     40  f822		       70		      .byte.b	%01110000	;|XXX
     41  f823		       70		      .byte.b	%01110000	;|XXX
     42  f824		       10		      .byte.b	%00010000	;|X
     43  f825		       10		      .byte.b	%00010000	;|X
     44  f826		       30		      .byte.b	%00110000	;|XX
     45  f827		       60		      .byte.b	%01100000	;| XX
     46  f828		       60		      .byte.b	%01100000	;| XX
     47  f829		       40		      .byte.b	%01000000	;|  X
     48  f82a		       50		      .byte.b	%01010000	;|X X
     49  f82b		       70		      .byte.b	%01110000	;|XXX
     50  f82c		       70		      .byte.b	%01110000	;|XXX
     51  f82d		       20		      .byte.b	%00100000	;| X
     52  f82e		       00		      .byte.b	%00000000	;|
     53  f82f		       00		      .byte.b	%00000000	;|
     54  f830							; 3
     55  f830		       00		      .byte.b	%00000000	;|
     56  f831		       00		      .byte.b	%00000000	;|
     57  f832		       20		      .byte.b	%00100000	;| X
     58  f833		       20		      .byte.b	%00100000	;| X
     59  f834		       70		      .byte.b	%01110000	;|XXX
     60  f835		       50		      .byte.b	%01010000	;|X X
     61  f836		       40		      .byte.b	%01000000	;|  X
     62  f837		       20		      .byte.b	%00100000	;| X
     63  f838		       60		      .byte.b	%01100000	;| XX
     64  f839		       40		      .byte.b	%01000000	;|  X
     65  f83a		       50		      .byte.b	%01010000	;|X X
     66  f83b		       70		      .byte.b	%01110000	;|XXX
     67  f83c		       20		      .byte.b	%00100000	;| X
     68  f83d		       20		      .byte.b	%00100000	;| X
     69  f83e		       00		      .byte.b	%00000000	;|
     70  f83f		       00		      .byte.b	%00000000	;|
     71  f840							; 4
     72  f840		       00		      .byte.b	%00000000	;|
     73  f841		       00		      .byte.b	%00000000	;|
     74  f842		       40		      .byte.b	%01000000	;|  X
     75  f843		       40		      .byte.b	%01000000	;|  X
     76  f844		       40		      .byte.b	%01000000	;|  X
     77  f845		       40		      .byte.b	%01000000	;|  X
     78  f846		       70		      .byte.b	%01110000	;|XXX
     79  f847		       70		      .byte.b	%01110000	;|XXX
     80  f848		       70		      .byte.b	%01110000	;|XXX
     81  f849		       50		      .byte.b	%01010000	;|X X
     82  f84a		       50		      .byte.b	%01010000	;|X X
     83  f84b		       50		      .byte.b	%01010000	;|X X
     84  f84c		       50		      .byte.b	%01010000	;|X X
     85  f84d		       50		      .byte.b	%01010000	;|X X
     86  f84e		       00		      .byte.b	%00000000	;|
     87  f84f		       00		      .byte.b	%00000000	;|
     88  f850							; 5
     89  f850		       00		      .byte.b	%00000000	;|
     90  f851		       00		      .byte.b	%00000000	;|
     91  f852		       20		      .byte.b	%00100000	;| X
     92  f853		       70		      .byte.b	%01110000	;|XXX
     93  f854		       50		      .byte.b	%01010000	;|X X
     94  f855		       40		      .byte.b	%01000000	;|  X
     95  f856		       40		      .byte.b	%01000000	;|  X
     96  f857		       60		      .byte.b	%01100000	;| XX
     97  f858		       30		      .byte.b	%00110000	;|XX
     98  f859		       30		      .byte.b	%00110000	;|XX
     99  f85a		       10		      .byte.b	%00010000	;|X
    100  f85b		       10		      .byte.b	%00010000	;|X
    101  f85c		       70		      .byte.b	%01110000	;|XXX
    102  f85d		       70		      .byte.b	%01110000	;|XXX
    103  f85e		       00		      .byte.b	%00000000	;|
    104  f85f		       00		      .byte.b	%00000000	;|
    105  f860							; 6
    106  f860		       00		      .byte.b	%00000000	;|
    107  f861		       00		      .byte.b	%00000000	;|
    108  f862		       20		      .byte.b	%00100000	;| X
    109  f863		       20		      .byte.b	%00100000	;| X
    110  f864		       70		      .byte.b	%01110000	;|XXX
    111  f865		       50		      .byte.b	%01010000	;|X X
    112  f866		       50		      .byte.b	%01010000	;|X X
    113  f867		       70		      .byte.b	%01110000	;|XXX
    114  f868		       30		      .byte.b	%00110000	;|XX
    115  f869		       10		      .byte.b	%00010000	;|X
    116  f86a		       10		      .byte.b	%00010000	;|X
    117  f86b		       10		      .byte.b	%00010000	;|X
    118  f86c		       70		      .byte.b	%01110000	;|XXX
    119  f86d		       60		      .byte.b	%01100000	;| XX
    120  f86e		       00		      .byte.b	%00000000	;|
    121  f86f		       00		      .byte.b	%00000000	;|
    122  f870							; 7
    123  f870		       00		      .byte.b	%00000000	;|
    124  f871		       00		      .byte.b	%00000000	;|
    125  f872		       10		      .byte.b	%00010000	;|X
    126  f873		       10		      .byte.b	%00010000	;|X
    127  f874		       10		      .byte.b	%00010000	;|X
    128  f875		       20		      .byte.b	%00100000	;| X
    129  f876		       20		      .byte.b	%00100000	;| X
    130  f877		       20		      .byte.b	%00100000	;| X
    131  f878		       60		      .byte.b	%01100000	;| XX
    132  f879		       40		      .byte.b	%01000000	;|  X
    133  f87a		       40		      .byte.b	%01000000	;|  X
    134  f87b		       50		      .byte.b	%01010000	;|X X
    135  f87c		       70		      .byte.b	%01110000	;|XXX
    136  f87d		       70		      .byte.b	%01110000	;|XXX
    137  f87e		       00		      .byte.b	%00000000	;|
    138  f87f		       00		      .byte.b	%00000000	;|
    139  f880							; 8
    140  f880		       00		      .byte.b	%00000000	;|
    141  f881		       00		      .byte.b	%00000000	;|
    142  f882		       20		      .byte.b	%00100000	;| X
    143  f883		       70		      .byte.b	%01110000	;|XXX
    144  f884		       50		      .byte.b	%01010000	;|X X
    145  f885		       50		      .byte.b	%01010000	;|X X
    146  f886		       50		      .byte.b	%01010000	;|X X
    147  f887		       20		      .byte.b	%00100000	;| X
    148  f888		       20		      .byte.b	%00100000	;| X
    149  f889		       50		      .byte.b	%01010000	;|X X
    150  f88a		       50		      .byte.b	%01010000	;|X X
    151  f88b		       50		      .byte.b	%01010000	;|X X
    152  f88c		       70		      .byte.b	%01110000	;|XXX
    153  f88d		       20		      .byte.b	%00100000	;| X
    154  f88e		       00		      .byte.b	%00000000	;|
    155  f88f		       00		      .byte.b	%00000000	;|
    156  f890							; 9
    157  f890		       00		      .byte.b	%00000000	;|
    158  f891		       00		      .byte.b	%00000000	;|
    159  f892		       30		      .byte.b	%00110000	;|XX
    160  f893		       70		      .byte.b	%01110000	;|XXX
    161  f894		       40		      .byte.b	%01000000	;|  X
    162  f895		       40		      .byte.b	%01000000	;|  X
    163  f896		       60		      .byte.b	%01100000	;| XX
    164  f897		       70		      .byte.b	%01110000	;|XXX
    165  f898		       50		      .byte.b	%01010000	;|X X
    166  f899		       50		      .byte.b	%01010000	;|X X
    167  f89a		       50		      .byte.b	%01010000	;|X X
    168  f89b		       70		      .byte.b	%01110000	;|XXX
    169  f89c		       30		      .byte.b	%00110000	;|XX
    170  f89d		       20		      .byte.b	%00100000	;| X
    171  f89e		       00		      .byte.b	%00000000	;|
    172  f89f		       00		      .byte.b	%00000000	;|
    173  f8a0							; blank
    174  f8a0		       00		      .byte.b	%00000000	;|
    175  f8a1		       00		      .byte.b	%00000000	;|
    176  f8a2		       00		      .byte.b	%00000000	;|
    177  f8a3		       00		      .byte.b	%00000000	;|
    178  f8a4		       00		      .byte.b	%00000000	;|
    179  f8a5		       00		      .byte.b	%00000000	;|
    180  f8a6		       00		      .byte.b	%00000000	;|
    181  f8a7		       00		      .byte.b	%00000000	;|
    182  f8a8		       00		      .byte.b	%00000000	;|
    183  f8a9		       00		      .byte.b	%00000000	;|
    184  f8aa		       00		      .byte.b	%00000000	;|
    185  f8ab		       00		      .byte.b	%00000000	;|
    186  f8ac		       00		      .byte.b	%00000000	;|
    187  f8ad		       00		      .byte.b	%00000000	;|
    188  f8ae		       00		      .byte.b	%00000000	;|
    189  f8af		       00		      .byte.b	%00000000	;|
    190  f8b0							; decimal
    191  f8b0		       00		      .byte.b	%00000000	;|
    192  f8b1		       00		      .byte.b	%00000000	;|
    193  f8b2		       20		      .byte.b	%00100000	;| X
    194  f8b3		       20		      .byte.b	%00100000	;| X
    195  f8b4		       20		      .byte.b	%00100000	;| X
    196  f8b5		       00		      .byte.b	%00000000	;|
    197  f8b6		       00		      .byte.b	%00000000	;|
    198  f8b7		       00		      .byte.b	%00000000	;|
    199  f8b8		       00		      .byte.b	%00000000	;|
    200  f8b9		       00		      .byte.b	%00000000	;|
    201  f8ba		       00		      .byte.b	%00000000	;|
    202  f8bb		       00		      .byte.b	%00000000	;|
    203  f8bc		       00		      .byte.b	%00000000	;|
    204  f8bd		       00		      .byte.b	%00000000	;|
    205  f8be		       00		      .byte.b	%00000000	;|
    206  f8bf		       00		      .byte.b	%00000000	;|
    207  f8c0							; star
    208  f8c0		       00		      .byte.b	%00000000	;|
    209  f8c1		       00		      .byte.b	%00000000	;|
    210  f8c2		       50		      .byte.b	%01010000	;|x x
    211  f8c3		       50		      .byte.b	%01010000	;|x x
    212  f8c4		       50		      .byte.b	%01010000	;|x x
    213  f8c5		       20		      .byte.b	%00100000	;| x
    214  f8c6		       20		      .byte.b	%00100000	;| x
    215  f8c7		       70		      .byte.b	%01110000	;|xxx
    216  f8c8		       70		      .byte.b	%01110000	;|xxx
    217  f8c9		       20		      .byte.b	%00100000	;| x
    218  f8ca		       20		      .byte.b	%00100000	;| x
    219  f8cb		       50		      .byte.b	%01010000	;|x x
    220  f8cc		       50		      .byte.b	%01010000	;|x x
    221  f8cd		       50		      .byte.b	%01010000	;|x x
    222  f8ce		       00		      .byte.b	%00000000	;|
    223  f8cf		       00		      .byte.b	%00000000	;|
------- FILE cart.asm
    663  f8d0
    664  f900		       00 00 00 00*	      align	256	; set on page boundary per timing reasons
    665  f900							;;; fine adjustment for PosObject
    666  f900							;;; some explanation on "negative index" is here:
    667  f900							;;; - https://www.randomterrain.com/atari-2600-memories-tutorial-andrew-davie-24.html
    668  f900				   fineAdjustBegin
    669  f900		       70		      DC.B	%01110000	; Left 7
    670  f901		       60		      DC.B	%01100000	; Left 6
    671  f902		       50		      DC.B	%01010000	; Left 5
    672  f903		       40		      DC.B	%01000000	; Left 4
    673  f904		       30		      DC.B	%00110000	; Left 3
    674  f905		       20		      DC.B	%00100000	; Left 2
    675  f906		       10		      DC.B	%00010000	; Left 1
    676  f907		       00		      DC.B	%00000000	; No movement.
    677  f908		       f0		      DC.B	%11110000	; Right 1
    678  f909		       e0		      DC.B	%11100000	; Right 2
    679  f90a		       d0		      DC.B	%11010000	; Right 3
    680  f90b		       c0		      DC.B	%11000000	; Right 4
    681  f90c		       b0		      DC.B	%10110000	; Right 5
    682  f90d		       a0		      DC.B	%10100000	; Right 6
    683  f90e		       90		      DC.B	%10010000	; Right 7
    684  f90e		       f8 0f	   fineAdjustTable EQU	fineAdjustBegin - %11110001	; NOTE: %11110001 = -15
    685  f90f
    686  f90f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    687  f90f							;;;;  end ROM lookup tables
    688  f90f
    689  f90f							;;; Complete to 4kB
    690  fffc					      org	$FFFC
    691  fffc		       00 f0		      .word.w	Start
    692  fffe		       00 f0		      .word.w	Start
