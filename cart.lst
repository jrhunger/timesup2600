------- FILE cart.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE cart.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.07, 19/January/2020
      3  0000 ????
      4  0000 ????	       00 6b	   VERSION_MACRO =	107
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE cart.asm
      5  0000 ????
      6  0000 ????						;;;; start constant declarations
      7  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      8  0000 ????	       00 09	   P0HEIGHT   equ	9
      9  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  0000 ????						;;;; end constant declarations
     11  0000 ????
     12  0000 ????						;;; $80 to $FF for variables, minus some at end if using stack
     13 U00b0 ????				      seg.u	variables
     14 U0080					      org	$80
     15 U0080							;;;;  start variable declarations
     16 U0080							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     17 U0080		       00	   P0x	      byte.b		; (80) P0 x
     18 U0081		       00	   P0y	      byte.b		; (81) P0 y
     19 U0082		       00	   P0spritePtr byte.b		; (82) y-adjusted sprite pointer
     20 U0083		       00	   P0spriteHi byte.b		; (83) MSB of sprite pointer
     21 U0084		       00	   P0time0    byte.b		; (84) P0 reaction budget
     22 U0085		       00	   P0time1    byte.b		; (85) P0 reaction budget
     23 U0086		       00	   P0score    byte.b		; (86) P0 score
     24 U0087		       00	   P0bitmap   byte.b		; (87) P0bitmap (without screen-draw offset)
     25 U0088		       00	   LeftScore4 byte.b		; (88) Score Digits
     26 U0089		       00	   LeftScore5 byte.b		; (89) Score Digits
     27 U008a		       00	   Active     byte.b		; (8a) Whether to count time
     28 U008b		       00	   DelayTime  byte.b		; (8a) Whether to count time
     29 U008c		       00	   Rand8      byte.b		; (8b) 8-bit random
     30 U008d
     31 U008d							; Top Bar digit pointers
     32 U00a0					      org	$a0
     33 U00a0		       00 00	   LeftScorePtr0 word.w		; (a0/1)
     34 U00a2		       00 00	   LeftScorePtr1 word.w		; (a2/3)
     35 U00a4		       00 00	   LeftScorePtr2 word.w		; (a4/5)
     36 U00a6		       00 00	   LeftScorePtr3 word.w		; (a6/7)
     37 U00a8		       00 00	   LeftScorePtr4 word.w		; (a8/9)
     38 U00aa		       00 00	   LeftScorePtr5 word.w		; (aa/b)
     39 U00ac		       00 00	   RightScorePtr0 word.w		; (ac/d)
     40 U00ae		       00 00	   RightScorePtr1 word.w		; (ae/f)
     41 U00b0
     42 U00b0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     43 U00b0							;;;;  end variables
     44 U00b0
     45 U00b0							;;; Begin code segment in ROM at $F000
     46  10000 ????				       seg	code
     47  f000					      org	$F000
     48  f000
     49  f000				   Start
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     51  f00b
     52  f00b							;;;;  start variable initialization
     53  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     54  f00b							;;; initialize Random seed
     55  f00b		       ad 84 02 	      lda	INTIM	; unknown from timer
     56  f00e		       05 01		      ora	$1	; can't be zero
     57  f010		       85 8c		      sta	Rand8
     58  f012							;;; player coordinates
     59  f012		       a9 58		      lda	#88
     60  f014		       85 81		      sta	P0y
     61  f016		       a9 46		      lda	#70
     62  f018		       85 80		      sta	P0x
     63  f01a							;;; Set high byte of P0spritePtr (low byte updated per frame)
     64  f01a		       a9 f2		      lda	#>BitmapTable
     65  f01c		       85 83		      sta	P0spriteHi
     66  f01e							;;; Set initial P0bitmap
     67  f01e		       a9 1f		      lda	#<Ubitmap
     68  f020		       85 87		      sta	P0bitmap
     69  f022							;;; set timer to 999 (decimal)
     70  f022		       a9 99		      lda	#153	; hex 99
     71  f024		       85 84		      sta	P0time0
     72  f026		       a9 09		      lda	#9
     73  f028		       85 85		      sta	P0time1
     74  f02a
     75  f02a							;;; start with time active
     76  f02a		       a9 01		      lda	#1
     77  f02c		       85 8a		      sta	Active
     78  f02e
     79  f02e							;;; Set Score Digits
     80  f02e		       a9 0a		      lda	#$0a	; blank
     81  f030		       85 88		      sta	LeftScore4
     82  f032		       85 89		      sta	LeftScore5
     83  f034
     84  f034							;;; set up Score pointer high bytes
     85  f034		       a9 f6		      lda	#>digitTableLeftRev
     86  f036		       85 a1		      sta	LeftScorePtr0+1
     87  f038		       85 a9		      sta	LeftScorePtr4+1
     88  f03a		       85 ab		      sta	LeftScorePtr5+1
     89  f03c		       85 af		      sta	RightScorePtr1+1
     90  f03e		       a9 f4		      lda	#>digitTableLeft
     91  f040		       85 a3		      sta	LeftScorePtr1+1
     92  f042		       a9 f3		      lda	#>digitTableRight
     93  f044		       85 a5		      sta	LeftScorePtr2+1
     94  f046		       a9 f5		      lda	#>digitTableRightRev
     95  f048		       85 a7		      sta	LeftScorePtr3+1
     96  f04a		       85 ad		      sta	RightScorePtr0+1
     97  f04c
     98  f04c							;;; register setup
     99  f04c							; playfield color
    100  f04c		       a9 37		      lda	#55
    101  f04e		       85 08		      sta	COLUPF
    102  f050							; player/missile size register
    103  f050							;lda %00000000    ; one player, single-sized
    104  f050		       a5 05		      lda	%00000101	; one player, double-sized
    105  f052							;lda %00000111    ; one player, quad-sized
    106  f052		       85 04		      sta	NUSIZ0
    107  f054							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    108  f054							;;;;  end variable initialization
    109  f054
    110  f054				   StartFrame
    111  f054		       a9 02		      lda	#2
    112  f056		       85 00		      sta	VSYNC
    113  f058
    114  f058							;;; 3 lines of VSYNC
    115  f058		       85 02		      sta	WSYNC	; store halts until scanline complete
    116  f05a		       85 02		      sta	WSYNC	; 2nd
    117  f05c		       85 02		      sta	WSYNC	; 3rd
    118  f05e
    119  f05e							;;;; set timer for VBLANK
    120  f05e		       a9 2c		      LDA	#44
    121  f060		       8d 96 02 	      STA	TIM64T
    122  f063
    123  f063		       a9 00		      lda	#0
    124  f065		       85 00		      sta	VSYNC	; turn off VSYNC
    125  f067
    126  f067							;;;;  start game vblank logic
    127  f067							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    128  f067
    129  f067							;;; check if active
    130  f067		       a5 8a		      lda	Active
    131  f069		       f0 06		      beq	NotActive
    132  f06b		       20 65 f1 	      jsr	ConsumeTime
    133  f06e		       4c 98 f0 	      jmp	CheckInput
    134  f071							;;; not active so check if time to activate
    135  f071				   NotActive
    136  f071		       a5 87		      lda	P0bitmap
    137  f073		       c9 28		      cmp	#<Xbitmap
    138  f075		       d0 03		      bne	NotX
    139  f077		       20 65 f1 	      jsr	ConsumeTime
    140  f07a				   NotX
    141  f07a		       a5 8b		      lda	DelayTime
    142  f07c		       f0 17		      beq	NoNewBitmap	; already zero
    143  f07e		       38		      sec
    144  f07f		       e9 01		      sbc	#1
    145  f081		       85 8b		      sta	DelayTime
    146  f083		       d0 10		      bne	NoNewBitmap
    147  f085				   NewBitmap
    148  f085		       20 e6 f1 	      jsr	Random	; get a random #
    149  f088		       29 03		      and	#%00000011	; truncate to 2 bits
    150  f08a		       a8		      tay		; put in Y
    151  f08b		       18		      clc
    152  f08c		       b9 00 f2 	      lda	BitmapIndex,Y
    153  f08f		       85 87		      sta	P0bitmap
    154  f091							; set Active
    155  f091		       a9 01		      lda	#1
    156  f093		       85 8a		      sta	Active
    157  f095				   NoNewBitmap
    158  f095		       4c e7 f0 	      jmp	EndP0Input
    159  f098
    160  f098							;;; check input signals
    161  f098				   CheckInput
    162  f098		       a2 31		      ldx	#<NullBitmap
    163  f09a				   CheckP0Up
    164  f09a		       a9 10		      lda	#%00010000
    165  f09c		       2c 80 02 	      bit	SWCHA
    166  f09f		       d0 02		      bne	CheckP0Down
    167  f0a1		       a2 1f		      ldx	#<Ubitmap
    168  f0a3				   CheckP0Down
    169  f0a3		       a9 20		      lda	#%00100000
    170  f0a5		       2c 80 02 	      bit	SWCHA
    171  f0a8		       d0 02		      bne	CheckP0Right
    172  f0aa		       a2 16		      ldx	#<Dbitmap
    173  f0ac				   CheckP0Right
    174  f0ac		       a9 80		      lda	#%10000000
    175  f0ae		       2c 80 02 	      bit	SWCHA
    176  f0b1		       d0 02		      bne	CheckP0Left
    177  f0b3		       a2 0d		      ldx	#<Rbitmap
    178  f0b5				   CheckP0Left
    179  f0b5		       a9 40		      lda	#%01000000
    180  f0b7		       2c 80 02 	      bit	SWCHA
    181  f0ba		       d0 02		      bne	EndP0InputCheck
    182  f0bc		       a2 04		      ldx	#<Lbitmap
    183  f0be				   EndP0InputCheck
    184  f0be
    185  f0be							;;; do input-related processing
    186  f0be				   CheckInputCorrect
    187  f0be		       e0 31		      cpx	#<NullBitmap	; if x hasn't changed
    188  f0c0		       f0 25		      beq	EndP0Input	; we didn't get input
    189  f0c2		       a9 00		      lda	#0	; if we did get input
    190  f0c4		       85 8a		      sta	Active	; stop time counter
    191  f0c6		       e4 87		      cpx	P0bitmap	; check if input matches icon
    192  f0c8		       d0 10		      bne	P0Incorrect
    193  f0ca				   P0Correct
    194  f0ca							; increment (decimal) score
    195  f0ca		       18		      clc
    196  f0cb		       a5 86		      lda	P0score
    197  f0cd		       f8		      sed
    198  f0ce		       69 01		      adc	#1
    199  f0d0		       85 86		      sta	P0score
    200  f0d2		       d8		      cld
    201  f0d3							; set bitmap to null
    202  f0d3		       a9 31		      lda	#<NullBitmap
    203  f0d5		       85 87		      sta	P0bitmap
    204  f0d7		       4c de f0 	      jmp	SetDelay
    205  f0da				   P0Incorrect
    206  f0da		       a9 28		      lda	#<Xbitmap	; set bitmap to X
    207  f0dc		       85 87		      sta	P0bitmap
    208  f0de				   SetDelay
    209  f0de							; set a random delay
    210  f0de		       20 e6 f1 	      jsr	Random
    211  f0e1		       29 3f		      and	#%00111111	; max 127 (around 2.5 second)
    212  f0e3		       09 20		      ora	#%00100000	; min 31 (a little more than 1/2 second)
    213  f0e5		       85 8b		      sta	DelayTime
    214  f0e7							;;; end of input processing
    215  f0e7				   EndP0Input
    216  f0e7
    217  f0e7							;;; P0 horizontal position
    218  f0e7		       a2 00		      ldx	#0
    219  f0e9		       a5 80		      lda	P0x
    220  f0eb		       20 c5 f1 	      jsr	PosObject
    221  f0ee							;;; P0 vertical position
    222  f0ee		       a5 87		      lda	P0bitmap	; bitmap base
    223  f0f0		       18		      clc		; clear carry for add
    224  f0f1		       69 09		      adc	#P0HEIGHT	; bitmap high end
    225  f0f3		       38		      sec		; set carry for subtract
    226  f0f4		       e5 81		      sbc	P0y	; offset by P0y for draw logic
    227  f0f6		       85 82		      sta	P0spritePtr	; store in sprite pointer
    228  f0f8		       a9 f2		      lda	#>BitmapTable	; load 2nd byte of bitmap table
    229  f0fa		       e9 00		      sbc	#0	; subtract 0 (decrements if carry is clear from previous)
    230  f0fc		       85 83		      sta	P0spritePtr+1	; store in high byte of sprite pointer
    231  f0fe
    232  f0fe							;;; Setup score pointers for display
    233  f0fe		       20 84 f1 	      jsr	LoadScorePointers
    234  f101
    235  f101							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    236  f101							;;;;  end game vblank logic
    237  f101
    238  f101							;;;; Wait for rest of VBLANK
    239  f101				   .VblankWaitLoop
    240  f101		       ad 84 02 	      lda	INTIM	; load timer interrupt
    241  f104		       d0 fb		      bne	.VblankWaitLoop
    242  f106		       85 02		      sta	WSYNC	; wait for next wsync
    243  f108		       85 01		      sta	VBLANK	; turn off VBlank
    244  f10a
    245  f10a							;;;; kernel (192 visible scan lines)
    246  f10a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    247  f10a		       a0 0e		      ldy	#14
    248  f10c							;;; display 14 rows of "score"
    249  f10c				   .ScrollLoop
    250  f10c		       85 02		      sta	WSYNC	; 3| 0
    251  f10e		       b1 a0		      lda	(LeftScorePtr0),Y	; 5| 5 PF0 is single digit
    252  f110		       85 0d		      sta	PF0	; 3| 8
    253  f112		       b1 a2		      lda	(LeftScorePtr1),Y	; 4|12
    254  f114		       11 a4		      ora	(LeftScorePtr2),Y	; 5|17
    255  f116		       85 0e		      sta	PF1	; 3|20
    256  f118		       b1 a6		      lda	(LeftScorePtr3),Y	; 5|25
    257  f11a		       11 a8		      ora	(LeftScorePtr4),Y	; 5|30
    258  f11c		       85 0f		      sta	PF2	; 3|33
    259  f11e		       b1 aa		      lda	(LeftScorePtr5),Y	; 5|38
    260  f120		       85 0d		      sta	PF0	; 3|41
    261  f122							;; need to redo counts
    262  f122							;	lda (ScrollPtr6),Y	; 5|46
    263  f122							;	ora (ScrollPtr7),Y	; 5|51
    264  f122		       a9 00		      lda	#0
    265  f124		       85 0e		      sta	PF1	; 3|54
    266  f126		       b1 ac		      lda	(RightScorePtr0),Y	; 5|59
    267  f128		       11 ae		      ora	(RightScorePtr1),Y	; 5|64
    268  f12a		       85 0f		      sta	PF2	; 3|67
    269  f12c		       88		      dey		; 2|69
    270  f12d		       d0 dd		      bne	.ScrollLoop	; 3|75/76
    271  f12f
    272  f12f							;;; one more black line before moving to play area
    273  f12f		       85 02		      sta	WSYNC
    274  f131		       a0 b1		      ldy	#177	; counter
    275  f133				   .LoopVisible
    276  f133							;;; for rainbow background
    277  f133		       84 09		      sty	COLUBK	; set bg color to loop var
    278  f135
    279  f135							;;; draw P0
    280  f135		       38		      sec		; 2 set carry
    281  f136		       98		      tya		; 2
    282  f137		       e5 81		      sbc	P0y	; 3
    283  f139		       65 09		      adc	P0HEIGHT	; 2
    284  f13b		       b0 05		      bcs	.DrawP0
    285  f13d
    286  f13d		       ea		      nop		; 2
    287  f13e		       ea		      nop		; 2
    288  f13f		       38		      sec		; 2
    289  f140		       b0 04		      bcs	.NoDrawP0	; 3
    290  f142				   .DrawP0
    291  f142		       b1 82		      lda	(P0spritePtr),Y	; 5
    292  f144		       85 1b		      sta	GRP0	; 3
    293  f146				   .NoDrawP0
    294  f146
    295  f146		       85 02		      sta	WSYNC	; wait for next scanline
    296  f148		       88		      dey		; y--
    297  f149		       d0 e8		      bne	.LoopVisible	; go back until x = 0
    298  f14b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    299  f14b							;;;; end kernel
    300  f14b
    301  f14b							;;;; set timer for OVERSCAN
    302  f14b		       a9 02		      lda	#2
    303  f14d		       85 02		      sta	WSYNC
    304  f14f		       85 01		      sta	VBLANK
    305  f151		       a9 24		      lda	#36
    306  f153		       8d 96 02 	      sta	TIM64T
    307  f156
    308  f156							;;;;  start game overscan logic
    309  f156							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    310  f156							;;; cycle the Random a tick
    311  f156		       20 e6 f1 	      jsr	Random
    312  f159
    313  f159							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    314  f159							;;;;  end game overscan logic
    315  f159
    316  f159
    317  f159							;;;; Wait for rest of OVERSCAN
    318  f159				   .OverscanWaitLoop
    319  f159		       ad 84 02 	      lda	INTIM
    320  f15c		       d0 fb		      bne	.OverscanWaitLoop
    321  f15e		       a9 02		      lda	#2
    322  f160		       85 02		      sta	WSYNC
    323  f162
    324  f162							;;; new frame
    325  f162		       4c 54 f0 	      jmp	StartFrame
    326  f165
    327  f165							;;;;	start subroutines
    328  f165							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    329  f165							;;; Load Score Pointers based on corresponding values
    330  f165
    331  f165				   ConsumeTime SUBROUTINE
    332  f165		       f8		      sed
    333  f166		       38		      sec
    334  f167		       a5 84		      lda	P0time0
    335  f169		       e9 01		      sbc	#1
    336  f16b		       85 84		      sta	P0time0
    337  f16d		       a5 85		      lda	P0time1
    338  f16f		       e9 00		      sbc	#0
    339  f171		       85 85		      sta	P0time1
    340  f173		       d8		      cld
    341  f174		       90 01		      bcc	TimesUp
    342  f176		       60		      rts
    343  f177				   TimesUp
    344  f177							; time's up, set back to 0 and deactive countdown
    345  f177		       a9 00		      lda	#0
    346  f179		       85 84		      sta	P0time0
    347  f17b		       85 85		      sta	P0time1
    348  f17d		       85 8a		      sta	Active
    349  f17f		       a9 3a		      lda	#<TimeBitmap
    350  f181		       85 87		      sta	P0bitmap
    351  f183		       60		      rts
    352  f184
    353  f184				   LoadScorePointers SUBROUTINE
    354  f184							; first byte (two digits) of timer
    355  f184		       a9 f0		      lda	#%11110000	; mask for first decimal digit
    356  f186		       25 85		      and	P0time1	;
    357  f188		       85 a0		      sta	LeftScorePtr0	; store as is (already x16)
    358  f18a
    359  f18a		       a9 0f		      lda	#%00001111	; mask for 2nd decimal digit
    360  f18c		       25 85		      and	P0time1	;
    361  f18e		       0a		      asl		;
    362  f18f		       0a		      asl		;
    363  f190		       0a		      asl		;
    364  f191		       0a		      asl		; multiply by 16
    365  f192		       85 a2		      sta	LeftScorePtr1	; store in pointer
    366  f194
    367  f194							; second byte (two digits) of timer
    368  f194		       a9 f0		      lda	#%11110000	; mask for first decimal digit
    369  f196		       25 84		      and	P0time0	;
    370  f198		       85 a4		      sta	LeftScorePtr2	; store as is (already x16)
    371  f19a
    372  f19a		       a9 0f		      lda	#%00001111	; mask for 2nd decimal digit
    373  f19c		       25 84		      and	P0time0	;
    374  f19e		       0a		      asl		;
    375  f19f		       0a		      asl		;
    376  f1a0		       0a		      asl		;
    377  f1a1		       0a		      asl		; multiply by 16
    378  f1a2		       85 a6		      sta	LeftScorePtr3	; store in pointer
    379  f1a4
    380  f1a4		       a9 0f		      lda	#%00001111	; mask for 2nd decimal digit
    381  f1a6		       25 88		      and	LeftScore4	; load the digit
    382  f1a8		       0a		      asl		;
    383  f1a9		       0a		      asl		;
    384  f1aa		       0a		      asl		;
    385  f1ab		       0a		      asl		; multiply by 16
    386  f1ac		       85 a8		      sta	LeftScorePtr4	; Put in LSB of ScrollPtr
    387  f1ae
    388  f1ae							; delay time countdown (MSB only)
    389  f1ae		       a9 f0		      lda	#%11110000	; mask for first decimal digit
    390  f1b0		       25 8b		      and	DelayTime	; load the digit
    391  f1b2		       85 aa		      sta	LeftScorePtr5	; store as is (already x16)
    392  f1b4
    393  f1b4							; score digits
    394  f1b4		       a9 f0		      lda	#%11110000	; mask for first decimal digit
    395  f1b6		       25 86		      and	P0score	;
    396  f1b8		       85 ac		      sta	RightScorePtr0	; store as is (already x16)
    397  f1ba
    398  f1ba		       a9 0f		      lda	#%00001111	; mask for 2nd decimal digit
    399  f1bc		       25 86		      and	P0score	;
    400  f1be		       0a		      asl		;
    401  f1bf		       0a		      asl		;
    402  f1c0		       0a		      asl		;
    403  f1c1		       0a		      asl		; multiply by 16
    404  f1c2		       85 ae		      sta	RightScorePtr1	; store in pointer
    405  f1c4
    406  f1c4		       60		      rts
    407  f1c5
    408  f1c5							;;; PosObject from https://www.biglist.com/lists/stella/archives/200403/msg00260.html
    409  f1c5							; Positions an object horizontally
    410  f1c5							; Inputs: A = Desired position.
    411  f1c5							; X = Desired object to be positioned (0-5). *jh* (P0, P1, M0, M1, Ball)
    412  f1c5							; scanlines: If control comes on or before cycle 73 then 1 scanline is consumed.
    413  f1c5							; If control comes after cycle 73 then 2 scanlines are consumed.
    414  f1c5							; Outputs: X = unchanged
    415  f1c5							; A = Fine Adjustment value.
    416  f1c5							; Y = the "remainder" of the division by 15 minus an additional 15.
    417  f1c5							; control is returned on cycle 6 of the next scanline.
    418  f1c5				   PosObject  SUBROUTINE
    419  f1c5
    420  f1c5		       85 02		      STA	WSYNC	; 00 Sync to start of scanline.
    421  f1c7		       38		      SEC		; 02 Set the carry flag so no borrow will be applied during the division.
    422  f1c8				   .divideby15
    423  f1c8		       e9 0f		      SBC	#15	; 04 ; Waste the necessary amount of time dividing X-pos by 15!
    424  f1ca		       b0 fc		      BCS	.divideby15	; 06/07 - 11/16/21/26/31/36/41/46/51/56/61/66
    425  f1cc
    426  f1cc		       a8		      TAY		; 08 ; At this point the value in A is -1 to -15. In this code I use a table
    427  f1cd							; to quickly convert that value to the fine adjust value needed.
    428  f1cd		       b9 e6 f0 	      LDA	fineAdjustTable,Y	; 13 -> Consume 5 cycles by guaranteeing we cross a page boundary
    429  f1d0							; In your own code you may wish to consume only 4.
    430  f1d0		       95 20		      STA	HMP0,X	; 17 Store the fine adjustment value.
    431  f1d2		       95 10		      STA	RESP0,X	; 21/ 26/31/36/41/46/51/56/61/66/71 - Set the rough position.
    432  f1d4
    433  f1d4		       85 02		      STA	WSYNC
    434  f1d6		       60		      RTS
    435  f1d7
    436  f1d7							;;; end PosObject from https://www.biglist.com/lists/stella/archives/200403/msg00260.html
    437  f1d7							;;; (see link for alternate way without lookup table)
    438  f1d7
    439  f1d7							;;; fine adjustment for PosObject
    440  f1d7							;;; some explanation on "negative index" is here:
    441  f1d7							;;; - https://www.randomterrain.com/atari-2600-memories-tutorial-andrew-davie-24.html
    442  f1d7
    443  f1d7				   fineAdjustBegin
    444  f1d7		       70		      DC.B	%01110000	; Left 7
    445  f1d8		       60		      DC.B	%01100000	; Left 6
    446  f1d9		       50		      DC.B	%01010000	; Left 5
    447  f1da		       40		      DC.B	%01000000	; Left 4
    448  f1db		       30		      DC.B	%00110000	; Left 3
    449  f1dc		       20		      DC.B	%00100000	; Left 2
    450  f1dd		       10		      DC.B	%00010000	; Left 1
    451  f1de		       00		      DC.B	%00000000	; No movement.
    452  f1df		       f0		      DC.B	%11110000	; Right 1
    453  f1e0		       e0		      DC.B	%11100000	; Right 2
    454  f1e1		       d0		      DC.B	%11010000	; Right 3
    455  f1e2		       c0		      DC.B	%11000000	; Right 4
    456  f1e3		       b0		      DC.B	%10110000	; Right 5
    457  f1e4		       a0		      DC.B	%10100000	; Right 6
    458  f1e5		       90		      DC.B	%10010000	; Right 7
    459  f1e5		       f0 e6	   fineAdjustTable EQU	fineAdjustBegin - %11110001	; NOTE: %11110001 = -15
    460  f1e6
    461  f1e6							;;; Random from https://forums.atariage.com/blogs/entry/11145-step-10-random-numbers/
    462  f1e6				   Random
    463  f1e6		       a5 8c		      lda	Rand8
    464  f1e8		       4a		      lsr
    465  f1e9		       90 02		      bcc	noeor
    466  f1eb		       49 b4		      eor	#$B4
    467  f1ed				   noeor
    468  f1ed		       85 8c		      sta	Rand8
    469  f1ef		       60		      rts
    470  f1f0
    471  f1f0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    472  f1f0							;;;;	end subroutines
    473  f1f0
    474  f1f0							;;;;  start ROM lookup tables
    475  f1f0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    476  f200		       00 00 00 00*	      align	256
    477  f200				   BitmapIndex
    478  f200		       04		      byte.b	#<Lbitmap
    479  f201		       0d		      byte.b	#<Rbitmap
    480  f202		       1f		      byte.b	#<Ubitmap
    481  f203		       16		      byte.b	#<Dbitmap
    482  f204
    483  f204				   BitmapTable
    484  f204				   Lbitmap
    485  f204		       00		      byte.b	#%00000000
    486  f205		       10		      byte.b	#%00010000
    487  f206		       30		      byte.b	#%00110000
    488  f207		       7f		      byte.b	#%01111111
    489  f208		       ff		      byte.b	#%11111111
    490  f209		       7f		      byte.b	#%01111111
    491  f20a		       30		      byte.b	#%00110000
    492  f20b		       10		      byte.b	#%00010000
    493  f20c		       00		      byte.b	#%00000000
    494  f20d
    495  f20d				   Rbitmap
    496  f20d		       00		      byte.b	#%00000000
    497  f20e		       08		      byte.b	#%00001000
    498  f20f		       0c		      byte.b	#%00001100
    499  f210		       fe		      byte.b	#%11111110
    500  f211		       ff		      byte.b	#%11111111
    501  f212		       fe		      byte.b	#%11111110
    502  f213		       0c		      byte.b	#%00001100
    503  f214		       08		      byte.b	#%00001000
    504  f215		       00		      byte.b	#%00000000
    505  f216
    506  f216				   Dbitmap
    507  f216		       00		      byte.b	#%00000000
    508  f217		       10		      byte.b	#%00010000
    509  f218		       38		      byte.b	#%00111000
    510  f219		       7c		      byte.b	#%01111100
    511  f21a		       fe		      byte.b	#%11111110
    512  f21b		       38		      byte.b	#%00111000
    513  f21c		       38		      byte.b	#%00111000
    514  f21d		       38		      byte.b	#%00111000
    515  f21e		       00		      byte.b	#%00000000
    516  f21f
    517  f21f				   Ubitmap
    518  f21f		       00		      byte.b	#%00000000
    519  f220		       38		      byte.b	#%00111000
    520  f221		       38		      byte.b	#%00111000
    521  f222		       38		      byte.b	#%00111000
    522  f223		       fe		      byte.b	#%11111110
    523  f224		       7c		      byte.b	#%01111100
    524  f225		       38		      byte.b	#%00111000
    525  f226		       10		      byte.b	#%00010000
    526  f227		       00		      byte.b	#%00000000
    527  f228
    528  f228				   Xbitmap
    529  f228		       00		      byte.b	#%00000000
    530  f229		       82		      byte.b	#%10000010
    531  f22a		       44		      byte.b	#%01000100
    532  f22b		       28		      byte.b	#%00101000
    533  f22c		       10		      byte.b	#%00010000
    534  f22d		       28		      byte.b	#%00101000
    535  f22e		       44		      byte.b	#%01000100
    536  f22f		       82		      byte.b	#%10000010
    537  f230		       00		      byte.b	#%00000000
    538  f231
    539  f231				   NullBitmap
    540  f231		       00		      byte.b	#%00000000
    541  f232		       00		      byte.b	#%00000000
    542  f233		       00		      byte.b	#%00000000
    543  f234		       00		      byte.b	#%00000000
    544  f235		       00		      byte.b	#%00000000
    545  f236		       00		      byte.b	#%00000000
    546  f237		       00		      byte.b	#%00000000
    547  f238		       00		      byte.b	#%00000000
    548  f239		       00		      byte.b	#%00000000
    549  f23a
    550  f23a				   TimeBitmap
    551  f23a		       00		      byte.b	#%00000000
    552  f23b		       ff		      byte.b	#%11111111
    553  f23c		       5a		      byte.b	#%01011010
    554  f23d		       24		      byte.b	#%00100100
    555  f23e		       18		      byte.b	#%00011000
    556  f23f		       3c		      byte.b	#%00111100
    557  f240		       42		      byte.b	#%01000010
    558  f241		       ff		      byte.b	#%11111111
    559  f242		       00		      byte.b	#%00000000
    560  f243
    561  f243				   P0color
    562  f243		       00		      byte.b	#$00
    563  f244		       00		      byte.b	#$00
    564  f245		       00		      byte.b	#$00
    565  f246		       00		      byte.b	#$00
    566  f247		       00		      byte.b	#$00
    567  f248		       00		      byte.b	#$00
    568  f249		       00		      byte.b	#$00
    569  f24a		       00		      byte.b	#$00
    570  f24b		       00		      byte.b	#$00
    571  f24c
    572  f24c				   P0Index
    573  f24c		       04		      byte.b	#<Lbitmap
    574  f24d		       0d		      byte.b	#<Rbitmap
    575  f24e		       1f		      byte.b	#<Ubitmap
    576  f24f		       16		      byte.b	#<Dbitmap
    577  f250		       31		      byte.b	#<NullBitmap
    578  f251		       28		      byte.b	#<Xbitmap
    579  f252
    580  f252							;;; digits.h should set digitTable at the beginning followed by
    581  f252							;;;	      an array of 16 bytes for each digit 0-9
------- FILE digitTableRight.h LEVEL 2 PASS 2
      0  f252					      include	"digitTableRight.h"
      1  f300		       00 00 00 00*	      align	256
      2  f300				   digitTableRight
      3  f300							; 0
      4  f300		       00		      .byte.b	%00000000	;|
      5  f301		       00		      .byte.b	%00000000	;|
      6  f302		       04		      .byte.b	%00000100	;| X
      7  f303		       04		      .byte.b	%00000100	;| X
      8  f304		       0e		      .byte.b	%00001110	;|XXX
      9  f305		       0a		      .byte.b	%00001010	;|X X
     10  f306		       0a		      .byte.b	%00001010	;|X X
     11  f307		       0a		      .byte.b	%00001010	;|X X
     12  f308		       0a		      .byte.b	%00001010	;|X X
     13  f309		       0a		      .byte.b	%00001010	;|X X
     14  f30a		       0a		      .byte.b	%00001010	;|X X
     15  f30b		       0e		      .byte.b	%00001110	;|XXX
     16  f30c		       04		      .byte.b	%00000100	;| X
     17  f30d		       04		      .byte.b	%00000100	;| X
     18  f30e		       00		      .byte.b	%00000000	;|
     19  f30f		       00		      .byte.b	%00000000	;|
     20  f310							; 1
     21  f310		       00		      .byte.b	%00000000	;|
     22  f311		       00		      .byte.b	%00000000	;|
     23  f312		       0e		      .byte.b	%00001110	;|XXX
     24  f313		       0e		      .byte.b	%00001110	;|XXX
     25  f314		       0e		      .byte.b	%00001110	;|XXX
     26  f315		       04		      .byte.b	%00000100	;| X
     27  f316		       04		      .byte.b	%00000100	;| X
     28  f317		       04		      .byte.b	%00000100	;| X
     29  f318		       04		      .byte.b	%00000100	;| X
     30  f319		       04		      .byte.b	%00000100	;| X
     31  f31a		       04		      .byte.b	%00000100	;| X
     32  f31b		       0c		      .byte.b	%00001100	;|XX
     33  f31c		       0c		      .byte.b	%00001100	;|XX
     34  f31d		       04		      .byte.b	%00000100	;| X
     35  f31e		       00		      .byte.b	%00000000	;|
     36  f31f		       00		      .byte.b	%00000000	;|
     37  f320							; 2
     38  f320		       00		      .byte.b	%00000000	;|
     39  f321		       00		      .byte.b	%00000000	;|
     40  f322		       0e		      .byte.b	%00001110	;|XXX
     41  f323		       0e		      .byte.b	%00001110	;|XXX
     42  f324		       08		      .byte.b	%00001000	;|X
     43  f325		       08		      .byte.b	%00001000	;|X
     44  f326		       0c		      .byte.b	%00001100	;|XX
     45  f327		       06		      .byte.b	%00000110	;| XX
     46  f328		       06		      .byte.b	%00000110	;| XX
     47  f329		       02		      .byte.b	%00000010	;|  X
     48  f32a		       0a		      .byte.b	%00001010	;|X X
     49  f32b		       0e		      .byte.b	%00001110	;|XXX
     50  f32c		       0e		      .byte.b	%00001110	;|XXX
     51  f32d		       04		      .byte.b	%00000100	;| X
     52  f32e		       00		      .byte.b	%00000000	;|
     53  f32f		       00		      .byte.b	%00000000	;|
     54  f330							; 3
     55  f330		       00		      .byte.b	%00000000	;|
     56  f331		       00		      .byte.b	%00000000	;|
     57  f332		       04		      .byte.b	%00000100	;| X
     58  f333		       04		      .byte.b	%00000100	;| X
     59  f334		       0e		      .byte.b	%00001110	;|XXX
     60  f335		       0a		      .byte.b	%00001010	;|X X
     61  f336		       02		      .byte.b	%00000010	;|  X
     62  f337		       04		      .byte.b	%00000100	;| X
     63  f338		       06		      .byte.b	%00000110	;| XX
     64  f339		       02		      .byte.b	%00000010	;|  X
     65  f33a		       0a		      .byte.b	%00001010	;|X X
     66  f33b		       0e		      .byte.b	%00001110	;|XXX
     67  f33c		       04		      .byte.b	%00000100	;| X
     68  f33d		       04		      .byte.b	%00000100	;| X
     69  f33e		       00		      .byte.b	%00000000	;|
     70  f33f		       00		      .byte.b	%00000000	;|
     71  f340							; 4
     72  f340		       00		      .byte.b	%00000000	;|
     73  f341		       00		      .byte.b	%00000000	;|
     74  f342		       02		      .byte.b	%00000010	;|  X
     75  f343		       02		      .byte.b	%00000010	;|  X
     76  f344		       02		      .byte.b	%00000010	;|  X
     77  f345		       02		      .byte.b	%00000010	;|  X
     78  f346		       0e		      .byte.b	%00001110	;|XXX
     79  f347		       0e		      .byte.b	%00001110	;|XXX
     80  f348		       0e		      .byte.b	%00001110	;|XXX
     81  f349		       0a		      .byte.b	%00001010	;|X X
     82  f34a		       0a		      .byte.b	%00001010	;|X X
     83  f34b		       0a		      .byte.b	%00001010	;|X X
     84  f34c		       0a		      .byte.b	%00001010	;|X X
     85  f34d		       0a		      .byte.b	%00001010	;|X X
     86  f34e		       00		      .byte.b	%00000000	;|
     87  f34f		       00		      .byte.b	%00000000	;|
     88  f350							; 5
     89  f350		       00		      .byte.b	%00000000	;|
     90  f351		       00		      .byte.b	%00000000	;|
     91  f352		       04		      .byte.b	%00000100	;| X
     92  f353		       0e		      .byte.b	%00001110	;|XXX
     93  f354		       0a		      .byte.b	%00001010	;|X X
     94  f355		       02		      .byte.b	%00000010	;|  X
     95  f356		       02		      .byte.b	%00000010	;|  X
     96  f357		       06		      .byte.b	%00000110	;| XX
     97  f358		       0c		      .byte.b	%00001100	;|XX
     98  f359		       0c		      .byte.b	%00001100	;|XX
     99  f35a		       08		      .byte.b	%00001000	;|X
    100  f35b		       08		      .byte.b	%00001000	;|X
    101  f35c		       0e		      .byte.b	%00001110	;|XXX
    102  f35d		       0e		      .byte.b	%00001110	;|XXX
    103  f35e		       00		      .byte.b	%00000000	;|
    104  f35f		       00		      .byte.b	%00000000	;|
    105  f360							; 6
    106  f360		       00		      .byte.b	%00000000	;|
    107  f361		       00		      .byte.b	%00000000	;|
    108  f362		       04		      .byte.b	%00000100	;| X
    109  f363		       04		      .byte.b	%00000100	;| X
    110  f364		       0e		      .byte.b	%00001110	;|XXX
    111  f365		       0a		      .byte.b	%00001010	;|X X
    112  f366		       0a		      .byte.b	%00001010	;|X X
    113  f367		       0e		      .byte.b	%00001110	;|XXX
    114  f368		       0c		      .byte.b	%00001100	;|XX
    115  f369		       08		      .byte.b	%00001000	;|X
    116  f36a		       08		      .byte.b	%00001000	;|X
    117  f36b		       08		      .byte.b	%00001000	;|X
    118  f36c		       0e		      .byte.b	%00001110	;|XXX
    119  f36d		       06		      .byte.b	%00000110	;| XX
    120  f36e		       00		      .byte.b	%00000000	;|
    121  f36f		       00		      .byte.b	%00000000	;|
    122  f370							; 7
    123  f370		       00		      .byte.b	%00000000	;|
    124  f371		       00		      .byte.b	%00000000	;|
    125  f372		       08		      .byte.b	%00001000	;|X
    126  f373		       08		      .byte.b	%00001000	;|X
    127  f374		       08		      .byte.b	%00001000	;|X
    128  f375		       04		      .byte.b	%00000100	;| X
    129  f376		       04		      .byte.b	%00000100	;| X
    130  f377		       04		      .byte.b	%00000100	;| X
    131  f378		       06		      .byte.b	%00000110	;| XX
    132  f379		       02		      .byte.b	%00000010	;|  X
    133  f37a		       02		      .byte.b	%00000010	;|  X
    134  f37b		       0a		      .byte.b	%00001010	;|X X
    135  f37c		       0e		      .byte.b	%00001110	;|XXX
    136  f37d		       0e		      .byte.b	%00001110	;|XXX
    137  f37e		       00		      .byte.b	%00000000	;|
    138  f37f		       00		      .byte.b	%00000000	;|
    139  f380							; 8
    140  f380		       00		      .byte.b	%00000000	;|
    141  f381		       00		      .byte.b	%00000000	;|
    142  f382		       04		      .byte.b	%00000100	;| X
    143  f383		       0e		      .byte.b	%00001110	;|XXX
    144  f384		       0a		      .byte.b	%00001010	;|X X
    145  f385		       0a		      .byte.b	%00001010	;|X X
    146  f386		       0a		      .byte.b	%00001010	;|X X
    147  f387		       04		      .byte.b	%00000100	;| X
    148  f388		       04		      .byte.b	%00000100	;| X
    149  f389		       0a		      .byte.b	%00001010	;|X X
    150  f38a		       0a		      .byte.b	%00001010	;|X X
    151  f38b		       0a		      .byte.b	%00001010	;|X X
    152  f38c		       0e		      .byte.b	%00001110	;|XXX
    153  f38d		       04		      .byte.b	%00000100	;| X
    154  f38e		       00		      .byte.b	%00000000	;|
    155  f38f		       00		      .byte.b	%00000000	;|
    156  f390							; 9
    157  f390		       00		      .byte.b	%00000000	;|
    158  f391		       00		      .byte.b	%00000000	;|
    159  f392		       0c		      .byte.b	%00001100	;|XX
    160  f393		       0e		      .byte.b	%00001110	;|XXX
    161  f394		       02		      .byte.b	%00000010	;|  X
    162  f395		       02		      .byte.b	%00000010	;|  X
    163  f396		       06		      .byte.b	%00000110	;| XX
    164  f397		       0e		      .byte.b	%00001110	;|XXX
    165  f398		       0a		      .byte.b	%00001010	;|X X
    166  f399		       0a		      .byte.b	%00001010	;|X X
    167  f39a		       0a		      .byte.b	%00001010	;|X X
    168  f39b		       0e		      .byte.b	%00001110	;|XXX
    169  f39c		       0c		      .byte.b	%00001100	;|XX
    170  f39d		       04		      .byte.b	%00000100	;| X
    171  f39e		       00		      .byte.b	%00000000	;|
    172  f39f		       00		      .byte.b	%00000000	;|
    173  f3a0							; blank
    174  f3a0		       00		      .byte.b	%00000000	;|
    175  f3a1		       00		      .byte.b	%00000000	;|
    176  f3a2		       00		      .byte.b	%00000000	;|
    177  f3a3		       00		      .byte.b	%00000000	;|
    178  f3a4		       00		      .byte.b	%00000000	;|
    179  f3a5		       00		      .byte.b	%00000000	;|
    180  f3a6		       00		      .byte.b	%00000000	;|
    181  f3a7		       00		      .byte.b	%00000000	;|
    182  f3a8		       00		      .byte.b	%00000000	;|
    183  f3a9		       00		      .byte.b	%00000000	;|
    184  f3aa		       00		      .byte.b	%00000000	;|
    185  f3ab		       00		      .byte.b	%00000000	;|
    186  f3ac		       00		      .byte.b	%00000000	;|
    187  f3ad		       00		      .byte.b	%00000000	;|
    188  f3ae		       00		      .byte.b	%00000000	;|
    189  f3af		       00		      .byte.b	%00000000	;|
    190  f3b0							; decimal
    191  f3b0		       00		      .byte.b	%00000000	;|
    192  f3b1		       00		      .byte.b	%00000000	;|
    193  f3b2		       04		      .byte.b	%00000100	;| X
    194  f3b3		       04		      .byte.b	%00000100	;| X
    195  f3b4		       04		      .byte.b	%00000100	;| X
    196  f3b5		       00		      .byte.b	%00000000	;|
    197  f3b6		       00		      .byte.b	%00000000	;|
    198  f3b7		       00		      .byte.b	%00000000	;|
    199  f3b8		       00		      .byte.b	%00000000	;|
    200  f3b9		       00		      .byte.b	%00000000	;|
    201  f3ba		       00		      .byte.b	%00000000	;|
    202  f3bb		       00		      .byte.b	%00000000	;|
    203  f3bc		       00		      .byte.b	%00000000	;|
    204  f3bd		       00		      .byte.b	%00000000	;|
    205  f3be		       00		      .byte.b	%00000000	;|
    206  f3bf		       00		      .byte.b	%00000000	;|
    207  f3c0							; star
    208  f3c0		       00		      .byte.b	%00000000	;|
    209  f3c1		       00		      .byte.b	%00000000	;|
    210  f3c2		       0a		      .byte.b	%00001010	;|x x
    211  f3c3		       0a		      .byte.b	%00001010	;|x x
    212  f3c4		       0a		      .byte.b	%00001010	;|x x
    213  f3c5		       04		      .byte.b	%00000100	;| x
    214  f3c6		       04		      .byte.b	%00000100	;| x
    215  f3c7		       0e		      .byte.b	%00001110	;|xxx
    216  f3c8		       0e		      .byte.b	%00001110	;|xxx
    217  f3c9		       04		      .byte.b	%00000100	;| x
    218  f3ca		       0a		      .byte.b	%00001010	;| x
    219  f3cb		       0a		      .byte.b	%00001010	;|x x
    220  f3cc		       0a		      .byte.b	%00001010	;|x x
    221  f3cd		       00		      .byte.b	%00000000	;|x x
    222  f3ce		       00		      .byte.b	%00000000	;|
    223  f3cf		       00		      .byte.b	%00000000	;|
------- FILE cart.asm
------- FILE digitTableLeft.h LEVEL 2 PASS 2
      0  f3d0					      include	"digitTableLeft.h"
      1  f400		       00 00 00 00*	      align	256
      2  f400				   digitTableLeft
      3  f400							; 0
      4  f400		       00		      .byte.b	%00000000	;|
      5  f401		       00		      .byte.b	%00000000	;|
      6  f402		       40		      .byte.b	%01000000	;| X
      7  f403		       40		      .byte.b	%01000000	;| X
      8  f404		       e0		      .byte.b	%11100000	;|XXX
      9  f405		       a0		      .byte.b	%10100000	;|X X
     10  f406		       a0		      .byte.b	%10100000	;|X X
     11  f407		       a0		      .byte.b	%10100000	;|X X
     12  f408		       a0		      .byte.b	%10100000	;|X X
     13  f409		       a0		      .byte.b	%10100000	;|X X
     14  f40a		       a0		      .byte.b	%10100000	;|X X
     15  f40b		       e0		      .byte.b	%11100000	;|XXX
     16  f40c		       40		      .byte.b	%01000000	;| X
     17  f40d		       40		      .byte.b	%01000000	;| X
     18  f40e		       00		      .byte.b	%00000000	;|
     19  f40f		       00		      .byte.b	%00000000	;|
     20  f410							; 1
     21  f410		       00		      .byte.b	%00000000	;|
     22  f411		       00		      .byte.b	%00000000	;|
     23  f412		       e0		      .byte.b	%11100000	;|XXX
     24  f413		       e0		      .byte.b	%11100000	;|XXX
     25  f414		       e0		      .byte.b	%11100000	;|XXX
     26  f415		       40		      .byte.b	%01000000	;| X
     27  f416		       40		      .byte.b	%01000000	;| X
     28  f417		       40		      .byte.b	%01000000	;| X
     29  f418		       40		      .byte.b	%01000000	;| X
     30  f419		       40		      .byte.b	%01000000	;| X
     31  f41a		       40		      .byte.b	%01000000	;| X
     32  f41b		       c0		      .byte.b	%11000000	;|XX
     33  f41c		       c0		      .byte.b	%11000000	;|XX
     34  f41d		       40		      .byte.b	%01000000	;| X
     35  f41e		       00		      .byte.b	%00000000	;|
     36  f41f		       00		      .byte.b	%00000000	;|
     37  f420							; 2
     38  f420		       00		      .byte.b	%00000000	;|
     39  f421		       00		      .byte.b	%00000000	;|
     40  f422		       e0		      .byte.b	%11100000	;|XXX
     41  f423		       e0		      .byte.b	%11100000	;|XXX
     42  f424		       80		      .byte.b	%10000000	;|X
     43  f425		       80		      .byte.b	%10000000	;|X
     44  f426		       c0		      .byte.b	%11000000	;|XX
     45  f427		       60		      .byte.b	%01100000	;| XX
     46  f428		       60		      .byte.b	%01100000	;| XX
     47  f429		       20		      .byte.b	%00100000	;|  X
     48  f42a		       a0		      .byte.b	%10100000	;|X X
     49  f42b		       e0		      .byte.b	%11100000	;|XXX
     50  f42c		       e0		      .byte.b	%11100000	;|XXX
     51  f42d		       40		      .byte.b	%01000000	;| X
     52  f42e		       00		      .byte.b	%00000000	;|
     53  f42f		       00		      .byte.b	%00000000	;|
     54  f430							; 3
     55  f430		       00		      .byte.b	%00000000	;|
     56  f431		       00		      .byte.b	%00000000	;|
     57  f432		       40		      .byte.b	%01000000	;| X
     58  f433		       40		      .byte.b	%01000000	;| X
     59  f434		       e0		      .byte.b	%11100000	;|XXX
     60  f435		       a0		      .byte.b	%10100000	;|X X
     61  f436		       20		      .byte.b	%00100000	;|  X
     62  f437		       40		      .byte.b	%01000000	;| X
     63  f438		       60		      .byte.b	%01100000	;| XX
     64  f439		       20		      .byte.b	%00100000	;|  X
     65  f43a		       a0		      .byte.b	%10100000	;|X X
     66  f43b		       e0		      .byte.b	%11100000	;|XXX
     67  f43c		       40		      .byte.b	%01000000	;| X
     68  f43d		       40		      .byte.b	%01000000	;| X
     69  f43e		       00		      .byte.b	%00000000	;|
     70  f43f		       00		      .byte.b	%00000000	;|
     71  f440							; 4
     72  f440		       00		      .byte.b	%00000000	;|
     73  f441		       00		      .byte.b	%00000000	;|
     74  f442		       20		      .byte.b	%00100000	;|  X
     75  f443		       20		      .byte.b	%00100000	;|  X
     76  f444		       20		      .byte.b	%00100000	;|  X
     77  f445		       20		      .byte.b	%00100000	;|  X
     78  f446		       e0		      .byte.b	%11100000	;|XXX
     79  f447		       e0		      .byte.b	%11100000	;|XXX
     80  f448		       e0		      .byte.b	%11100000	;|XXX
     81  f449		       a0		      .byte.b	%10100000	;|X X
     82  f44a		       a0		      .byte.b	%10100000	;|X X
     83  f44b		       a0		      .byte.b	%10100000	;|X X
     84  f44c		       a0		      .byte.b	%10100000	;|X X
     85  f44d		       a0		      .byte.b	%10100000	;|X X
     86  f44e		       00		      .byte.b	%00000000	;|
     87  f44f		       00		      .byte.b	%00000000	;|
     88  f450							; 5
     89  f450		       00		      .byte.b	%00000000	;|
     90  f451		       00		      .byte.b	%00000000	;|
     91  f452		       40		      .byte.b	%01000000	;| X
     92  f453		       e0		      .byte.b	%11100000	;|XXX
     93  f454		       a0		      .byte.b	%10100000	;|X X
     94  f455		       20		      .byte.b	%00100000	;|  X
     95  f456		       20		      .byte.b	%00100000	;|  X
     96  f457		       60		      .byte.b	%01100000	;| XX
     97  f458		       c0		      .byte.b	%11000000	;|XX
     98  f459		       c0		      .byte.b	%11000000	;|XX
     99  f45a		       80		      .byte.b	%10000000	;|X
    100  f45b		       80		      .byte.b	%10000000	;|X
    101  f45c		       e0		      .byte.b	%11100000	;|XXX
    102  f45d		       e0		      .byte.b	%11100000	;|XXX
    103  f45e		       00		      .byte.b	%00000000	;|
    104  f45f		       00		      .byte.b	%00000000	;|
    105  f460							; 6
    106  f460		       00		      .byte.b	%00000000	;|
    107  f461		       00		      .byte.b	%00000000	;|
    108  f462		       40		      .byte.b	%01000000	;| X
    109  f463		       40		      .byte.b	%01000000	;| X
    110  f464		       e0		      .byte.b	%11100000	;|XXX
    111  f465		       a0		      .byte.b	%10100000	;|X X
    112  f466		       a0		      .byte.b	%10100000	;|X X
    113  f467		       e0		      .byte.b	%11100000	;|XXX
    114  f468		       c0		      .byte.b	%11000000	;|XX
    115  f469		       80		      .byte.b	%10000000	;|X
    116  f46a		       80		      .byte.b	%10000000	;|X
    117  f46b		       80		      .byte.b	%10000000	;|X
    118  f46c		       e0		      .byte.b	%11100000	;|XXX
    119  f46d		       60		      .byte.b	%01100000	;| XX
    120  f46e		       00		      .byte.b	%00000000	;|
    121  f46f		       00		      .byte.b	%00000000	;|
    122  f470							; 7
    123  f470		       00		      .byte.b	%00000000	;|
    124  f471		       00		      .byte.b	%00000000	;|
    125  f472		       80		      .byte.b	%10000000	;|X
    126  f473		       80		      .byte.b	%10000000	;|X
    127  f474		       80		      .byte.b	%10000000	;|X
    128  f475		       40		      .byte.b	%01000000	;| X
    129  f476		       40		      .byte.b	%01000000	;| X
    130  f477		       40		      .byte.b	%01000000	;| X
    131  f478		       60		      .byte.b	%01100000	;| XX
    132  f479		       20		      .byte.b	%00100000	;|  X
    133  f47a		       20		      .byte.b	%00100000	;|  X
    134  f47b		       a0		      .byte.b	%10100000	;|X X
    135  f47c		       e0		      .byte.b	%11100000	;|XXX
    136  f47d		       e0		      .byte.b	%11100000	;|XXX
    137  f47e		       00		      .byte.b	%00000000	;|
    138  f47f		       00		      .byte.b	%00000000	;|
    139  f480							; 8
    140  f480		       00		      .byte.b	%00000000	;|
    141  f481		       00		      .byte.b	%00000000	;|
    142  f482		       40		      .byte.b	%01000000	;| X
    143  f483		       e0		      .byte.b	%11100000	;|XXX
    144  f484		       a0		      .byte.b	%10100000	;|X X
    145  f485		       a0		      .byte.b	%10100000	;|X X
    146  f486		       a0		      .byte.b	%10100000	;|X X
    147  f487		       40		      .byte.b	%01000000	;| X
    148  f488		       40		      .byte.b	%01000000	;| X
    149  f489		       a0		      .byte.b	%10100000	;|X X
    150  f48a		       a0		      .byte.b	%10100000	;|X X
    151  f48b		       a0		      .byte.b	%10100000	;|X X
    152  f48c		       e0		      .byte.b	%11100000	;|XXX
    153  f48d		       40		      .byte.b	%01000000	;| X
    154  f48e		       00		      .byte.b	%00000000	;|
    155  f48f		       00		      .byte.b	%00000000	;|
    156  f490							; 9
    157  f490		       00		      .byte.b	%00000000	;|
    158  f491		       00		      .byte.b	%00000000	;|
    159  f492		       c0		      .byte.b	%11000000	;|XX
    160  f493		       e0		      .byte.b	%11100000	;|XXX
    161  f494		       20		      .byte.b	%00100000	;|  X
    162  f495		       20		      .byte.b	%00100000	;|  X
    163  f496		       60		      .byte.b	%01100000	;| XX
    164  f497		       e0		      .byte.b	%11100000	;|XXX
    165  f498		       a0		      .byte.b	%10100000	;|X X
    166  f499		       a0		      .byte.b	%10100000	;|X X
    167  f49a		       a0		      .byte.b	%10100000	;|X X
    168  f49b		       e0		      .byte.b	%11100000	;|XXX
    169  f49c		       c0		      .byte.b	%11000000	;|XX
    170  f49d		       40		      .byte.b	%01000000	;| X
    171  f49e		       00		      .byte.b	%00000000	;|
    172  f49f		       00		      .byte.b	%00000000	;|
    173  f4a0							; blank
    174  f4a0		       00		      .byte.b	%00000000	;|
    175  f4a1		       00		      .byte.b	%00000000	;|
    176  f4a2		       00		      .byte.b	%00000000	;|
    177  f4a3		       00		      .byte.b	%00000000	;|
    178  f4a4		       00		      .byte.b	%00000000	;|
    179  f4a5		       00		      .byte.b	%00000000	;|
    180  f4a6		       00		      .byte.b	%00000000	;|
    181  f4a7		       00		      .byte.b	%00000000	;|
    182  f4a8		       00		      .byte.b	%00000000	;|
    183  f4a9		       00		      .byte.b	%00000000	;|
    184  f4aa		       00		      .byte.b	%00000000	;|
    185  f4ab		       00		      .byte.b	%00000000	;|
    186  f4ac		       00		      .byte.b	%00000000	;|
    187  f4ad		       00		      .byte.b	%00000000	;|
    188  f4ae		       00		      .byte.b	%00000000	;|
    189  f4af		       00		      .byte.b	%00000000	;|
    190  f4b0							; decimal
    191  f4b0		       00		      .byte.b	%00000000	;|
    192  f4b1		       00		      .byte.b	%00000000	;|
    193  f4b2		       40		      .byte.b	%01000000	;| X
    194  f4b3		       40		      .byte.b	%01000000	;| X
    195  f4b4		       40		      .byte.b	%01000000	;| X
    196  f4b5		       00		      .byte.b	%00000000	;|
    197  f4b6		       00		      .byte.b	%00000000	;|
    198  f4b7		       00		      .byte.b	%00000000	;|
    199  f4b8		       00		      .byte.b	%00000000	;|
    200  f4b9		       00		      .byte.b	%00000000	;|
    201  f4ba		       00		      .byte.b	%00000000	;|
    202  f4bb		       00		      .byte.b	%00000000	;|
    203  f4bc		       00		      .byte.b	%00000000	;|
    204  f4bd		       00		      .byte.b	%00000000	;|
    205  f4be		       00		      .byte.b	%00000000	;|
    206  f4bf		       00		      .byte.b	%00000000	;|
    207  f4c0							; star
    208  f4c0		       00		      .byte.b	%00000000	;|
    209  f4c1		       00		      .byte.b	%00000000	;|
    210  f4c2		       a0		      .byte.b	%10100000	;|x x
    211  f4c3		       a0		      .byte.b	%10100000	;|x x
    212  f4c4		       a0		      .byte.b	%10100000	;|x x
    213  f4c5		       40		      .byte.b	%01000000	;| x
    214  f4c6		       40		      .byte.b	%01000000	;| x
    215  f4c7		       e0		      .byte.b	%11100000	;|xxx
    216  f4c8		       e0		      .byte.b	%11100000	;|xxx
    217  f4c9		       40		      .byte.b	%01000000	;| x
    218  f4ca		       40		      .byte.b	%01000000	;| x
    219  f4cb		       a0		      .byte.b	%10100000	;|x x
    220  f4cc		       a0		      .byte.b	%10100000	;|x x
    221  f4cd		       a0		      .byte.b	%10100000	;|x x
    222  f4ce		       00		      .byte.b	%00000000	;|
    223  f4cf		       00		      .byte.b	%00000000	;|
------- FILE cart.asm
------- FILE digitTableRightRev.h LEVEL 2 PASS 2
      0  f4d0					      include	"digitTableRightRev.h"
      1  f500		       00 00 00 00*	      align	256
      2  f500				   digitTableRightRev
      3  f500							; 0
      4  f500		       00		      .byte.b	%00000000	;|
      5  f501		       00		      .byte.b	%00000000	;|
      6  f502		       02		      .byte.b	%00000010	;| X
      7  f503		       02		      .byte.b	%00000010	;| X
      8  f504		       07		      .byte.b	%00000111	;|XXX
      9  f505		       05		      .byte.b	%00000101	;|X X
     10  f506		       05		      .byte.b	%00000101	;|X X
     11  f507		       05		      .byte.b	%00000101	;|X X
     12  f508		       05		      .byte.b	%00000101	;|X X
     13  f509		       05		      .byte.b	%00000101	;|X X
     14  f50a		       05		      .byte.b	%00000101	;|X X
     15  f50b		       07		      .byte.b	%00000111	;|XXX
     16  f50c		       02		      .byte.b	%00000010	;| X
     17  f50d		       02		      .byte.b	%00000010	;| X
     18  f50e		       00		      .byte.b	%00000000	;|
     19  f50f		       00		      .byte.b	%00000000	;|
     20  f510							; 1
     21  f510		       00		      .byte.b	%00000000	;|
     22  f511		       00		      .byte.b	%00000000	;|
     23  f512		       07		      .byte.b	%00000111	;|XXX
     24  f513		       07		      .byte.b	%00000111	;|XXX
     25  f514		       07		      .byte.b	%00000111	;|XXX
     26  f515		       02		      .byte.b	%00000010	;| X
     27  f516		       02		      .byte.b	%00000010	;| X
     28  f517		       02		      .byte.b	%00000010	;| X
     29  f518		       02		      .byte.b	%00000010	;| X
     30  f519		       02		      .byte.b	%00000010	;| X
     31  f51a		       02		      .byte.b	%00000010	;| X
     32  f51b		       03		      .byte.b	%00000011	;|XX
     33  f51c		       03		      .byte.b	%00000011	;|XX
     34  f51d		       02		      .byte.b	%00000010	;| X
     35  f51e		       00		      .byte.b	%00000000	;|
     36  f51f		       00		      .byte.b	%00000000	;|
     37  f520							; 2
     38  f520		       00		      .byte.b	%00000000	;|
     39  f521		       00		      .byte.b	%00000000	;|
     40  f522		       07		      .byte.b	%00000111	;|XXX
     41  f523		       07		      .byte.b	%00000111	;|XXX
     42  f524		       01		      .byte.b	%00000001	;|X
     43  f525		       01		      .byte.b	%00000001	;|X
     44  f526		       03		      .byte.b	%00000011	;|XX
     45  f527		       06		      .byte.b	%00000110	;| XX
     46  f528		       06		      .byte.b	%00000110	;| XX
     47  f529		       04		      .byte.b	%00000100	;|  X
     48  f52a		       05		      .byte.b	%00000101	;|X X
     49  f52b		       07		      .byte.b	%00000111	;|XXX
     50  f52c		       07		      .byte.b	%00000111	;|XXX
     51  f52d		       02		      .byte.b	%00000010	;| X
     52  f52e		       00		      .byte.b	%00000000	;|
     53  f52f		       00		      .byte.b	%00000000	;|
     54  f530							; 3
     55  f530		       00		      .byte.b	%00000000	;|
     56  f531		       00		      .byte.b	%00000000	;|
     57  f532		       02		      .byte.b	%00000010	;| X
     58  f533		       02		      .byte.b	%00000010	;| X
     59  f534		       07		      .byte.b	%00000111	;|XXX
     60  f535		       05		      .byte.b	%00000101	;|X X
     61  f536		       04		      .byte.b	%00000100	;|  X
     62  f537		       02		      .byte.b	%00000010	;| X
     63  f538		       06		      .byte.b	%00000110	;| XX
     64  f539		       04		      .byte.b	%00000100	;|  X
     65  f53a		       05		      .byte.b	%00000101	;|X X
     66  f53b		       07		      .byte.b	%00000111	;|XXX
     67  f53c		       02		      .byte.b	%00000010	;| X
     68  f53d		       02		      .byte.b	%00000010	;| X
     69  f53e		       00		      .byte.b	%00000000	;|
     70  f53f		       00		      .byte.b	%00000000	;|
     71  f540							; 4
     72  f540		       00		      .byte.b	%00000000	;|
     73  f541		       00		      .byte.b	%00000000	;|
     74  f542		       04		      .byte.b	%00000100	;|  X
     75  f543		       04		      .byte.b	%00000100	;|  X
     76  f544		       04		      .byte.b	%00000100	;|  X
     77  f545		       04		      .byte.b	%00000100	;|  X
     78  f546		       07		      .byte.b	%00000111	;|XXX
     79  f547		       07		      .byte.b	%00000111	;|XXX
     80  f548		       07		      .byte.b	%00000111	;|XXX
     81  f549		       05		      .byte.b	%00000101	;|X X
     82  f54a		       05		      .byte.b	%00000101	;|X X
     83  f54b		       05		      .byte.b	%00000101	;|X X
     84  f54c		       05		      .byte.b	%00000101	;|X X
     85  f54d		       05		      .byte.b	%00000101	;|X X
     86  f54e		       00		      .byte.b	%00000000	;|
     87  f54f		       00		      .byte.b	%00000000	;|
     88  f550							; 5
     89  f550		       00		      .byte.b	%00000000	;|
     90  f551		       00		      .byte.b	%00000000	;|
     91  f552		       02		      .byte.b	%00000010	;| X
     92  f553		       07		      .byte.b	%00000111	;|XXX
     93  f554		       05		      .byte.b	%00000101	;|X X
     94  f555		       04		      .byte.b	%00000100	;|  X
     95  f556		       04		      .byte.b	%00000100	;|  X
     96  f557		       06		      .byte.b	%00000110	;| XX
     97  f558		       03		      .byte.b	%00000011	;|XX
     98  f559		       03		      .byte.b	%00000011	;|XX
     99  f55a		       01		      .byte.b	%00000001	;|X
    100  f55b		       01		      .byte.b	%00000001	;|X
    101  f55c		       07		      .byte.b	%00000111	;|XXX
    102  f55d		       07		      .byte.b	%00000111	;|XXX
    103  f55e		       00		      .byte.b	%00000000	;|
    104  f55f		       00		      .byte.b	%00000000	;|
    105  f560							; 6
    106  f560		       00		      .byte.b	%00000000	;|
    107  f561		       00		      .byte.b	%00000000	;|
    108  f562		       02		      .byte.b	%00000010	;| X
    109  f563		       02		      .byte.b	%00000010	;| X
    110  f564		       07		      .byte.b	%00000111	;|XXX
    111  f565		       05		      .byte.b	%00000101	;|X X
    112  f566		       05		      .byte.b	%00000101	;|X X
    113  f567		       07		      .byte.b	%00000111	;|XXX
    114  f568		       03		      .byte.b	%00000011	;|XX
    115  f569		       01		      .byte.b	%00000001	;|X
    116  f56a		       01		      .byte.b	%00000001	;|X
    117  f56b		       01		      .byte.b	%00000001	;|X
    118  f56c		       07		      .byte.b	%00000111	;|XXX
    119  f56d		       06		      .byte.b	%00000110	;| XX
    120  f56e		       00		      .byte.b	%00000000	;|
    121  f56f		       00		      .byte.b	%00000000	;|
    122  f570							; 7
    123  f570		       00		      .byte.b	%00000000	;|
    124  f571		       00		      .byte.b	%00000000	;|
    125  f572		       01		      .byte.b	%00000001	;|X
    126  f573		       01		      .byte.b	%00000001	;|X
    127  f574		       01		      .byte.b	%00000001	;|X
    128  f575		       02		      .byte.b	%00000010	;| X
    129  f576		       02		      .byte.b	%00000010	;| X
    130  f577		       02		      .byte.b	%00000010	;| X
    131  f578		       06		      .byte.b	%00000110	;| XX
    132  f579		       04		      .byte.b	%00000100	;|  X
    133  f57a		       04		      .byte.b	%00000100	;|  X
    134  f57b		       05		      .byte.b	%00000101	;|X X
    135  f57c		       07		      .byte.b	%00000111	;|XXX
    136  f57d		       07		      .byte.b	%00000111	;|XXX
    137  f57e		       00		      .byte.b	%00000000	;|
    138  f57f		       00		      .byte.b	%00000000	;|
    139  f580							; 8
    140  f580		       00		      .byte.b	%00000000	;|
    141  f581		       00		      .byte.b	%00000000	;|
    142  f582		       02		      .byte.b	%00000010	;| X
    143  f583		       07		      .byte.b	%00000111	;|XXX
    144  f584		       05		      .byte.b	%00000101	;|X X
    145  f585		       05		      .byte.b	%00000101	;|X X
    146  f586		       05		      .byte.b	%00000101	;|X X
    147  f587		       02		      .byte.b	%00000010	;| X
    148  f588		       02		      .byte.b	%00000010	;| X
    149  f589		       05		      .byte.b	%00000101	;|X X
    150  f58a		       05		      .byte.b	%00000101	;|X X
    151  f58b		       05		      .byte.b	%00000101	;|X X
    152  f58c		       07		      .byte.b	%00000111	;|XXX
    153  f58d		       02		      .byte.b	%00000010	;| X
    154  f58e		       00		      .byte.b	%00000000	;|
    155  f58f		       00		      .byte.b	%00000000	;|
    156  f590							; 9
    157  f590		       00		      .byte.b	%00000000	;|
    158  f591		       00		      .byte.b	%00000000	;|
    159  f592		       03		      .byte.b	%00000011	;|XX
    160  f593		       07		      .byte.b	%00000111	;|XXX
    161  f594		       04		      .byte.b	%00000100	;|  X
    162  f595		       04		      .byte.b	%00000100	;|  X
    163  f596		       06		      .byte.b	%00000110	;| XX
    164  f597		       07		      .byte.b	%00000111	;|XXX
    165  f598		       05		      .byte.b	%00000101	;|X X
    166  f599		       05		      .byte.b	%00000101	;|X X
    167  f59a		       05		      .byte.b	%00000101	;|X X
    168  f59b		       07		      .byte.b	%00000111	;|XXX
    169  f59c		       03		      .byte.b	%00000011	;|XX
    170  f59d		       02		      .byte.b	%00000010	;| X
    171  f59e		       00		      .byte.b	%00000000	;|
    172  f59f		       00		      .byte.b	%00000000	;|
    173  f5a0							; blank
    174  f5a0		       00		      .byte.b	%00000000	;|
    175  f5a1		       00		      .byte.b	%00000000	;|
    176  f5a2		       00		      .byte.b	%00000000	;|
    177  f5a3		       00		      .byte.b	%00000000	;|
    178  f5a4		       00		      .byte.b	%00000000	;|
    179  f5a5		       00		      .byte.b	%00000000	;|
    180  f5a6		       00		      .byte.b	%00000000	;|
    181  f5a7		       00		      .byte.b	%00000000	;|
    182  f5a8		       00		      .byte.b	%00000000	;|
    183  f5a9		       00		      .byte.b	%00000000	;|
    184  f5aa		       00		      .byte.b	%00000000	;|
    185  f5ab		       00		      .byte.b	%00000000	;|
    186  f5ac		       00		      .byte.b	%00000000	;|
    187  f5ad		       00		      .byte.b	%00000000	;|
    188  f5ae		       00		      .byte.b	%00000000	;|
    189  f5af		       00		      .byte.b	%00000000	;|
    190  f5b0							; decimal
    191  f5b0		       00		      .byte.b	%00000000	;|
    192  f5b1		       00		      .byte.b	%00000000	;|
    193  f5b2		       02		      .byte.b	%00000010	;| X
    194  f5b3		       02		      .byte.b	%00000010	;| X
    195  f5b4		       02		      .byte.b	%00000010	;| X
    196  f5b5		       00		      .byte.b	%00000000	;|
    197  f5b6		       00		      .byte.b	%00000000	;|
    198  f5b7		       00		      .byte.b	%00000000	;|
    199  f5b8		       00		      .byte.b	%00000000	;|
    200  f5b9		       00		      .byte.b	%00000000	;|
    201  f5ba		       00		      .byte.b	%00000000	;|
    202  f5bb		       00		      .byte.b	%00000000	;|
    203  f5bc		       00		      .byte.b	%00000000	;|
    204  f5bd		       00		      .byte.b	%00000000	;|
    205  f5be		       00		      .byte.b	%00000000	;|
    206  f5bf		       00		      .byte.b	%00000000	;|
    207  f5c0							; star
    208  f5c0		       00		      .byte.b	%00000000	;|
    209  f5c1		       00		      .byte.b	%00000000	;|
    210  f5c2		       05		      .byte.b	%00000101	;|x x
    211  f5c3		       05		      .byte.b	%00000101	;|x x
    212  f5c4		       05		      .byte.b	%00000101	;|x x
    213  f5c5		       02		      .byte.b	%00000010	;| x
    214  f5c6		       02		      .byte.b	%00000010	;| x
    215  f5c7		       07		      .byte.b	%00000111	;|xxx
    216  f5c8		       07		      .byte.b	%00000111	;|xxx
    217  f5c9		       02		      .byte.b	%00000010	;| x
    218  f5ca		       05		      .byte.b	%00000101	;| x
    219  f5cb		       05		      .byte.b	%00000101	;|x x
    220  f5cc		       05		      .byte.b	%00000101	;|x x
    221  f5cd		       00		      .byte.b	%00000000	;|x x
    222  f5ce		       00		      .byte.b	%00000000	;|
    223  f5cf		       00		      .byte.b	%00000000	;|
------- FILE cart.asm
------- FILE digitTableLeftRev.h LEVEL 2 PASS 2
      0  f5d0					      include	"digitTableLeftRev.h"
      1  f600		       00 00 00 00*	      align	256
      2  f600				   digitTableLeftRev
      3  f600							; 0
      4  f600		       00		      .byte.b	%00000000	;|
      5  f601		       00		      .byte.b	%00000000	;|
      6  f602		       20		      .byte.b	%00100000	;| X
      7  f603		       20		      .byte.b	%00100000	;| X
      8  f604		       70		      .byte.b	%01110000	;|XXX
      9  f605		       50		      .byte.b	%01010000	;|X X
     10  f606		       50		      .byte.b	%01010000	;|X X
     11  f607		       50		      .byte.b	%01010000	;|X X
     12  f608		       50		      .byte.b	%01010000	;|X X
     13  f609		       50		      .byte.b	%01010000	;|X X
     14  f60a		       50		      .byte.b	%01010000	;|X X
     15  f60b		       70		      .byte.b	%01110000	;|XXX
     16  f60c		       20		      .byte.b	%00100000	;| X
     17  f60d		       20		      .byte.b	%00100000	;| X
     18  f60e		       00		      .byte.b	%00000000	;|
     19  f60f		       00		      .byte.b	%00000000	;|
     20  f610							; 1
     21  f610		       00		      .byte.b	%00000000	;|
     22  f611		       00		      .byte.b	%00000000	;|
     23  f612		       70		      .byte.b	%01110000	;|XXX
     24  f613		       70		      .byte.b	%01110000	;|XXX
     25  f614		       70		      .byte.b	%01110000	;|XXX
     26  f615		       20		      .byte.b	%00100000	;| X
     27  f616		       20		      .byte.b	%00100000	;| X
     28  f617		       20		      .byte.b	%00100000	;| X
     29  f618		       20		      .byte.b	%00100000	;| X
     30  f619		       20		      .byte.b	%00100000	;| X
     31  f61a		       20		      .byte.b	%00100000	;| X
     32  f61b		       30		      .byte.b	%00110000	;|XX
     33  f61c		       30		      .byte.b	%00110000	;|XX
     34  f61d		       20		      .byte.b	%00100000	;| X
     35  f61e		       00		      .byte.b	%00000000	;|
     36  f61f		       00		      .byte.b	%00000000	;|
     37  f620							; 2
     38  f620		       00		      .byte.b	%00000000	;|
     39  f621		       00		      .byte.b	%00000000	;|
     40  f622		       70		      .byte.b	%01110000	;|XXX
     41  f623		       70		      .byte.b	%01110000	;|XXX
     42  f624		       10		      .byte.b	%00010000	;|X
     43  f625		       10		      .byte.b	%00010000	;|X
     44  f626		       30		      .byte.b	%00110000	;|XX
     45  f627		       60		      .byte.b	%01100000	;| XX
     46  f628		       60		      .byte.b	%01100000	;| XX
     47  f629		       40		      .byte.b	%01000000	;|  X
     48  f62a		       50		      .byte.b	%01010000	;|X X
     49  f62b		       70		      .byte.b	%01110000	;|XXX
     50  f62c		       70		      .byte.b	%01110000	;|XXX
     51  f62d		       20		      .byte.b	%00100000	;| X
     52  f62e		       00		      .byte.b	%00000000	;|
     53  f62f		       00		      .byte.b	%00000000	;|
     54  f630							; 3
     55  f630		       00		      .byte.b	%00000000	;|
     56  f631		       00		      .byte.b	%00000000	;|
     57  f632		       20		      .byte.b	%00100000	;| X
     58  f633		       20		      .byte.b	%00100000	;| X
     59  f634		       70		      .byte.b	%01110000	;|XXX
     60  f635		       50		      .byte.b	%01010000	;|X X
     61  f636		       40		      .byte.b	%01000000	;|  X
     62  f637		       20		      .byte.b	%00100000	;| X
     63  f638		       60		      .byte.b	%01100000	;| XX
     64  f639		       40		      .byte.b	%01000000	;|  X
     65  f63a		       50		      .byte.b	%01010000	;|X X
     66  f63b		       70		      .byte.b	%01110000	;|XXX
     67  f63c		       20		      .byte.b	%00100000	;| X
     68  f63d		       20		      .byte.b	%00100000	;| X
     69  f63e		       00		      .byte.b	%00000000	;|
     70  f63f		       00		      .byte.b	%00000000	;|
     71  f640							; 4
     72  f640		       00		      .byte.b	%00000000	;|
     73  f641		       00		      .byte.b	%00000000	;|
     74  f642		       40		      .byte.b	%01000000	;|  X
     75  f643		       40		      .byte.b	%01000000	;|  X
     76  f644		       40		      .byte.b	%01000000	;|  X
     77  f645		       40		      .byte.b	%01000000	;|  X
     78  f646		       70		      .byte.b	%01110000	;|XXX
     79  f647		       70		      .byte.b	%01110000	;|XXX
     80  f648		       70		      .byte.b	%01110000	;|XXX
     81  f649		       50		      .byte.b	%01010000	;|X X
     82  f64a		       50		      .byte.b	%01010000	;|X X
     83  f64b		       50		      .byte.b	%01010000	;|X X
     84  f64c		       50		      .byte.b	%01010000	;|X X
     85  f64d		       50		      .byte.b	%01010000	;|X X
     86  f64e		       00		      .byte.b	%00000000	;|
     87  f64f		       00		      .byte.b	%00000000	;|
     88  f650							; 5
     89  f650		       00		      .byte.b	%00000000	;|
     90  f651		       00		      .byte.b	%00000000	;|
     91  f652		       20		      .byte.b	%00100000	;| X
     92  f653		       70		      .byte.b	%01110000	;|XXX
     93  f654		       50		      .byte.b	%01010000	;|X X
     94  f655		       40		      .byte.b	%01000000	;|  X
     95  f656		       40		      .byte.b	%01000000	;|  X
     96  f657		       60		      .byte.b	%01100000	;| XX
     97  f658		       30		      .byte.b	%00110000	;|XX
     98  f659		       30		      .byte.b	%00110000	;|XX
     99  f65a		       10		      .byte.b	%00010000	;|X
    100  f65b		       10		      .byte.b	%00010000	;|X
    101  f65c		       70		      .byte.b	%01110000	;|XXX
    102  f65d		       70		      .byte.b	%01110000	;|XXX
    103  f65e		       00		      .byte.b	%00000000	;|
    104  f65f		       00		      .byte.b	%00000000	;|
    105  f660							; 6
    106  f660		       00		      .byte.b	%00000000	;|
    107  f661		       00		      .byte.b	%00000000	;|
    108  f662		       20		      .byte.b	%00100000	;| X
    109  f663		       20		      .byte.b	%00100000	;| X
    110  f664		       70		      .byte.b	%01110000	;|XXX
    111  f665		       50		      .byte.b	%01010000	;|X X
    112  f666		       50		      .byte.b	%01010000	;|X X
    113  f667		       70		      .byte.b	%01110000	;|XXX
    114  f668		       30		      .byte.b	%00110000	;|XX
    115  f669		       10		      .byte.b	%00010000	;|X
    116  f66a		       10		      .byte.b	%00010000	;|X
    117  f66b		       10		      .byte.b	%00010000	;|X
    118  f66c		       70		      .byte.b	%01110000	;|XXX
    119  f66d		       60		      .byte.b	%01100000	;| XX
    120  f66e		       00		      .byte.b	%00000000	;|
    121  f66f		       00		      .byte.b	%00000000	;|
    122  f670							; 7
    123  f670		       00		      .byte.b	%00000000	;|
    124  f671		       00		      .byte.b	%00000000	;|
    125  f672		       10		      .byte.b	%00010000	;|X
    126  f673		       10		      .byte.b	%00010000	;|X
    127  f674		       10		      .byte.b	%00010000	;|X
    128  f675		       20		      .byte.b	%00100000	;| X
    129  f676		       20		      .byte.b	%00100000	;| X
    130  f677		       20		      .byte.b	%00100000	;| X
    131  f678		       60		      .byte.b	%01100000	;| XX
    132  f679		       40		      .byte.b	%01000000	;|  X
    133  f67a		       40		      .byte.b	%01000000	;|  X
    134  f67b		       50		      .byte.b	%01010000	;|X X
    135  f67c		       70		      .byte.b	%01110000	;|XXX
    136  f67d		       70		      .byte.b	%01110000	;|XXX
    137  f67e		       00		      .byte.b	%00000000	;|
    138  f67f		       00		      .byte.b	%00000000	;|
    139  f680							; 8
    140  f680		       00		      .byte.b	%00000000	;|
    141  f681		       00		      .byte.b	%00000000	;|
    142  f682		       20		      .byte.b	%00100000	;| X
    143  f683		       70		      .byte.b	%01110000	;|XXX
    144  f684		       50		      .byte.b	%01010000	;|X X
    145  f685		       50		      .byte.b	%01010000	;|X X
    146  f686		       50		      .byte.b	%01010000	;|X X
    147  f687		       20		      .byte.b	%00100000	;| X
    148  f688		       20		      .byte.b	%00100000	;| X
    149  f689		       50		      .byte.b	%01010000	;|X X
    150  f68a		       50		      .byte.b	%01010000	;|X X
    151  f68b		       50		      .byte.b	%01010000	;|X X
    152  f68c		       70		      .byte.b	%01110000	;|XXX
    153  f68d		       20		      .byte.b	%00100000	;| X
    154  f68e		       00		      .byte.b	%00000000	;|
    155  f68f		       00		      .byte.b	%00000000	;|
    156  f690							; 9
    157  f690		       00		      .byte.b	%00000000	;|
    158  f691		       00		      .byte.b	%00000000	;|
    159  f692		       30		      .byte.b	%00110000	;|XX
    160  f693		       70		      .byte.b	%01110000	;|XXX
    161  f694		       40		      .byte.b	%01000000	;|  X
    162  f695		       40		      .byte.b	%01000000	;|  X
    163  f696		       60		      .byte.b	%01100000	;| XX
    164  f697		       70		      .byte.b	%01110000	;|XXX
    165  f698		       50		      .byte.b	%01010000	;|X X
    166  f699		       50		      .byte.b	%01010000	;|X X
    167  f69a		       50		      .byte.b	%01010000	;|X X
    168  f69b		       70		      .byte.b	%01110000	;|XXX
    169  f69c		       30		      .byte.b	%00110000	;|XX
    170  f69d		       20		      .byte.b	%00100000	;| X
    171  f69e		       00		      .byte.b	%00000000	;|
    172  f69f		       00		      .byte.b	%00000000	;|
    173  f6a0							; blank
    174  f6a0		       00		      .byte.b	%00000000	;|
    175  f6a1		       00		      .byte.b	%00000000	;|
    176  f6a2		       00		      .byte.b	%00000000	;|
    177  f6a3		       00		      .byte.b	%00000000	;|
    178  f6a4		       00		      .byte.b	%00000000	;|
    179  f6a5		       00		      .byte.b	%00000000	;|
    180  f6a6		       00		      .byte.b	%00000000	;|
    181  f6a7		       00		      .byte.b	%00000000	;|
    182  f6a8		       00		      .byte.b	%00000000	;|
    183  f6a9		       00		      .byte.b	%00000000	;|
    184  f6aa		       00		      .byte.b	%00000000	;|
    185  f6ab		       00		      .byte.b	%00000000	;|
    186  f6ac		       00		      .byte.b	%00000000	;|
    187  f6ad		       00		      .byte.b	%00000000	;|
    188  f6ae		       00		      .byte.b	%00000000	;|
    189  f6af		       00		      .byte.b	%00000000	;|
    190  f6b0							; decimal
    191  f6b0		       00		      .byte.b	%00000000	;|
    192  f6b1		       00		      .byte.b	%00000000	;|
    193  f6b2		       20		      .byte.b	%00100000	;| X
    194  f6b3		       20		      .byte.b	%00100000	;| X
    195  f6b4		       20		      .byte.b	%00100000	;| X
    196  f6b5		       00		      .byte.b	%00000000	;|
    197  f6b6		       00		      .byte.b	%00000000	;|
    198  f6b7		       00		      .byte.b	%00000000	;|
    199  f6b8		       00		      .byte.b	%00000000	;|
    200  f6b9		       00		      .byte.b	%00000000	;|
    201  f6ba		       00		      .byte.b	%00000000	;|
    202  f6bb		       00		      .byte.b	%00000000	;|
    203  f6bc		       00		      .byte.b	%00000000	;|
    204  f6bd		       00		      .byte.b	%00000000	;|
    205  f6be		       00		      .byte.b	%00000000	;|
    206  f6bf		       00		      .byte.b	%00000000	;|
    207  f6c0							; star
    208  f6c0		       00		      .byte.b	%00000000	;|
    209  f6c1		       00		      .byte.b	%00000000	;|
    210  f6c2		       50		      .byte.b	%01010000	;|x x
    211  f6c3		       50		      .byte.b	%01010000	;|x x
    212  f6c4		       50		      .byte.b	%01010000	;|x x
    213  f6c5		       20		      .byte.b	%00100000	;| x
    214  f6c6		       20		      .byte.b	%00100000	;| x
    215  f6c7		       70		      .byte.b	%01110000	;|xxx
    216  f6c8		       70		      .byte.b	%01110000	;|xxx
    217  f6c9		       20		      .byte.b	%00100000	;| x
    218  f6ca		       20		      .byte.b	%00100000	;| x
    219  f6cb		       50		      .byte.b	%01010000	;|x x
    220  f6cc		       50		      .byte.b	%01010000	;|x x
    221  f6cd		       50		      .byte.b	%01010000	;|x x
    222  f6ce		       00		      .byte.b	%00000000	;|
    223  f6cf		       00		      .byte.b	%00000000	;|
------- FILE cart.asm
    586  f6d0
    587  f6d0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    588  f6d0							;;;;  end ROM lookup tables
    589  f6d0
    590  f6d0							;;; Complete to 4kB
    591  fffc					      org	$FFFC
    592  fffc		       00 f0		      .word.w	Start
    593  fffe		       00 f0		      .word.w	Start
